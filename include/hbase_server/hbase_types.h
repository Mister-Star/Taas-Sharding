/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hbase_TYPES_H
#define hbase_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace apache { namespace hadoop { namespace hbase { namespace thrift2 {

/**
 * Specify type of delete:
 *  - DELETE_COLUMN means exactly one version will be removed,
 *  - DELETE_COLUMNS means previous versions will also be removed.
 */
struct TDeleteType {
  enum type {
    DELETE_COLUMN = 0,
    DELETE_COLUMNS = 1,
    DELETE_FAMILY = 2,
    DELETE_FAMILY_VERSION = 3
  };
};

extern const std::map<int, const char*> _TDeleteType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDeleteType::type& val);

std::string to_string(const TDeleteType::type& val);

/**
 * Specify Durability:
 *  - SKIP_WAL means do not write the Mutation to the WAL.
 *  - ASYNC_WAL means write the Mutation to the WAL asynchronously,
 *  - SYNC_WAL means write the Mutation to the WAL synchronously,
 *  - FSYNC_WAL means Write the Mutation to the WAL synchronously and force the entries to disk.
 */
struct TDurability {
  enum type {
    USE_DEFAULT = 0,
    SKIP_WAL = 1,
    ASYNC_WAL = 2,
    SYNC_WAL = 3,
    FSYNC_WAL = 4
  };
};

extern const std::map<int, const char*> _TDurability_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDurability::type& val);

std::string to_string(const TDurability::type& val);

/**
 * Specify Consistency:
 *  - STRONG means reads only from primary region
 *  - TIMELINE means reads might return values from secondary region replicas
 */
struct TConsistency {
  enum type {
    STRONG = 1,
    TIMELINE = 2
  };
};

extern const std::map<int, const char*> _TConsistency_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TConsistency::type& val);

std::string to_string(const TConsistency::type& val);

struct TReadType {
  enum type {
    DEFAULT = 1,
    STREAM = 2,
    PREAD = 3
  };
};

extern const std::map<int, const char*> _TReadType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TReadType::type& val);

std::string to_string(const TReadType::type& val);

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.filter.CompareFilter$CompareOp.
 */
struct TCompareOp {
  enum type {
    LESS = 0,
    LESS_OR_EQUAL = 1,
    EQUAL = 2,
    NOT_EQUAL = 3,
    GREATER_OR_EQUAL = 4,
    GREATER = 5,
    NO_OP = 6
  };
};

extern const std::map<int, const char*> _TCompareOp_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TCompareOp::type& val);

std::string to_string(const TCompareOp::type& val);

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.regionserver.BloomType
 */
struct TBloomFilterType {
  enum type {
    /**
     * Bloomfilters disabled
     */
    NONE = 0,
    /**
     * Bloom enabled with Table row as Key
     */
    ROW = 1,
    /**
     * Bloom enabled with Table row &amp; column (family+qualifier) as Key
     */
    ROWCOL = 2,
    /**
     * Bloom enabled with Table row prefix as Key, specify the length of the prefix
     */
    ROWPREFIX_FIXED_LENGTH = 3
  };
};

extern const std::map<int, const char*> _TBloomFilterType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TBloomFilterType::type& val);

std::string to_string(const TBloomFilterType::type& val);

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.io.compress.Algorithm
 */
struct TCompressionAlgorithm {
  enum type {
    LZO = 0,
    GZ = 1,
    NONE = 2,
    SNAPPY = 3,
    LZ4 = 4,
    BZIP2 = 5,
    ZSTD = 6
  };
};

extern const std::map<int, const char*> _TCompressionAlgorithm_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TCompressionAlgorithm::type& val);

std::string to_string(const TCompressionAlgorithm::type& val);

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.io.encoding.DataBlockEncoding
 */
struct TDataBlockEncoding {
  enum type {
    /**
     * Disable data block encoding.
     */
    NONE = 0,
    PREFIX = 2,
    DIFF = 3,
    FAST_DIFF = 4,
    ROW_INDEX_V1 = 7
  };
};

extern const std::map<int, const char*> _TDataBlockEncoding_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDataBlockEncoding::type& val);

std::string to_string(const TDataBlockEncoding::type& val);

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.KeepDeletedCells
 */
struct TKeepDeletedCells {
  enum type {
    /**
     * Deleted Cells are not retained.
     */
    FALSE = 0,
    /**
     * Deleted Cells are retained until they are removed by other means
     * such TTL or VERSIONS.
     * If no TTL is specified or no new versions of delete cells are
     * written, they are retained forever.
     */
    TRUE = 1,
    /**
     * Deleted Cells are retained until the delete marker expires due to TTL.
     * This is useful when TTL is combined with MIN_VERSIONS and one
     * wants to keep a minimum number of versions around but at the same
     * time remove deleted cells after the TTL.
     */
    TTL = 2
  };
};

extern const std::map<int, const char*> _TKeepDeletedCells_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TKeepDeletedCells::type& val);

std::string to_string(const TKeepDeletedCells::type& val);

class TTimeRange;

class TColumn;

class TColumnValue;

class TColumnIncrement;

class TResult;

class TAuthorization;

class TCellVisibility;

class TGet;

class TPut;

class TDelete;

class TIncrement;

class TAppend;

class TScan;

class TMutation;

class TRowMutations;

class THRegionInfo;

class TServerName;

class THRegionLocation;

class TTableName;

class TColumnFamilyDescriptor;

class TTableDescriptor;

class TNamespaceDescriptor;

class TIOError;

class TIllegalArgument;


class TTimeRange : public virtual ::apache::thrift::TBase {
 public:

  TTimeRange(const TTimeRange&) noexcept;
  TTimeRange& operator=(const TTimeRange&) noexcept;
  TTimeRange() noexcept
             : minStamp(0),
               maxStamp(0) {
  }

  virtual ~TTimeRange() noexcept;
  int64_t minStamp;
  int64_t maxStamp;

  void __set_minStamp(const int64_t val);

  void __set_maxStamp(const int64_t val);

  bool operator == (const TTimeRange & rhs) const
  {
    if (!(minStamp == rhs.minStamp))
      return false;
    if (!(maxStamp == rhs.maxStamp))
      return false;
    return true;
  }
  bool operator != (const TTimeRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTimeRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTimeRange &a, TTimeRange &b);

std::ostream& operator<<(std::ostream& out, const TTimeRange& obj);

typedef struct _TColumn__isset {
  _TColumn__isset() : qualifier(false), timestamp(false) {}
  bool qualifier :1;
  bool timestamp :1;
} _TColumn__isset;

/**
 * Addresses a single cell or multiple cells
 * in a HBase table by column family and optionally
 * a column qualifier and timestamp
 */
class TColumn : public virtual ::apache::thrift::TBase {
 public:

  TColumn(const TColumn&);
  TColumn& operator=(const TColumn&);
  TColumn() noexcept
          : family(),
            qualifier(),
            timestamp(0) {
  }

  virtual ~TColumn() noexcept;
  std::string family;
  std::string qualifier;
  int64_t timestamp;

  _TColumn__isset __isset;

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_timestamp(const int64_t val);

  bool operator == (const TColumn & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (__isset.qualifier != rhs.__isset.qualifier)
      return false;
    else if (__isset.qualifier && !(qualifier == rhs.qualifier))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TColumn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumn &a, TColumn &b);

std::ostream& operator<<(std::ostream& out, const TColumn& obj);

typedef struct _TColumnValue__isset {
  _TColumnValue__isset() : timestamp(false), tags(false), type(false) {}
  bool timestamp :1;
  bool tags :1;
  bool type :1;
} _TColumnValue__isset;

/**
 * Represents a single cell and its value.
 */
class TColumnValue : public virtual ::apache::thrift::TBase {
 public:

  TColumnValue(const TColumnValue&);
  TColumnValue& operator=(const TColumnValue&);
  TColumnValue() noexcept
               : family(),
                 qualifier(),
                 value(),
                 timestamp(0),
                 tags(),
                 type(0) {
  }

  virtual ~TColumnValue() noexcept;
  std::string family;
  std::string qualifier;
  std::string value;
  int64_t timestamp;
  std::string tags;
  int8_t type;

  _TColumnValue__isset __isset;

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_value(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_tags(const std::string& val);

  void __set_type(const int8_t val);

  bool operator == (const TColumnValue & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.tags != rhs.__isset.tags)
      return false;
    else if (__isset.tags && !(tags == rhs.tags))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const TColumnValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnValue &a, TColumnValue &b);

std::ostream& operator<<(std::ostream& out, const TColumnValue& obj);

typedef struct _TColumnIncrement__isset {
  _TColumnIncrement__isset() : amount(true) {}
  bool amount :1;
} _TColumnIncrement__isset;

/**
 * Represents a single cell and the amount to increment it by
 */
class TColumnIncrement : public virtual ::apache::thrift::TBase {
 public:

  TColumnIncrement(const TColumnIncrement&);
  TColumnIncrement& operator=(const TColumnIncrement&);
  TColumnIncrement() noexcept
                   : family(),
                     qualifier(),
                     amount(1LL) {
  }

  virtual ~TColumnIncrement() noexcept;
  std::string family;
  std::string qualifier;
  int64_t amount;

  _TColumnIncrement__isset __isset;

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_amount(const int64_t val);

  bool operator == (const TColumnIncrement & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (__isset.amount != rhs.__isset.amount)
      return false;
    else if (__isset.amount && !(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const TColumnIncrement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnIncrement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnIncrement &a, TColumnIncrement &b);

std::ostream& operator<<(std::ostream& out, const TColumnIncrement& obj);

typedef struct _TResult__isset {
  _TResult__isset() : row(false), stale(true), partial(true) {}
  bool row :1;
  bool stale :1;
  bool partial :1;
} _TResult__isset;

/**
 * if no Result is found, row and columnValues will not be set.
 */
class TResult : public virtual ::apache::thrift::TBase {
 public:

  TResult(const TResult&);
  TResult& operator=(const TResult&);
  TResult() noexcept
          : row(),
            stale(false),
            partial(false) {
  }

  virtual ~TResult() noexcept;
  std::string row;
  std::vector<TColumnValue>  columnValues;
  bool stale;
  bool partial;

  _TResult__isset __isset;

  void __set_row(const std::string& val);

  void __set_columnValues(const std::vector<TColumnValue> & val);

  void __set_stale(const bool val);

  void __set_partial(const bool val);

  bool operator == (const TResult & rhs) const
  {
    if (__isset.row != rhs.__isset.row)
      return false;
    else if (__isset.row && !(row == rhs.row))
      return false;
    if (!(columnValues == rhs.columnValues))
      return false;
    if (__isset.stale != rhs.__isset.stale)
      return false;
    else if (__isset.stale && !(stale == rhs.stale))
      return false;
    if (__isset.partial != rhs.__isset.partial)
      return false;
    else if (__isset.partial && !(partial == rhs.partial))
      return false;
    return true;
  }
  bool operator != (const TResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResult &a, TResult &b);

std::ostream& operator<<(std::ostream& out, const TResult& obj);

typedef struct _TAuthorization__isset {
  _TAuthorization__isset() : labels(false) {}
  bool labels :1;
} _TAuthorization__isset;

class TAuthorization : public virtual ::apache::thrift::TBase {
 public:

  TAuthorization(const TAuthorization&);
  TAuthorization& operator=(const TAuthorization&);
  TAuthorization() noexcept {
  }

  virtual ~TAuthorization() noexcept;
  std::vector<std::string>  labels;

  _TAuthorization__isset __isset;

  void __set_labels(const std::vector<std::string> & val);

  bool operator == (const TAuthorization & rhs) const
  {
    if (__isset.labels != rhs.__isset.labels)
      return false;
    else if (__isset.labels && !(labels == rhs.labels))
      return false;
    return true;
  }
  bool operator != (const TAuthorization &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAuthorization & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAuthorization &a, TAuthorization &b);

std::ostream& operator<<(std::ostream& out, const TAuthorization& obj);

typedef struct _TCellVisibility__isset {
  _TCellVisibility__isset() : expression(false) {}
  bool expression :1;
} _TCellVisibility__isset;

class TCellVisibility : public virtual ::apache::thrift::TBase {
 public:

  TCellVisibility(const TCellVisibility&);
  TCellVisibility& operator=(const TCellVisibility&);
  TCellVisibility() noexcept
                  : expression() {
  }

  virtual ~TCellVisibility() noexcept;
  std::string expression;

  _TCellVisibility__isset __isset;

  void __set_expression(const std::string& val);

  bool operator == (const TCellVisibility & rhs) const
  {
    if (__isset.expression != rhs.__isset.expression)
      return false;
    else if (__isset.expression && !(expression == rhs.expression))
      return false;
    return true;
  }
  bool operator != (const TCellVisibility &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCellVisibility & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCellVisibility &a, TCellVisibility &b);

std::ostream& operator<<(std::ostream& out, const TCellVisibility& obj);

typedef struct _TGet__isset {
  _TGet__isset() : columns(false), timestamp(false), timeRange(false), maxVersions(false), filterString(false), attributes(false), authorizations(false), consistency(false), targetReplicaId(false), cacheBlocks(false), storeLimit(false), storeOffset(false), existence_only(false), filterBytes(false) {}
  bool columns :1;
  bool timestamp :1;
  bool timeRange :1;
  bool maxVersions :1;
  bool filterString :1;
  bool attributes :1;
  bool authorizations :1;
  bool consistency :1;
  bool targetReplicaId :1;
  bool cacheBlocks :1;
  bool storeLimit :1;
  bool storeOffset :1;
  bool existence_only :1;
  bool filterBytes :1;
} _TGet__isset;

/**
 * Used to perform Get operations on a single row.
 * 
 * The scope can be further narrowed down by specifying a list of
 * columns or column families.
 * 
 * To get everything for a row, instantiate a Get object with just the row to get.
 * To further define the scope of what to get you can add a timestamp or time range
 * with an optional maximum number of versions to return.
 * 
 * If you specify a time range and a timestamp the range is ignored.
 * Timestamps on TColumns are ignored.
 */
class TGet : public virtual ::apache::thrift::TBase {
 public:

  TGet(const TGet&);
  TGet& operator=(const TGet&);
  TGet() noexcept
       : row(),
         timestamp(0),
         maxVersions(0),
         filterString(),
         consistency(static_cast<TConsistency::type>(0)),
         targetReplicaId(0),
         cacheBlocks(0),
         storeLimit(0),
         storeOffset(0),
         existence_only(0),
         filterBytes() {
  }

  virtual ~TGet() noexcept;
  std::string row;
  std::vector<TColumn>  columns;
  int64_t timestamp;
  TTimeRange timeRange;
  int32_t maxVersions;
  std::string filterString;
  std::map<std::string, std::string>  attributes;
  TAuthorization authorizations;
  /**
   * 
   * @see TConsistency
   */
  TConsistency::type consistency;
  int32_t targetReplicaId;
  bool cacheBlocks;
  int32_t storeLimit;
  int32_t storeOffset;
  bool existence_only;
  std::string filterBytes;

  _TGet__isset __isset;

  void __set_row(const std::string& val);

  void __set_columns(const std::vector<TColumn> & val);

  void __set_timestamp(const int64_t val);

  void __set_timeRange(const TTimeRange& val);

  void __set_maxVersions(const int32_t val);

  void __set_filterString(const std::string& val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_authorizations(const TAuthorization& val);

  void __set_consistency(const TConsistency::type val);

  void __set_targetReplicaId(const int32_t val);

  void __set_cacheBlocks(const bool val);

  void __set_storeLimit(const int32_t val);

  void __set_storeOffset(const int32_t val);

  void __set_existence_only(const bool val);

  void __set_filterBytes(const std::string& val);

  bool operator == (const TGet & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.timeRange != rhs.__isset.timeRange)
      return false;
    else if (__isset.timeRange && !(timeRange == rhs.timeRange))
      return false;
    if (__isset.maxVersions != rhs.__isset.maxVersions)
      return false;
    else if (__isset.maxVersions && !(maxVersions == rhs.maxVersions))
      return false;
    if (__isset.filterString != rhs.__isset.filterString)
      return false;
    else if (__isset.filterString && !(filterString == rhs.filterString))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.authorizations != rhs.__isset.authorizations)
      return false;
    else if (__isset.authorizations && !(authorizations == rhs.authorizations))
      return false;
    if (__isset.consistency != rhs.__isset.consistency)
      return false;
    else if (__isset.consistency && !(consistency == rhs.consistency))
      return false;
    if (__isset.targetReplicaId != rhs.__isset.targetReplicaId)
      return false;
    else if (__isset.targetReplicaId && !(targetReplicaId == rhs.targetReplicaId))
      return false;
    if (__isset.cacheBlocks != rhs.__isset.cacheBlocks)
      return false;
    else if (__isset.cacheBlocks && !(cacheBlocks == rhs.cacheBlocks))
      return false;
    if (__isset.storeLimit != rhs.__isset.storeLimit)
      return false;
    else if (__isset.storeLimit && !(storeLimit == rhs.storeLimit))
      return false;
    if (__isset.storeOffset != rhs.__isset.storeOffset)
      return false;
    else if (__isset.storeOffset && !(storeOffset == rhs.storeOffset))
      return false;
    if (__isset.existence_only != rhs.__isset.existence_only)
      return false;
    else if (__isset.existence_only && !(existence_only == rhs.existence_only))
      return false;
    if (__isset.filterBytes != rhs.__isset.filterBytes)
      return false;
    else if (__isset.filterBytes && !(filterBytes == rhs.filterBytes))
      return false;
    return true;
  }
  bool operator != (const TGet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGet &a, TGet &b);

std::ostream& operator<<(std::ostream& out, const TGet& obj);

typedef struct _TPut__isset {
  _TPut__isset() : timestamp(false), attributes(false), durability(false), cellVisibility(false) {}
  bool timestamp :1;
  bool attributes :1;
  bool durability :1;
  bool cellVisibility :1;
} _TPut__isset;

/**
 * Used to perform Put operations for a single row.
 * 
 * Add column values to this object and they'll be added.
 * You can provide a default timestamp if the column values
 * don't have one. If you don't provide a default timestamp
 * the current time is inserted.
 * 
 * You can specify how this Put should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 */
class TPut : public virtual ::apache::thrift::TBase {
 public:

  TPut(const TPut&);
  TPut& operator=(const TPut&);
  TPut() noexcept
       : row(),
         timestamp(0),
         durability(static_cast<TDurability::type>(0)) {
  }

  virtual ~TPut() noexcept;
  std::string row;
  std::vector<TColumnValue>  columnValues;
  int64_t timestamp;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;
  TCellVisibility cellVisibility;

  _TPut__isset __isset;

  void __set_row(const std::string& val);

  void __set_columnValues(const std::vector<TColumnValue> & val);

  void __set_timestamp(const int64_t val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  void __set_cellVisibility(const TCellVisibility& val);

  bool operator == (const TPut & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(columnValues == rhs.columnValues))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    if (__isset.cellVisibility != rhs.__isset.cellVisibility)
      return false;
    else if (__isset.cellVisibility && !(cellVisibility == rhs.cellVisibility))
      return false;
    return true;
  }
  bool operator != (const TPut &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPut & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPut &a, TPut &b);

std::ostream& operator<<(std::ostream& out, const TPut& obj);

typedef struct _TDelete__isset {
  _TDelete__isset() : columns(false), timestamp(false), deleteType(true), attributes(false), durability(false) {}
  bool columns :1;
  bool timestamp :1;
  bool deleteType :1;
  bool attributes :1;
  bool durability :1;
} _TDelete__isset;

/**
 * Used to perform Delete operations on a single row.
 * 
 * The scope can be further narrowed down by specifying a list of
 * columns or column families as TColumns.
 * 
 * Specifying only a family in a TColumn will delete the whole family.
 * If a timestamp is specified all versions with a timestamp less than
 * or equal to this will be deleted. If no timestamp is specified the
 * current time will be used.
 * 
 * Specifying a family and a column qualifier in a TColumn will delete only
 * this qualifier. If a timestamp is specified only versions equal
 * to this timestamp will be deleted. If no timestamp is specified the
 * most recent version will be deleted.  To delete all previous versions,
 * specify the DELETE_COLUMNS TDeleteType.
 * 
 * The top level timestamp is only used if a complete row should be deleted
 * (i.e. no columns are passed) and if it is specified it works the same way
 * as if you had added a TColumn for every column family and this timestamp
 * (i.e. all versions older than or equal in all column families will be deleted)
 * 
 * You can specify how this Delete should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 */
class TDelete : public virtual ::apache::thrift::TBase {
 public:

  TDelete(const TDelete&);
  TDelete& operator=(const TDelete&);
  TDelete() noexcept
          : row(),
            timestamp(0),
            deleteType(static_cast<TDeleteType::type>(1)),
            durability(static_cast<TDurability::type>(0)) {
  }

  virtual ~TDelete() noexcept;
  std::string row;
  std::vector<TColumn>  columns;
  int64_t timestamp;
  /**
   * 
   * @see TDeleteType
   */
  TDeleteType::type deleteType;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;

  _TDelete__isset __isset;

  void __set_row(const std::string& val);

  void __set_columns(const std::vector<TColumn> & val);

  void __set_timestamp(const int64_t val);

  void __set_deleteType(const TDeleteType::type val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  bool operator == (const TDelete & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.deleteType != rhs.__isset.deleteType)
      return false;
    else if (__isset.deleteType && !(deleteType == rhs.deleteType))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    return true;
  }
  bool operator != (const TDelete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDelete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDelete &a, TDelete &b);

std::ostream& operator<<(std::ostream& out, const TDelete& obj);

typedef struct _TIncrement__isset {
  _TIncrement__isset() : attributes(false), durability(false), cellVisibility(false), returnResults(false) {}
  bool attributes :1;
  bool durability :1;
  bool cellVisibility :1;
  bool returnResults :1;
} _TIncrement__isset;

/**
 * Used to perform Increment operations for a single row.
 * 
 * You can specify how this Increment should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 */
class TIncrement : public virtual ::apache::thrift::TBase {
 public:

  TIncrement(const TIncrement&);
  TIncrement& operator=(const TIncrement&);
  TIncrement() noexcept
             : row(),
               durability(static_cast<TDurability::type>(0)),
               returnResults(0) {
  }

  virtual ~TIncrement() noexcept;
  std::string row;
  std::vector<TColumnIncrement>  columns;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;
  TCellVisibility cellVisibility;
  bool returnResults;

  _TIncrement__isset __isset;

  void __set_row(const std::string& val);

  void __set_columns(const std::vector<TColumnIncrement> & val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  void __set_cellVisibility(const TCellVisibility& val);

  void __set_returnResults(const bool val);

  bool operator == (const TIncrement & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(columns == rhs.columns))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    if (__isset.cellVisibility != rhs.__isset.cellVisibility)
      return false;
    else if (__isset.cellVisibility && !(cellVisibility == rhs.cellVisibility))
      return false;
    if (__isset.returnResults != rhs.__isset.returnResults)
      return false;
    else if (__isset.returnResults && !(returnResults == rhs.returnResults))
      return false;
    return true;
  }
  bool operator != (const TIncrement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIncrement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TIncrement &a, TIncrement &b);

std::ostream& operator<<(std::ostream& out, const TIncrement& obj);

typedef struct _TAppend__isset {
  _TAppend__isset() : attributes(false), durability(false), cellVisibility(false), returnResults(false) {}
  bool attributes :1;
  bool durability :1;
  bool cellVisibility :1;
  bool returnResults :1;
} _TAppend__isset;

class TAppend : public virtual ::apache::thrift::TBase {
 public:

  TAppend(const TAppend&);
  TAppend& operator=(const TAppend&);
  TAppend() noexcept
          : row(),
            durability(static_cast<TDurability::type>(0)),
            returnResults(0) {
  }

  virtual ~TAppend() noexcept;
  std::string row;
  std::vector<TColumnValue>  columns;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;
  TCellVisibility cellVisibility;
  bool returnResults;

  _TAppend__isset __isset;

  void __set_row(const std::string& val);

  void __set_columns(const std::vector<TColumnValue> & val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  void __set_cellVisibility(const TCellVisibility& val);

  void __set_returnResults(const bool val);

  bool operator == (const TAppend & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(columns == rhs.columns))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    if (__isset.cellVisibility != rhs.__isset.cellVisibility)
      return false;
    else if (__isset.cellVisibility && !(cellVisibility == rhs.cellVisibility))
      return false;
    if (__isset.returnResults != rhs.__isset.returnResults)
      return false;
    else if (__isset.returnResults && !(returnResults == rhs.returnResults))
      return false;
    return true;
  }
  bool operator != (const TAppend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAppend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAppend &a, TAppend &b);

std::ostream& operator<<(std::ostream& out, const TAppend& obj);

typedef struct _TScan__isset {
  _TScan__isset() : startRow(false), stopRow(false), columns(false), caching(false), maxVersions(true), timeRange(false), filterString(false), batchSize(false), attributes(false), authorizations(false), reversed(false), cacheBlocks(false), colFamTimeRangeMap(false), readType(false), limit(false), consistency(false), targetReplicaId(false), filterBytes(false) {}
  bool startRow :1;
  bool stopRow :1;
  bool columns :1;
  bool caching :1;
  bool maxVersions :1;
  bool timeRange :1;
  bool filterString :1;
  bool batchSize :1;
  bool attributes :1;
  bool authorizations :1;
  bool reversed :1;
  bool cacheBlocks :1;
  bool colFamTimeRangeMap :1;
  bool readType :1;
  bool limit :1;
  bool consistency :1;
  bool targetReplicaId :1;
  bool filterBytes :1;
} _TScan__isset;

/**
 * Any timestamps in the columns are ignored but the colFamTimeRangeMap included, use timeRange to select by timestamp.
 * Max versions defaults to 1.
 */
class TScan : public virtual ::apache::thrift::TBase {
 public:

  TScan(const TScan&);
  TScan& operator=(const TScan&);
  TScan() noexcept
        : startRow(),
          stopRow(),
          caching(0),
          maxVersions(1),
          filterString(),
          batchSize(0),
          reversed(0),
          cacheBlocks(0),
          readType(static_cast<TReadType::type>(0)),
          limit(0),
          consistency(static_cast<TConsistency::type>(0)),
          targetReplicaId(0),
          filterBytes() {
  }

  virtual ~TScan() noexcept;
  std::string startRow;
  std::string stopRow;
  std::vector<TColumn>  columns;
  int32_t caching;
  int32_t maxVersions;
  TTimeRange timeRange;
  std::string filterString;
  int32_t batchSize;
  std::map<std::string, std::string>  attributes;
  TAuthorization authorizations;
  bool reversed;
  bool cacheBlocks;
  std::map<std::string, TTimeRange>  colFamTimeRangeMap;
  /**
   * 
   * @see TReadType
   */
  TReadType::type readType;
  int32_t limit;
  /**
   * 
   * @see TConsistency
   */
  TConsistency::type consistency;
  int32_t targetReplicaId;
  std::string filterBytes;

  _TScan__isset __isset;

  void __set_startRow(const std::string& val);

  void __set_stopRow(const std::string& val);

  void __set_columns(const std::vector<TColumn> & val);

  void __set_caching(const int32_t val);

  void __set_maxVersions(const int32_t val);

  void __set_timeRange(const TTimeRange& val);

  void __set_filterString(const std::string& val);

  void __set_batchSize(const int32_t val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_authorizations(const TAuthorization& val);

  void __set_reversed(const bool val);

  void __set_cacheBlocks(const bool val);

  void __set_colFamTimeRangeMap(const std::map<std::string, TTimeRange> & val);

  void __set_readType(const TReadType::type val);

  void __set_limit(const int32_t val);

  void __set_consistency(const TConsistency::type val);

  void __set_targetReplicaId(const int32_t val);

  void __set_filterBytes(const std::string& val);

  bool operator == (const TScan & rhs) const
  {
    if (__isset.startRow != rhs.__isset.startRow)
      return false;
    else if (__isset.startRow && !(startRow == rhs.startRow))
      return false;
    if (__isset.stopRow != rhs.__isset.stopRow)
      return false;
    else if (__isset.stopRow && !(stopRow == rhs.stopRow))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.caching != rhs.__isset.caching)
      return false;
    else if (__isset.caching && !(caching == rhs.caching))
      return false;
    if (__isset.maxVersions != rhs.__isset.maxVersions)
      return false;
    else if (__isset.maxVersions && !(maxVersions == rhs.maxVersions))
      return false;
    if (__isset.timeRange != rhs.__isset.timeRange)
      return false;
    else if (__isset.timeRange && !(timeRange == rhs.timeRange))
      return false;
    if (__isset.filterString != rhs.__isset.filterString)
      return false;
    else if (__isset.filterString && !(filterString == rhs.filterString))
      return false;
    if (__isset.batchSize != rhs.__isset.batchSize)
      return false;
    else if (__isset.batchSize && !(batchSize == rhs.batchSize))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.authorizations != rhs.__isset.authorizations)
      return false;
    else if (__isset.authorizations && !(authorizations == rhs.authorizations))
      return false;
    if (__isset.reversed != rhs.__isset.reversed)
      return false;
    else if (__isset.reversed && !(reversed == rhs.reversed))
      return false;
    if (__isset.cacheBlocks != rhs.__isset.cacheBlocks)
      return false;
    else if (__isset.cacheBlocks && !(cacheBlocks == rhs.cacheBlocks))
      return false;
    if (__isset.colFamTimeRangeMap != rhs.__isset.colFamTimeRangeMap)
      return false;
    else if (__isset.colFamTimeRangeMap && !(colFamTimeRangeMap == rhs.colFamTimeRangeMap))
      return false;
    if (__isset.readType != rhs.__isset.readType)
      return false;
    else if (__isset.readType && !(readType == rhs.readType))
      return false;
    if (__isset.limit != rhs.__isset.limit)
      return false;
    else if (__isset.limit && !(limit == rhs.limit))
      return false;
    if (__isset.consistency != rhs.__isset.consistency)
      return false;
    else if (__isset.consistency && !(consistency == rhs.consistency))
      return false;
    if (__isset.targetReplicaId != rhs.__isset.targetReplicaId)
      return false;
    else if (__isset.targetReplicaId && !(targetReplicaId == rhs.targetReplicaId))
      return false;
    if (__isset.filterBytes != rhs.__isset.filterBytes)
      return false;
    else if (__isset.filterBytes && !(filterBytes == rhs.filterBytes))
      return false;
    return true;
  }
  bool operator != (const TScan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TScan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TScan &a, TScan &b);

std::ostream& operator<<(std::ostream& out, const TScan& obj);

typedef struct _TMutation__isset {
  _TMutation__isset() : put(false), deleteSingle(false) {}
  bool put :1;
  bool deleteSingle :1;
} _TMutation__isset;

/**
 * Atomic mutation for the specified row. It can be either Put or Delete.
 */
class TMutation : public virtual ::apache::thrift::TBase {
 public:

  TMutation(const TMutation&);
  TMutation& operator=(const TMutation&);
  TMutation() noexcept {
  }

  virtual ~TMutation() noexcept;
  TPut put;
  TDelete deleteSingle;

  _TMutation__isset __isset;

  void __set_put(const TPut& val);

  void __set_deleteSingle(const TDelete& val);

  bool operator == (const TMutation & rhs) const
  {
    if (__isset.put != rhs.__isset.put)
      return false;
    else if (__isset.put && !(put == rhs.put))
      return false;
    if (__isset.deleteSingle != rhs.__isset.deleteSingle)
      return false;
    else if (__isset.deleteSingle && !(deleteSingle == rhs.deleteSingle))
      return false;
    return true;
  }
  bool operator != (const TMutation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMutation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMutation &a, TMutation &b);

std::ostream& operator<<(std::ostream& out, const TMutation& obj);


/**
 * A TRowMutations object is used to apply a number of Mutations to a single row.
 */
class TRowMutations : public virtual ::apache::thrift::TBase {
 public:

  TRowMutations(const TRowMutations&);
  TRowMutations& operator=(const TRowMutations&);
  TRowMutations() noexcept
                : row() {
  }

  virtual ~TRowMutations() noexcept;
  std::string row;
  std::vector<TMutation>  mutations;

  void __set_row(const std::string& val);

  void __set_mutations(const std::vector<TMutation> & val);

  bool operator == (const TRowMutations & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(mutations == rhs.mutations))
      return false;
    return true;
  }
  bool operator != (const TRowMutations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRowMutations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRowMutations &a, TRowMutations &b);

std::ostream& operator<<(std::ostream& out, const TRowMutations& obj);

typedef struct _THRegionInfo__isset {
  _THRegionInfo__isset() : startKey(false), endKey(false), offline(false), split(false), replicaId(false) {}
  bool startKey :1;
  bool endKey :1;
  bool offline :1;
  bool split :1;
  bool replicaId :1;
} _THRegionInfo__isset;

class THRegionInfo : public virtual ::apache::thrift::TBase {
 public:

  THRegionInfo(const THRegionInfo&);
  THRegionInfo& operator=(const THRegionInfo&);
  THRegionInfo() noexcept
               : regionId(0),
                 tableName(),
                 startKey(),
                 endKey(),
                 offline(0),
                 split(0),
                 replicaId(0) {
  }

  virtual ~THRegionInfo() noexcept;
  int64_t regionId;
  std::string tableName;
  std::string startKey;
  std::string endKey;
  bool offline;
  bool split;
  int32_t replicaId;

  _THRegionInfo__isset __isset;

  void __set_regionId(const int64_t val);

  void __set_tableName(const std::string& val);

  void __set_startKey(const std::string& val);

  void __set_endKey(const std::string& val);

  void __set_offline(const bool val);

  void __set_split(const bool val);

  void __set_replicaId(const int32_t val);

  bool operator == (const THRegionInfo & rhs) const
  {
    if (!(regionId == rhs.regionId))
      return false;
    if (!(tableName == rhs.tableName))
      return false;
    if (__isset.startKey != rhs.__isset.startKey)
      return false;
    else if (__isset.startKey && !(startKey == rhs.startKey))
      return false;
    if (__isset.endKey != rhs.__isset.endKey)
      return false;
    else if (__isset.endKey && !(endKey == rhs.endKey))
      return false;
    if (__isset.offline != rhs.__isset.offline)
      return false;
    else if (__isset.offline && !(offline == rhs.offline))
      return false;
    if (__isset.split != rhs.__isset.split)
      return false;
    else if (__isset.split && !(split == rhs.split))
      return false;
    if (__isset.replicaId != rhs.__isset.replicaId)
      return false;
    else if (__isset.replicaId && !(replicaId == rhs.replicaId))
      return false;
    return true;
  }
  bool operator != (const THRegionInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THRegionInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(THRegionInfo &a, THRegionInfo &b);

std::ostream& operator<<(std::ostream& out, const THRegionInfo& obj);

typedef struct _TServerName__isset {
  _TServerName__isset() : port(false), startCode(false) {}
  bool port :1;
  bool startCode :1;
} _TServerName__isset;

class TServerName : public virtual ::apache::thrift::TBase {
 public:

  TServerName(const TServerName&);
  TServerName& operator=(const TServerName&);
  TServerName() noexcept
              : hostName(),
                port(0),
                startCode(0) {
  }

  virtual ~TServerName() noexcept;
  std::string hostName;
  int32_t port;
  int64_t startCode;

  _TServerName__isset __isset;

  void __set_hostName(const std::string& val);

  void __set_port(const int32_t val);

  void __set_startCode(const int64_t val);

  bool operator == (const TServerName & rhs) const
  {
    if (!(hostName == rhs.hostName))
      return false;
    if (__isset.port != rhs.__isset.port)
      return false;
    else if (__isset.port && !(port == rhs.port))
      return false;
    if (__isset.startCode != rhs.__isset.startCode)
      return false;
    else if (__isset.startCode && !(startCode == rhs.startCode))
      return false;
    return true;
  }
  bool operator != (const TServerName &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TServerName & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TServerName &a, TServerName &b);

std::ostream& operator<<(std::ostream& out, const TServerName& obj);


class THRegionLocation : public virtual ::apache::thrift::TBase {
 public:

  THRegionLocation(const THRegionLocation&);
  THRegionLocation& operator=(const THRegionLocation&);
  THRegionLocation() noexcept {
  }

  virtual ~THRegionLocation() noexcept;
  TServerName serverName;
  THRegionInfo regionInfo;

  void __set_serverName(const TServerName& val);

  void __set_regionInfo(const THRegionInfo& val);

  bool operator == (const THRegionLocation & rhs) const
  {
    if (!(serverName == rhs.serverName))
      return false;
    if (!(regionInfo == rhs.regionInfo))
      return false;
    return true;
  }
  bool operator != (const THRegionLocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THRegionLocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(THRegionLocation &a, THRegionLocation &b);

std::ostream& operator<<(std::ostream& out, const THRegionLocation& obj);

typedef struct _TTableName__isset {
  _TTableName__isset() : ns(false) {}
  bool ns :1;
} _TTableName__isset;

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.TableName
 */
class TTableName : public virtual ::apache::thrift::TBase {
 public:

  TTableName(const TTableName&);
  TTableName& operator=(const TTableName&);
  TTableName() noexcept
             : ns(),
               qualifier() {
  }

  virtual ~TTableName() noexcept;
  /**
   * namespace name
   */
  std::string ns;
  /**
   * tablename
   */
  std::string qualifier;

  _TTableName__isset __isset;

  void __set_ns(const std::string& val);

  void __set_qualifier(const std::string& val);

  bool operator == (const TTableName & rhs) const
  {
    if (__isset.ns != rhs.__isset.ns)
      return false;
    else if (__isset.ns && !(ns == rhs.ns))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    return true;
  }
  bool operator != (const TTableName &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTableName & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTableName &a, TTableName &b);

std::ostream& operator<<(std::ostream& out, const TTableName& obj);

typedef struct _TColumnFamilyDescriptor__isset {
  _TColumnFamilyDescriptor__isset() : attributes(false), configuration(false), blockSize(false), bloomnFilterType(false), compressionType(false), dfsReplication(false), dataBlockEncoding(false), keepDeletedCells(false), maxVersions(false), minVersions(false), scope(false), timeToLive(false), blockCacheEnabled(false), cacheBloomsOnWrite(false), cacheDataOnWrite(false), cacheIndexesOnWrite(false), compressTags(false), evictBlocksOnClose(false), inMemory(false) {}
  bool attributes :1;
  bool configuration :1;
  bool blockSize :1;
  bool bloomnFilterType :1;
  bool compressionType :1;
  bool dfsReplication :1;
  bool dataBlockEncoding :1;
  bool keepDeletedCells :1;
  bool maxVersions :1;
  bool minVersions :1;
  bool scope :1;
  bool timeToLive :1;
  bool blockCacheEnabled :1;
  bool cacheBloomsOnWrite :1;
  bool cacheDataOnWrite :1;
  bool cacheIndexesOnWrite :1;
  bool compressTags :1;
  bool evictBlocksOnClose :1;
  bool inMemory :1;
} _TColumnFamilyDescriptor__isset;

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.client.ColumnFamilyDescriptor
 */
class TColumnFamilyDescriptor : public virtual ::apache::thrift::TBase {
 public:

  TColumnFamilyDescriptor(const TColumnFamilyDescriptor&);
  TColumnFamilyDescriptor& operator=(const TColumnFamilyDescriptor&);
  TColumnFamilyDescriptor() noexcept
                          : name(),
                            blockSize(0),
                            bloomnFilterType(static_cast<TBloomFilterType::type>(0)),
                            compressionType(static_cast<TCompressionAlgorithm::type>(0)),
                            dfsReplication(0),
                            dataBlockEncoding(static_cast<TDataBlockEncoding::type>(0)),
                            keepDeletedCells(static_cast<TKeepDeletedCells::type>(0)),
                            maxVersions(0),
                            minVersions(0),
                            scope(0),
                            timeToLive(0),
                            blockCacheEnabled(0),
                            cacheBloomsOnWrite(0),
                            cacheDataOnWrite(0),
                            cacheIndexesOnWrite(0),
                            compressTags(0),
                            evictBlocksOnClose(0),
                            inMemory(0) {
  }

  virtual ~TColumnFamilyDescriptor() noexcept;
  std::string name;
  std::map<std::string, std::string>  attributes;
  std::map<std::string, std::string>  configuration;
  int32_t blockSize;
  /**
   * 
   * @see TBloomFilterType
   */
  TBloomFilterType::type bloomnFilterType;
  /**
   * 
   * @see TCompressionAlgorithm
   */
  TCompressionAlgorithm::type compressionType;
  int16_t dfsReplication;
  /**
   * 
   * @see TDataBlockEncoding
   */
  TDataBlockEncoding::type dataBlockEncoding;
  /**
   * 
   * @see TKeepDeletedCells
   */
  TKeepDeletedCells::type keepDeletedCells;
  int32_t maxVersions;
  int32_t minVersions;
  int32_t scope;
  int32_t timeToLive;
  bool blockCacheEnabled;
  bool cacheBloomsOnWrite;
  bool cacheDataOnWrite;
  bool cacheIndexesOnWrite;
  bool compressTags;
  bool evictBlocksOnClose;
  bool inMemory;

  _TColumnFamilyDescriptor__isset __isset;

  void __set_name(const std::string& val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_configuration(const std::map<std::string, std::string> & val);

  void __set_blockSize(const int32_t val);

  void __set_bloomnFilterType(const TBloomFilterType::type val);

  void __set_compressionType(const TCompressionAlgorithm::type val);

  void __set_dfsReplication(const int16_t val);

  void __set_dataBlockEncoding(const TDataBlockEncoding::type val);

  void __set_keepDeletedCells(const TKeepDeletedCells::type val);

  void __set_maxVersions(const int32_t val);

  void __set_minVersions(const int32_t val);

  void __set_scope(const int32_t val);

  void __set_timeToLive(const int32_t val);

  void __set_blockCacheEnabled(const bool val);

  void __set_cacheBloomsOnWrite(const bool val);

  void __set_cacheDataOnWrite(const bool val);

  void __set_cacheIndexesOnWrite(const bool val);

  void __set_compressTags(const bool val);

  void __set_evictBlocksOnClose(const bool val);

  void __set_inMemory(const bool val);

  bool operator == (const TColumnFamilyDescriptor & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.configuration != rhs.__isset.configuration)
      return false;
    else if (__isset.configuration && !(configuration == rhs.configuration))
      return false;
    if (__isset.blockSize != rhs.__isset.blockSize)
      return false;
    else if (__isset.blockSize && !(blockSize == rhs.blockSize))
      return false;
    if (__isset.bloomnFilterType != rhs.__isset.bloomnFilterType)
      return false;
    else if (__isset.bloomnFilterType && !(bloomnFilterType == rhs.bloomnFilterType))
      return false;
    if (__isset.compressionType != rhs.__isset.compressionType)
      return false;
    else if (__isset.compressionType && !(compressionType == rhs.compressionType))
      return false;
    if (__isset.dfsReplication != rhs.__isset.dfsReplication)
      return false;
    else if (__isset.dfsReplication && !(dfsReplication == rhs.dfsReplication))
      return false;
    if (__isset.dataBlockEncoding != rhs.__isset.dataBlockEncoding)
      return false;
    else if (__isset.dataBlockEncoding && !(dataBlockEncoding == rhs.dataBlockEncoding))
      return false;
    if (__isset.keepDeletedCells != rhs.__isset.keepDeletedCells)
      return false;
    else if (__isset.keepDeletedCells && !(keepDeletedCells == rhs.keepDeletedCells))
      return false;
    if (__isset.maxVersions != rhs.__isset.maxVersions)
      return false;
    else if (__isset.maxVersions && !(maxVersions == rhs.maxVersions))
      return false;
    if (__isset.minVersions != rhs.__isset.minVersions)
      return false;
    else if (__isset.minVersions && !(minVersions == rhs.minVersions))
      return false;
    if (__isset.scope != rhs.__isset.scope)
      return false;
    else if (__isset.scope && !(scope == rhs.scope))
      return false;
    if (__isset.timeToLive != rhs.__isset.timeToLive)
      return false;
    else if (__isset.timeToLive && !(timeToLive == rhs.timeToLive))
      return false;
    if (__isset.blockCacheEnabled != rhs.__isset.blockCacheEnabled)
      return false;
    else if (__isset.blockCacheEnabled && !(blockCacheEnabled == rhs.blockCacheEnabled))
      return false;
    if (__isset.cacheBloomsOnWrite != rhs.__isset.cacheBloomsOnWrite)
      return false;
    else if (__isset.cacheBloomsOnWrite && !(cacheBloomsOnWrite == rhs.cacheBloomsOnWrite))
      return false;
    if (__isset.cacheDataOnWrite != rhs.__isset.cacheDataOnWrite)
      return false;
    else if (__isset.cacheDataOnWrite && !(cacheDataOnWrite == rhs.cacheDataOnWrite))
      return false;
    if (__isset.cacheIndexesOnWrite != rhs.__isset.cacheIndexesOnWrite)
      return false;
    else if (__isset.cacheIndexesOnWrite && !(cacheIndexesOnWrite == rhs.cacheIndexesOnWrite))
      return false;
    if (__isset.compressTags != rhs.__isset.compressTags)
      return false;
    else if (__isset.compressTags && !(compressTags == rhs.compressTags))
      return false;
    if (__isset.evictBlocksOnClose != rhs.__isset.evictBlocksOnClose)
      return false;
    else if (__isset.evictBlocksOnClose && !(evictBlocksOnClose == rhs.evictBlocksOnClose))
      return false;
    if (__isset.inMemory != rhs.__isset.inMemory)
      return false;
    else if (__isset.inMemory && !(inMemory == rhs.inMemory))
      return false;
    return true;
  }
  bool operator != (const TColumnFamilyDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnFamilyDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnFamilyDescriptor &a, TColumnFamilyDescriptor &b);

std::ostream& operator<<(std::ostream& out, const TColumnFamilyDescriptor& obj);

typedef struct _TTableDescriptor__isset {
  _TTableDescriptor__isset() : columns(false), attributes(false), durability(false) {}
  bool columns :1;
  bool attributes :1;
  bool durability :1;
} _TTableDescriptor__isset;

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.client.TableDescriptor
 */
class TTableDescriptor : public virtual ::apache::thrift::TBase {
 public:

  TTableDescriptor(const TTableDescriptor&);
  TTableDescriptor& operator=(const TTableDescriptor&);
  TTableDescriptor() noexcept
                   : durability(static_cast<TDurability::type>(0)) {
  }

  virtual ~TTableDescriptor() noexcept;
  TTableName tableName;
  std::vector<TColumnFamilyDescriptor>  columns;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;

  _TTableDescriptor__isset __isset;

  void __set_tableName(const TTableName& val);

  void __set_columns(const std::vector<TColumnFamilyDescriptor> & val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  bool operator == (const TTableDescriptor & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    return true;
  }
  bool operator != (const TTableDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTableDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTableDescriptor &a, TTableDescriptor &b);

std::ostream& operator<<(std::ostream& out, const TTableDescriptor& obj);

typedef struct _TNamespaceDescriptor__isset {
  _TNamespaceDescriptor__isset() : configuration(false) {}
  bool configuration :1;
} _TNamespaceDescriptor__isset;

/**
 * Thrift wrapper around
 * org.apache.hadoop.hbase.NamespaceDescriptor
 */
class TNamespaceDescriptor : public virtual ::apache::thrift::TBase {
 public:

  TNamespaceDescriptor(const TNamespaceDescriptor&);
  TNamespaceDescriptor& operator=(const TNamespaceDescriptor&);
  TNamespaceDescriptor() noexcept
                       : name() {
  }

  virtual ~TNamespaceDescriptor() noexcept;
  std::string name;
  std::map<std::string, std::string>  configuration;

  _TNamespaceDescriptor__isset __isset;

  void __set_name(const std::string& val);

  void __set_configuration(const std::map<std::string, std::string> & val);

  bool operator == (const TNamespaceDescriptor & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.configuration != rhs.__isset.configuration)
      return false;
    else if (__isset.configuration && !(configuration == rhs.configuration))
      return false;
    return true;
  }
  bool operator != (const TNamespaceDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TNamespaceDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TNamespaceDescriptor &a, TNamespaceDescriptor &b);

std::ostream& operator<<(std::ostream& out, const TNamespaceDescriptor& obj);

typedef struct _TIOError__isset {
  _TIOError__isset() : message(false) {}
  bool message :1;
} _TIOError__isset;

/**
 * A TIOError exception signals that an error occurred communicating
 * to the HBase master or a HBase region server. Also used to return
 * more general HBase error conditions.
 */
class TIOError : public ::apache::thrift::TException {
 public:

  TIOError(const TIOError&);
  TIOError& operator=(const TIOError&);
  TIOError() noexcept
           : message() {
  }

  virtual ~TIOError() noexcept;
  std::string message;

  _TIOError__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const TIOError & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TIOError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIOError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(TIOError &a, TIOError &b);

std::ostream& operator<<(std::ostream& out, const TIOError& obj);

typedef struct _TIllegalArgument__isset {
  _TIllegalArgument__isset() : message(false) {}
  bool message :1;
} _TIllegalArgument__isset;

/**
 * A TIllegalArgument exception indicates an illegal or invalid
 * argument was passed into a procedure.
 */
class TIllegalArgument : public ::apache::thrift::TException {
 public:

  TIllegalArgument(const TIllegalArgument&);
  TIllegalArgument& operator=(const TIllegalArgument&);
  TIllegalArgument() noexcept
                   : message() {
  }

  virtual ~TIllegalArgument() noexcept;
  std::string message;

  _TIllegalArgument__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const TIllegalArgument & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TIllegalArgument &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIllegalArgument & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(TIllegalArgument &a, TIllegalArgument &b);

std::ostream& operator<<(std::ostream& out, const TIllegalArgument& obj);

}}}} // namespace

#endif
