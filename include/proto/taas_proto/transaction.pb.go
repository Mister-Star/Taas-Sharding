// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: transaction.proto

package taas_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Result int32

const (
	Result_Fail    Result = 0
	Result_Success Result = 1
)

// Enum value maps for Result.
var (
	Result_name = map[int32]string{
		0: "Fail",
		1: "Success",
	}
	Result_value = map[string]int32{
		"Fail":    0,
		"Success": 1,
	}
)

func (x Result) Enum() *Result {
	p := new(Result)
	*p = x
	return p
}

func (x Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[0].Descriptor()
}

func (Result) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[0]
}

func (x Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Result.Descriptor instead.
func (Result) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

type TxnType int32

const (
	TxnType_ClientTxn                TxnType = 0
	TxnType_ShardedClientTxn         TxnType = 1
	TxnType_EpochShardEndFlag        TxnType = 2
	TxnType_RemoteServerTxn          TxnType = 3
	TxnType_EpochRemoteServerEndFlag TxnType = 4
	TxnType_BackUpTxn                TxnType = 5
	TxnType_EpochBackUpEndFlag       TxnType = 6
	TxnType_CommittedTxn             TxnType = 7
	TxnType_EpochCommittedTxnEndFlag TxnType = 8
	TxnType_AbortSet                 TxnType = 20
	TxnType_InsertSet                TxnType = 21
	TxnType_EpochShardACK            TxnType = 30
	TxnType_EpochRemoteServerACK     TxnType = 31
	TxnType_BackUpACK                TxnType = 32
	TxnType_AbortSetACK              TxnType = 33
	TxnType_InsertSetACK             TxnType = 34
	TxnType_EpochLogPushDownComplete TxnType = 35
	TxnType_NullMark                 TxnType = 40
	// 添加2PL状态
	TxnType_Lock_ok    TxnType = 51
	TxnType_Lock_abort TxnType = 52
	// 添加2PC状态
	TxnType_Prepare_req   TxnType = 53
	TxnType_Prepare_ok    TxnType = 54
	TxnType_Prepare_abort TxnType = 55
	TxnType_Commit_req    TxnType = 56
	TxnType_Commit_ok     TxnType = 57
	TxnType_Commit_abort  TxnType = 58
	// abort统一处理
	TxnType_Abort_txn TxnType = 59
)

// Enum value maps for TxnType.
var (
	TxnType_name = map[int32]string{
		0:  "ClientTxn",
		1:  "ShardedClientTxn",
		2:  "EpochShardEndFlag",
		3:  "RemoteServerTxn",
		4:  "EpochRemoteServerEndFlag",
		5:  "BackUpTxn",
		6:  "EpochBackUpEndFlag",
		7:  "CommittedTxn",
		8:  "EpochCommittedTxnEndFlag",
		20: "AbortSet",
		21: "InsertSet",
		30: "EpochShardACK",
		31: "EpochRemoteServerACK",
		32: "BackUpACK",
		33: "AbortSetACK",
		34: "InsertSetACK",
		35: "EpochLogPushDownComplete",
		40: "NullMark",
		51: "Lock_ok",
		52: "Lock_abort",
		53: "Prepare_req",
		54: "Prepare_ok",
		55: "Prepare_abort",
		56: "Commit_req",
		57: "Commit_ok",
		58: "Commit_abort",
		59: "Abort_txn",
	}
	TxnType_value = map[string]int32{
		"ClientTxn":                0,
		"ShardedClientTxn":         1,
		"EpochShardEndFlag":        2,
		"RemoteServerTxn":          3,
		"EpochRemoteServerEndFlag": 4,
		"BackUpTxn":                5,
		"EpochBackUpEndFlag":       6,
		"CommittedTxn":             7,
		"EpochCommittedTxnEndFlag": 8,
		"AbortSet":                 20,
		"InsertSet":                21,
		"EpochShardACK":            30,
		"EpochRemoteServerACK":     31,
		"BackUpACK":                32,
		"AbortSetACK":              33,
		"InsertSetACK":             34,
		"EpochLogPushDownComplete": 35,
		"NullMark":                 40,
		"Lock_ok":                  51,
		"Lock_abort":               52,
		"Prepare_req":              53,
		"Prepare_ok":               54,
		"Prepare_abort":            55,
		"Commit_req":               56,
		"Commit_ok":                57,
		"Commit_abort":             58,
		"Abort_txn":                59,
	}
)

func (x TxnType) Enum() *TxnType {
	p := new(TxnType)
	*p = x
	return p
}

func (x TxnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxnType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[1].Descriptor()
}

func (TxnType) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[1]
}

func (x TxnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxnType.Descriptor instead.
func (TxnType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

type TxnState int32

const (
	TxnState_Empty  TxnState = 0
	TxnState_Abort  TxnState = 1
	TxnState_Commit TxnState = 2
)

// Enum value maps for TxnState.
var (
	TxnState_name = map[int32]string{
		0: "Empty",
		1: "Abort",
		2: "Commit",
	}
	TxnState_value = map[string]int32{
		"Empty":  0,
		"Abort":  1,
		"Commit": 2,
	}
)

func (x TxnState) Enum() *TxnState {
	p := new(TxnState)
	*p = x
	return p
}

func (x TxnState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxnState) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[2].Descriptor()
}

func (TxnState) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[2]
}

func (x TxnState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxnState.Descriptor instead.
func (TxnState) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{2}
}

type OpType int32

const (
	OpType_Read   OpType = 0
	OpType_Insert OpType = 1
	OpType_Update OpType = 2
	OpType_Delete OpType = 3
)

// Enum value maps for OpType.
var (
	OpType_name = map[int32]string{
		0: "Read",
		1: "Insert",
		2: "Update",
		3: "Delete",
	}
	OpType_value = map[string]int32{
		"Read":   0,
		"Insert": 1,
		"Update": 2,
		"Delete": 3,
	}
)

func (x OpType) Enum() *OpType {
	p := new(OpType)
	*p = x
	return p
}

func (x OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[3].Descriptor()
}

func (OpType) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[3]
}

func (x OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpType.Descriptor instead.
func (OpType) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{3}
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`      // column id
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // column value/data
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Column) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Column) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType    OpType    `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=proto.OpType" json:"op_type,omitempty"`
	TableName string    `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Key       []byte    `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Data      []byte    `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Column    []*Column `protobuf:"bytes,5,rep,name=column,proto3" json:"column,omitempty"` // if needed
	Csn       uint64    `protobuf:"varint,6,opt,name=csn,proto3" json:"csn,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Row) GetOpType() OpType {
	if x != nil {
		return x.OpType
	}
	return OpType_Read
}

func (x *Row) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Row) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Row) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Row) GetColumn() []*Column {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *Row) GetCsn() uint64 {
	if x != nil {
		return x.Csn
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row             []*Row   `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"`
	StartEpoch      uint64   `protobuf:"varint,2,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	CommitEpoch     uint64   `protobuf:"varint,3,opt,name=commit_epoch,json=commitEpoch,proto3" json:"commit_epoch,omitempty"`
	Csn             uint64   `protobuf:"varint,4,opt,name=csn,proto3" json:"csn,omitempty"` //Taas
	TxnType         TxnType  `protobuf:"varint,5,opt,name=txn_type,json=txnType,proto3,enum=proto.TxnType" json:"txn_type,omitempty"`
	TxnState        TxnState `protobuf:"varint,6,opt,name=txn_state,json=txnState,proto3,enum=proto.TxnState" json:"txn_state,omitempty"`
	MessageServerId uint64   `protobuf:"varint,10,opt,name=message_server_id,json=messageServerId,proto3" json:"message_server_id,omitempty"`
	ShardId         uint64   `protobuf:"varint,11,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ShardServerId   uint64   `protobuf:"varint,12,opt,name=shard_server_id,json=shardServerId,proto3" json:"shard_server_id,omitempty"`
	TxnServerIp     string   `protobuf:"bytes,13,opt,name=txn_server_ip,json=txnServerIp,proto3" json:"txn_server_ip,omitempty"`              // used to identify which remote server sends this txn to current server
	TxnServerId     uint32   `protobuf:"varint,14,opt,name=txn_server_id,json=txnServerId,proto3" json:"txn_server_id,omitempty"`             // used to identify which remote server sends this txn to current server
	ClientIp        string   `protobuf:"bytes,15,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`                         // used to identify which client sends this txn to current server
	ClientTxnId     uint64   `protobuf:"varint,16,opt,name=client_txn_id,json=clientTxnId,proto3" json:"client_txn_id,omitempty"`             // used to identify which txn it is in client
	StorageTotalNum uint64   `protobuf:"varint,21,opt,name=storage_total_num,json=storageTotalNum,proto3" json:"storage_total_num,omitempty"` //multi-model transaction
	StorageType     string   `protobuf:"bytes,22,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`                //multi-model transaction
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetRow() []*Row {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *Transaction) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *Transaction) GetCommitEpoch() uint64 {
	if x != nil {
		return x.CommitEpoch
	}
	return 0
}

func (x *Transaction) GetCsn() uint64 {
	if x != nil {
		return x.Csn
	}
	return 0
}

func (x *Transaction) GetTxnType() TxnType {
	if x != nil {
		return x.TxnType
	}
	return TxnType_ClientTxn
}

func (x *Transaction) GetTxnState() TxnState {
	if x != nil {
		return x.TxnState
	}
	return TxnState_Empty
}

func (x *Transaction) GetMessageServerId() uint64 {
	if x != nil {
		return x.MessageServerId
	}
	return 0
}

func (x *Transaction) GetShardId() uint64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *Transaction) GetShardServerId() uint64 {
	if x != nil {
		return x.ShardServerId
	}
	return 0
}

func (x *Transaction) GetTxnServerIp() string {
	if x != nil {
		return x.TxnServerIp
	}
	return ""
}

func (x *Transaction) GetTxnServerId() uint32 {
	if x != nil {
		return x.TxnServerId
	}
	return 0
}

func (x *Transaction) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *Transaction) GetClientTxnId() uint64 {
	if x != nil {
		return x.ClientTxnId
	}
	return 0
}

func (x *Transaction) GetStorageTotalNum() uint64 {
	if x != nil {
		return x.StorageTotalNum
	}
	return 0
}

func (x *Transaction) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

var File_transaction_proto protoreflect.FileDescriptor

var file_transaction_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x26,
	0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x63, 0x73, 0x6e, 0x22, 0xa1, 0x04, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x03, 0x72,
	0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x73, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x78, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x78, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x78, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x78, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x2a, 0x88, 0x04, 0x0a, 0x07, 0x54, 0x78,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x78, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x6e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x78, 0x6e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x54, 0x78,
	0x6e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x45, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x54,
	0x78, 0x6e, 0x45, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x53, 0x68, 0x61, 0x72, 0x64, 0x41, 0x43, 0x4b, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x43, 0x4b, 0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x41,
	0x43, 0x4b, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74,
	0x41, 0x43, 0x4b, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53,
	0x65, 0x74, 0x41, 0x43, 0x4b, 0x10, 0x22, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x4c, 0x6f, 0x67, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x10, 0x23, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72,
	0x6b, 0x10, 0x28, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x6b, 0x10, 0x33,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x10, 0x34,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x10,
	0x35, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x6b, 0x10,
	0x36, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x10, 0x37, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x10, 0x38, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f,
	0x6b, 0x10, 0x39, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x10, 0x3a, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x78, 0x6e, 0x10, 0x3b, 0x2a, 0x2c, 0x0a, 0x08, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x10, 0x02, 0x2a, 0x36, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x65, 0x61, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f,
	0x74, 0x61, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_transaction_proto_rawDescOnce sync.Once
	file_transaction_proto_rawDescData = file_transaction_proto_rawDesc
)

func file_transaction_proto_rawDescGZIP() []byte {
	file_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_proto_rawDescData)
	})
	return file_transaction_proto_rawDescData
}

var file_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_transaction_proto_goTypes = []interface{}{
	(Result)(0),         // 0: proto.Result
	(TxnType)(0),        // 1: proto.TxnType
	(TxnState)(0),       // 2: proto.TxnState
	(OpType)(0),         // 3: proto.OpType
	(*Column)(nil),      // 4: proto.Column
	(*Row)(nil),         // 5: proto.Row
	(*Transaction)(nil), // 6: proto.Transaction
}
var file_transaction_proto_depIdxs = []int32{
	3, // 0: proto.Row.op_type:type_name -> proto.OpType
	4, // 1: proto.Row.column:type_name -> proto.Column
	5, // 2: proto.Transaction.row:type_name -> proto.Row
	1, // 3: proto.Transaction.txn_type:type_name -> proto.TxnType
	2, // 4: proto.Transaction.txn_state:type_name -> proto.TxnState
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_transaction_proto_init() }
func file_transaction_proto_init() {
	if File_transaction_proto != nil {
		return
	}
	file_node_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_proto_depIdxs,
		EnumInfos:         file_transaction_proto_enumTypes,
		MessageInfos:      file_transaction_proto_msgTypes,
	}.Build()
	File_transaction_proto = out.File
	file_transaction_proto_rawDesc = nil
	file_transaction_proto_goTypes = nil
	file_transaction_proto_depIdxs = nil
}
