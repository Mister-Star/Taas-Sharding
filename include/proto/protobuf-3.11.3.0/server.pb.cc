// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeServerStateRequest_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeServerStateResponse_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochReplicationAck_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardEpochRequest_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyMasterMetadata_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupMasterRequest_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LookupMasterResponse_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MasterMetadata_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ping_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pong_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftAcceptRequest_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftAcceptResponse_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftCommitRequest_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftCommitResponse_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftPropose_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsRequest_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsResponse_server_2eproto;
namespace proto {
class ReplyTransactionToClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyTransactionToClient> _instance;
} _ReplyTransactionToClient_default_instance_;
class RaftRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftRequest> _instance;
  const ::proto::Ping* ping_;
  const ::proto::Signal* signal_;
  const ::proto::LookupMasterRequest* lookup_master_;
  const ::proto::ForwardEpochRequest* forward_epoch_;
  const ::proto::EpochReplicationAck* epoch_replication_ack_;
  const ::proto::RaftPropose* raft_propose_;
  const ::proto::RaftAcceptRequest* raft_accept_;
  const ::proto::RaftCommitRequest* raft_commit_;
  const ::proto::StatsRequest* stats_;
  const ::proto::ChangeServerStateRequest* change_server_state_;
} _RaftRequest_default_instance_;
class PingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ping> _instance;
} _Ping_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signal> _instance;
} _Signal_default_instance_;
class LookupMasterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupMasterRequest> _instance;
} _LookupMasterRequest_default_instance_;
class ForwardEpochRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardEpochRequest> _instance;
} _ForwardEpochRequest_default_instance_;
class EpochReplicationAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochReplicationAck> _instance;
} _EpochReplicationAck_default_instance_;
class RaftProposeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftPropose> _instance;
} _RaftPropose_default_instance_;
class RaftAcceptRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftAcceptRequest> _instance;
} _RaftAcceptRequest_default_instance_;
class RaftCommitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftCommitRequest> _instance;
} _RaftCommitRequest_default_instance_;
class StatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatsRequest> _instance;
} _StatsRequest_default_instance_;
class ChangeServerStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeServerStateRequest> _instance;
} _ChangeServerStateRequest_default_instance_;
class RaftResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftResponse> _instance;
  const ::proto::Pong* pong_;
  const ::proto::LookupMasterResponse* lookup_master_;
  const ::proto::RaftAcceptResponse* raft_accept_;
  const ::proto::RaftCommitResponse* raft_commit_;
  const ::proto::StatsResponse* stats_;
  const ::proto::ChangeServerStateResponse* change_server_state_;
} _RaftResponse_default_instance_;
class PongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pong> _instance;
} _Pong_default_instance_;
class MasterMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterMetadata> _instance;
} _MasterMetadata_default_instance_;
class KeyMasterMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyMasterMetadata> _instance;
} _KeyMasterMetadata_default_instance_;
class LookupMasterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupMasterResponse> _instance;
} _LookupMasterResponse_default_instance_;
class RaftAcceptResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftAcceptResponse> _instance;
} _RaftAcceptResponse_default_instance_;
class RaftCommitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftCommitResponse> _instance;
} _RaftCommitResponse_default_instance_;
class StatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatsResponse> _instance;
} _StatsResponse_default_instance_;
class ChangeServerStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeServerStateResponse> _instance;
} _ChangeServerStateResponse_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_ChangeServerStateRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_ChangeServerStateRequest_default_instance_;
    new (ptr) ::proto::ChangeServerStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::ChangeServerStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeServerStateRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeServerStateRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_ChangeServerStateResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_ChangeServerStateResponse_default_instance_;
    new (ptr) ::proto::ChangeServerStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::ChangeServerStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeServerStateResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeServerStateResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_EpochReplicationAck_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_EpochReplicationAck_default_instance_;
    new (ptr) ::proto::EpochReplicationAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::EpochReplicationAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochReplicationAck_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EpochReplicationAck_server_2eproto}, {}};

static void InitDefaultsscc_info_ForwardEpochRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_ForwardEpochRequest_default_instance_;
    new (ptr) ::proto::ForwardEpochRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::ForwardEpochRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardEpochRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForwardEpochRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_KeyMasterMetadata_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_KeyMasterMetadata_default_instance_;
    new (ptr) ::proto::KeyMasterMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::KeyMasterMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyMasterMetadata_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyMasterMetadata_server_2eproto}, {
      &scc_info_MasterMetadata_server_2eproto.base,}};

static void InitDefaultsscc_info_LookupMasterRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_LookupMasterRequest_default_instance_;
    new (ptr) ::proto::LookupMasterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::LookupMasterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupMasterRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupMasterRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_LookupMasterResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_LookupMasterResponse_default_instance_;
    new (ptr) ::proto::LookupMasterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::LookupMasterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LookupMasterResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LookupMasterResponse_server_2eproto}, {
      &scc_info_KeyMasterMetadata_server_2eproto.base,}};

static void InitDefaultsscc_info_MasterMetadata_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_MasterMetadata_default_instance_;
    new (ptr) ::proto::MasterMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::MasterMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MasterMetadata_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MasterMetadata_server_2eproto}, {}};

static void InitDefaultsscc_info_Ping_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_Ping_default_instance_;
    new (ptr) ::proto::Ping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::Ping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ping_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ping_server_2eproto}, {}};

static void InitDefaultsscc_info_Pong_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_Pong_default_instance_;
    new (ptr) ::proto::Pong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::Pong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pong_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pong_server_2eproto}, {}};

static void InitDefaultsscc_info_RaftAcceptRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_RaftAcceptRequest_default_instance_;
    new (ptr) ::proto::RaftAcceptRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::RaftAcceptRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftAcceptRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RaftAcceptRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_RaftAcceptResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_RaftAcceptResponse_default_instance_;
    new (ptr) ::proto::RaftAcceptResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::RaftAcceptResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftAcceptResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RaftAcceptResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_RaftCommitRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_RaftCommitRequest_default_instance_;
    new (ptr) ::proto::RaftCommitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::RaftCommitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftCommitRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RaftCommitRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_RaftCommitResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_RaftCommitResponse_default_instance_;
    new (ptr) ::proto::RaftCommitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::RaftCommitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftCommitResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RaftCommitResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_RaftPropose_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_RaftPropose_default_instance_;
    new (ptr) ::proto::RaftPropose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::RaftPropose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaftPropose_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RaftPropose_server_2eproto}, {}};

static void InitDefaultsscc_info_RaftRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_RaftRequest_default_instance_;
    new (ptr) ::proto::RaftRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::RaftRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_RaftRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_RaftRequest_server_2eproto}, {
      &scc_info_Ping_server_2eproto.base,
      &scc_info_Signal_server_2eproto.base,
      &scc_info_LookupMasterRequest_server_2eproto.base,
      &scc_info_ForwardEpochRequest_server_2eproto.base,
      &scc_info_EpochReplicationAck_server_2eproto.base,
      &scc_info_RaftPropose_server_2eproto.base,
      &scc_info_RaftAcceptRequest_server_2eproto.base,
      &scc_info_RaftCommitRequest_server_2eproto.base,
      &scc_info_StatsRequest_server_2eproto.base,
      &scc_info_ChangeServerStateRequest_server_2eproto.base,}};

static void InitDefaultsscc_info_RaftResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_RaftResponse_default_instance_;
    new (ptr) ::proto::RaftResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::RaftResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RaftResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_RaftResponse_server_2eproto}, {
      &scc_info_Pong_server_2eproto.base,
      &scc_info_LookupMasterResponse_server_2eproto.base,
      &scc_info_RaftAcceptResponse_server_2eproto.base,
      &scc_info_RaftCommitResponse_server_2eproto.base,
      &scc_info_StatsResponse_server_2eproto.base,
      &scc_info_ChangeServerStateResponse_server_2eproto.base,}};

static void InitDefaultsscc_info_ReplyTransactionToClient_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_ReplyTransactionToClient_default_instance_;
    new (ptr) ::proto::ReplyTransactionToClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::ReplyTransactionToClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyTransactionToClient_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyTransactionToClient_server_2eproto}, {
      &scc_info_Node_node_2eproto.base,}};

static void InitDefaultsscc_info_Signal_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_Signal_default_instance_;
    new (ptr) ::proto::Signal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::Signal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signal_server_2eproto}, {}};

static void InitDefaultsscc_info_StatsRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_StatsRequest_default_instance_;
    new (ptr) ::proto::StatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::StatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatsRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_StatsResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_StatsResponse_default_instance_;
    new (ptr) ::proto::StatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::StatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatsResponse_server_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_server_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, client_txn_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, txn_state_),
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, send_node_),
  PROTOBUF_FIELD_OFFSET(::proto::ReplyTransactionToClient, recv_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::RaftRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::proto::RaftRequestDefaultTypeInternal, ping_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, signal_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, lookup_master_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, forward_epoch_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, epoch_replication_ack_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, raft_propose_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, raft_accept_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, raft_commit_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, stats_),
  offsetof(::proto::RaftRequestDefaultTypeInternal, change_server_state_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::Ping, from_),
  PROTOBUF_FIELD_OFFSET(::proto::Ping, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::Signal, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterRequest, txn_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ForwardEpochRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::ForwardEpochRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::ForwardEpochRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::ForwardEpochRequest, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::EpochReplicationAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::EpochReplicationAck, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftPropose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::RaftPropose, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptRequest, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitRequest, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::StatsRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::StatsRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::StatsRequest, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, from_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, to_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, target_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, state_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, pull_server_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateRequest, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::RaftResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::proto::RaftResponseDefaultTypeInternal, pong_),
  offsetof(::proto::RaftResponseDefaultTypeInternal, lookup_master_),
  offsetof(::proto::RaftResponseDefaultTypeInternal, raft_accept_),
  offsetof(::proto::RaftResponseDefaultTypeInternal, raft_commit_),
  offsetof(::proto::RaftResponseDefaultTypeInternal, stats_),
  offsetof(::proto::RaftResponseDefaultTypeInternal, change_server_state_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftResponse, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::Pong, from_),
  PROTOBUF_FIELD_OFFSET(::proto::Pong, to_),
  PROTOBUF_FIELD_OFFSET(::proto::Pong, time_),
  PROTOBUF_FIELD_OFFSET(::proto::Pong, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MasterMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::MasterMetadata, master_),
  PROTOBUF_FIELD_OFFSET(::proto::MasterMetadata, epoch_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::KeyMasterMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::KeyMasterMetadata, key_),
  PROTOBUF_FIELD_OFFSET(::proto::KeyMasterMetadata, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::LookupMasterResponse, lookup_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, from_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, to_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftAcceptResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, from_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, to_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::RaftCommitResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::StatsResponse, from_),
  PROTOBUF_FIELD_OFFSET(::proto::StatsResponse, to_),
  PROTOBUF_FIELD_OFFSET(::proto::StatsResponse, epoch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, from_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, to_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, target_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::ChangeServerStateResponse, state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::ReplyTransactionToClient)},
  { 9, -1, sizeof(::proto::RaftRequest)},
  { 25, -1, sizeof(::proto::Ping)},
  { 32, -1, sizeof(::proto::Signal)},
  { 38, -1, sizeof(::proto::LookupMasterRequest)},
  { 45, -1, sizeof(::proto::ForwardEpochRequest)},
  { 53, -1, sizeof(::proto::EpochReplicationAck)},
  { 59, -1, sizeof(::proto::RaftPropose)},
  { 65, -1, sizeof(::proto::RaftAcceptRequest)},
  { 73, -1, sizeof(::proto::RaftCommitRequest)},
  { 81, -1, sizeof(::proto::StatsRequest)},
  { 89, -1, sizeof(::proto::ChangeServerStateRequest)},
  { 100, -1, sizeof(::proto::RaftResponse)},
  { 112, -1, sizeof(::proto::Pong)},
  { 121, -1, sizeof(::proto::MasterMetadata)},
  { 128, -1, sizeof(::proto::KeyMasterMetadata)},
  { 135, -1, sizeof(::proto::LookupMasterResponse)},
  { 142, -1, sizeof(::proto::RaftAcceptResponse)},
  { 151, -1, sizeof(::proto::RaftCommitResponse)},
  { 160, -1, sizeof(::proto::StatsResponse)},
  { 168, -1, sizeof(::proto::ChangeServerStateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ReplyTransactionToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_RaftRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Signal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_LookupMasterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ForwardEpochRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_EpochReplicationAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_RaftPropose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_RaftAcceptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_RaftCommitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_StatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ChangeServerStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_RaftResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_MasterMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_KeyMasterMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_LookupMasterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_RaftAcceptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_RaftCommitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_StatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ChangeServerStateResponse_default_instance_),
};

const char descriptor_table_protodef_server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014server.proto\022\005proto\032\021transaction.proto"
  "\032\nnode.proto\"\225\001\n\030ReplyTransactionToClien"
  "t\022\025\n\rclient_txn_id\030\001 \001(\004\022\"\n\ttxn_state\030\002 "
  "\001(\0162\017.proto.TxnState\022\036\n\tsend_node\030\003 \001(\0132"
  "\013.proto.Node\022\036\n\trecv_node\030\004 \001(\0132\013.proto."
  "Node\"\356\003\n\013RaftRequest\022\033\n\004ping\030\001 \001(\0132\013.pro"
  "to.PingH\000\022\037\n\006signal\030\002 \001(\0132\r.proto.Signal"
  "H\000\0223\n\rlookup_master\030\003 \001(\0132\032.proto.Lookup"
  "MasterRequestH\000\0223\n\rforward_epoch\030\004 \001(\0132\032"
  ".proto.ForwardEpochRequestH\000\022;\n\025epoch_re"
  "plication_ack\030\005 \001(\0132\032.proto.EpochReplica"
  "tionAckH\000\022*\n\014raft_propose\030\006 \001(\0132\022.proto."
  "RaftProposeH\000\022/\n\013raft_accept\030\007 \001(\0132\030.pro"
  "to.RaftAcceptRequestH\000\022/\n\013raft_commit\030\010 "
  "\001(\0132\030.proto.RaftCommitRequestH\000\022$\n\005stats"
  "\030\t \001(\0132\023.proto.StatsRequestH\000\022>\n\023change_"
  "server_state\030\n \001(\0132\037.proto.ChangeServerS"
  "tateRequestH\000B\006\n\004type\" \n\004Ping\022\014\n\004from\030\001 "
  "\001(\005\022\n\n\002to\030\002 \001(\005\"\026\n\006Signal\022\014\n\004from\030\001 \001(\005\""
  "4\n\023LookupMasterRequest\022\017\n\007txn_ids\030\001 \003(\004\022"
  "\014\n\004keys\030\002 \003(\014\"A\n\023ForwardEpochRequest\022\014\n\004"
  "from\030\001 \001(\005\022\n\n\002to\030\002 \001(\005\022\020\n\010epoch_id\030\003 \001(\004"
  "\"\'\n\023EpochReplicationAck\022\020\n\010epoch_id\030\001 \001("
  "\004\"\034\n\013RaftPropose\022\r\n\005value\030\001 \001(\004\"\?\n\021RaftA"
  "cceptRequest\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\020"
  "\n\010epoch_id\030\003 \001(\004\"\?\n\021RaftCommitRequest\022\014\n"
  "\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\020\n\010epoch_id\030\003 \001("
  "\004\"7\n\014StatsRequest\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 "
  "\001(\r\022\r\n\005level\030\003 \001(\r\"}\n\030ChangeServerStateR"
  "equest\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\016\n\006targ"
  "et\030\003 \001(\r\022\r\n\005state\030\004 \001(\r\022\026\n\016pull_server_i"
  "d\030\005 \001(\r\022\020\n\010epoch_id\030\006 \001(\004\"\265\002\n\014RaftRespon"
  "se\022\033\n\004pong\030\001 \001(\0132\013.proto.PongH\000\0224\n\rlooku"
  "p_master\030\002 \001(\0132\033.proto.LookupMasterRespo"
  "nseH\000\0220\n\013raft_accept\030\003 \001(\0132\031.proto.RaftA"
  "cceptResponseH\000\0220\n\013raft_commit\030\004 \001(\0132\031.p"
  "roto.RaftCommitResponseH\000\022%\n\005stats\030\005 \001(\013"
  "2\024.proto.StatsResponseH\000\022\?\n\023change_serve"
  "r_state\030\006 \001(\0132 .proto.ChangeServerStateR"
  "esponseH\000B\006\n\004type\"@\n\004Pong\022\014\n\004from\030\001 \001(\005\022"
  "\n\n\002to\030\002 \001(\005\022\014\n\004time\030\003 \001(\003\022\020\n\010epoch_id\030\004 "
  "\001(\003\"5\n\016MasterMetadata\022\016\n\006master\030\001 \001(\r\022\023\n"
  "\013epoch_count\030\002 \001(\r\"I\n\021KeyMasterMetadata\022"
  "\013\n\003key\030\001 \001(\014\022\'\n\010metadata\030\002 \001(\0132\025.proto.M"
  "asterMetadata\"Z\n\024LookupMasterResponse\022\020\n"
  "\010epoch_id\030\001 \003(\004\0220\n\016lookup_results\030\002 \003(\0132"
  "\030.proto.KeyMasterMetadata\"P\n\022RaftAcceptR"
  "esponse\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\020\n\010epo"
  "ch_id\030\003 \001(\004\022\016\n\006result\030\004 \001(\r\"P\n\022RaftCommi"
  "tResponse\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\020\n\010e"
  "poch_id\030\003 \001(\004\022\016\n\006result\030\004 \001(\r\";\n\rStatsRe"
  "sponse\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\004\022\020\n\010epoc"
  "h_id\030\003 \001(\004\"f\n\031ChangeServerStateResponse\022"
  "\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\016\n\006target\030\003 \001("
  "\r\022\020\n\010epoch_id\030\004 \001(\004\022\r\n\005state\030\005 \001(\rB\016Z\014./"
  "taas_protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2eproto_deps[2] = {
  &::descriptor_table_node_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_2eproto_sccs[21] = {
  &scc_info_ChangeServerStateRequest_server_2eproto.base,
  &scc_info_ChangeServerStateResponse_server_2eproto.base,
  &scc_info_EpochReplicationAck_server_2eproto.base,
  &scc_info_ForwardEpochRequest_server_2eproto.base,
  &scc_info_KeyMasterMetadata_server_2eproto.base,
  &scc_info_LookupMasterRequest_server_2eproto.base,
  &scc_info_LookupMasterResponse_server_2eproto.base,
  &scc_info_MasterMetadata_server_2eproto.base,
  &scc_info_Ping_server_2eproto.base,
  &scc_info_Pong_server_2eproto.base,
  &scc_info_RaftAcceptRequest_server_2eproto.base,
  &scc_info_RaftAcceptResponse_server_2eproto.base,
  &scc_info_RaftCommitRequest_server_2eproto.base,
  &scc_info_RaftCommitResponse_server_2eproto.base,
  &scc_info_RaftPropose_server_2eproto.base,
  &scc_info_RaftRequest_server_2eproto.base,
  &scc_info_RaftResponse_server_2eproto.base,
  &scc_info_ReplyTransactionToClient_server_2eproto.base,
  &scc_info_Signal_server_2eproto.base,
  &scc_info_StatsRequest_server_2eproto.base,
  &scc_info_StatsResponse_server_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2eproto_once;
static bool descriptor_table_server_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto = {
  &descriptor_table_server_2eproto_initialized, descriptor_table_protodef_server_2eproto, "server.proto", 2218,
  &descriptor_table_server_2eproto_once, descriptor_table_server_2eproto_sccs, descriptor_table_server_2eproto_deps, 21, 2,
  schemas, file_default_instances, TableStruct_server_2eproto::offsets,
  file_level_metadata_server_2eproto, 21, file_level_enum_descriptors_server_2eproto, file_level_service_descriptors_server_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_2eproto), true);
namespace proto {

// ===================================================================

void ReplyTransactionToClient::InitAsDefaultInstance() {
  ::proto::_ReplyTransactionToClient_default_instance_._instance.get_mutable()->send_node_ = const_cast< ::proto::Node*>(
      ::proto::Node::internal_default_instance());
  ::proto::_ReplyTransactionToClient_default_instance_._instance.get_mutable()->recv_node_ = const_cast< ::proto::Node*>(
      ::proto::Node::internal_default_instance());
}
class ReplyTransactionToClient::_Internal {
 public:
  static const ::proto::Node& send_node(const ReplyTransactionToClient* msg);
  static const ::proto::Node& recv_node(const ReplyTransactionToClient* msg);
};

const ::proto::Node&
ReplyTransactionToClient::_Internal::send_node(const ReplyTransactionToClient* msg) {
  return *msg->send_node_;
}
const ::proto::Node&
ReplyTransactionToClient::_Internal::recv_node(const ReplyTransactionToClient* msg) {
  return *msg->recv_node_;
}
void ReplyTransactionToClient::clear_send_node() {
  if (GetArenaNoVirtual() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
}
void ReplyTransactionToClient::clear_recv_node() {
  if (GetArenaNoVirtual() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
}
ReplyTransactionToClient::ReplyTransactionToClient()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ReplyTransactionToClient)
}
ReplyTransactionToClient::ReplyTransactionToClient(const ReplyTransactionToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_send_node()) {
    send_node_ = new ::proto::Node(*from.send_node_);
  } else {
    send_node_ = nullptr;
  }
  if (from._internal_has_recv_node()) {
    recv_node_ = new ::proto::Node(*from.recv_node_);
  } else {
    recv_node_ = nullptr;
  }
  ::memcpy(&client_txn_id_, &from.client_txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&txn_state_) -
    reinterpret_cast<char*>(&client_txn_id_)) + sizeof(txn_state_));
  // @@protoc_insertion_point(copy_constructor:proto.ReplyTransactionToClient)
}

void ReplyTransactionToClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyTransactionToClient_server_2eproto.base);
  ::memset(&send_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txn_state_) -
      reinterpret_cast<char*>(&send_node_)) + sizeof(txn_state_));
}

ReplyTransactionToClient::~ReplyTransactionToClient() {
  // @@protoc_insertion_point(destructor:proto.ReplyTransactionToClient)
  SharedDtor();
}

void ReplyTransactionToClient::SharedDtor() {
  if (this != internal_default_instance()) delete send_node_;
  if (this != internal_default_instance()) delete recv_node_;
}

void ReplyTransactionToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyTransactionToClient& ReplyTransactionToClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyTransactionToClient_server_2eproto.base);
  return *internal_default_instance();
}


void ReplyTransactionToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ReplyTransactionToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
  ::memset(&client_txn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txn_state_) -
      reinterpret_cast<char*>(&client_txn_id_)) + sizeof(txn_state_));
  _internal_metadata_.Clear();
}

const char* ReplyTransactionToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 client_txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.TxnState txn_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_txn_state(static_cast<::proto::TxnState>(val));
        } else goto handle_unusual;
        continue;
      // .proto.Node send_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.Node recv_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_recv_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyTransactionToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ReplyTransactionToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_txn_id = 1;
  if (this->client_txn_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_txn_id(), target);
  }

  // .proto.TxnState txn_state = 2;
  if (this->txn_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_txn_state(), target);
  }

  // .proto.Node send_node = 3;
  if (this->has_send_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::send_node(this), target, stream);
  }

  // .proto.Node recv_node = 4;
  if (this->has_recv_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::recv_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ReplyTransactionToClient)
  return target;
}

size_t ReplyTransactionToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ReplyTransactionToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Node send_node = 3;
  if (this->has_send_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_node_);
  }

  // .proto.Node recv_node = 4;
  if (this->has_recv_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recv_node_);
  }

  // uint64 client_txn_id = 1;
  if (this->client_txn_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_client_txn_id());
  }

  // .proto.TxnState txn_state = 2;
  if (this->txn_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_txn_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyTransactionToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ReplyTransactionToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyTransactionToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyTransactionToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ReplyTransactionToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ReplyTransactionToClient)
    MergeFrom(*source);
  }
}

void ReplyTransactionToClient::MergeFrom(const ReplyTransactionToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ReplyTransactionToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_send_node()) {
    _internal_mutable_send_node()->::proto::Node::MergeFrom(from._internal_send_node());
  }
  if (from.has_recv_node()) {
    _internal_mutable_recv_node()->::proto::Node::MergeFrom(from._internal_recv_node());
  }
  if (from.client_txn_id() != 0) {
    _internal_set_client_txn_id(from._internal_client_txn_id());
  }
  if (from.txn_state() != 0) {
    _internal_set_txn_state(from._internal_txn_state());
  }
}

void ReplyTransactionToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ReplyTransactionToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyTransactionToClient::CopyFrom(const ReplyTransactionToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ReplyTransactionToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyTransactionToClient::IsInitialized() const {
  return true;
}

void ReplyTransactionToClient::InternalSwap(ReplyTransactionToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(send_node_, other->send_node_);
  swap(recv_node_, other->recv_node_);
  swap(client_txn_id_, other->client_txn_id_);
  swap(txn_state_, other->txn_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyTransactionToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftRequest::InitAsDefaultInstance() {
  ::proto::_RaftRequest_default_instance_.ping_ = const_cast< ::proto::Ping*>(
      ::proto::Ping::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.signal_ = const_cast< ::proto::Signal*>(
      ::proto::Signal::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.lookup_master_ = const_cast< ::proto::LookupMasterRequest*>(
      ::proto::LookupMasterRequest::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.forward_epoch_ = const_cast< ::proto::ForwardEpochRequest*>(
      ::proto::ForwardEpochRequest::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.epoch_replication_ack_ = const_cast< ::proto::EpochReplicationAck*>(
      ::proto::EpochReplicationAck::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.raft_propose_ = const_cast< ::proto::RaftPropose*>(
      ::proto::RaftPropose::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.raft_accept_ = const_cast< ::proto::RaftAcceptRequest*>(
      ::proto::RaftAcceptRequest::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.raft_commit_ = const_cast< ::proto::RaftCommitRequest*>(
      ::proto::RaftCommitRequest::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.stats_ = const_cast< ::proto::StatsRequest*>(
      ::proto::StatsRequest::internal_default_instance());
  ::proto::_RaftRequest_default_instance_.change_server_state_ = const_cast< ::proto::ChangeServerStateRequest*>(
      ::proto::ChangeServerStateRequest::internal_default_instance());
}
class RaftRequest::_Internal {
 public:
  static const ::proto::Ping& ping(const RaftRequest* msg);
  static const ::proto::Signal& signal(const RaftRequest* msg);
  static const ::proto::LookupMasterRequest& lookup_master(const RaftRequest* msg);
  static const ::proto::ForwardEpochRequest& forward_epoch(const RaftRequest* msg);
  static const ::proto::EpochReplicationAck& epoch_replication_ack(const RaftRequest* msg);
  static const ::proto::RaftPropose& raft_propose(const RaftRequest* msg);
  static const ::proto::RaftAcceptRequest& raft_accept(const RaftRequest* msg);
  static const ::proto::RaftCommitRequest& raft_commit(const RaftRequest* msg);
  static const ::proto::StatsRequest& stats(const RaftRequest* msg);
  static const ::proto::ChangeServerStateRequest& change_server_state(const RaftRequest* msg);
};

const ::proto::Ping&
RaftRequest::_Internal::ping(const RaftRequest* msg) {
  return *msg->type_.ping_;
}
const ::proto::Signal&
RaftRequest::_Internal::signal(const RaftRequest* msg) {
  return *msg->type_.signal_;
}
const ::proto::LookupMasterRequest&
RaftRequest::_Internal::lookup_master(const RaftRequest* msg) {
  return *msg->type_.lookup_master_;
}
const ::proto::ForwardEpochRequest&
RaftRequest::_Internal::forward_epoch(const RaftRequest* msg) {
  return *msg->type_.forward_epoch_;
}
const ::proto::EpochReplicationAck&
RaftRequest::_Internal::epoch_replication_ack(const RaftRequest* msg) {
  return *msg->type_.epoch_replication_ack_;
}
const ::proto::RaftPropose&
RaftRequest::_Internal::raft_propose(const RaftRequest* msg) {
  return *msg->type_.raft_propose_;
}
const ::proto::RaftAcceptRequest&
RaftRequest::_Internal::raft_accept(const RaftRequest* msg) {
  return *msg->type_.raft_accept_;
}
const ::proto::RaftCommitRequest&
RaftRequest::_Internal::raft_commit(const RaftRequest* msg) {
  return *msg->type_.raft_commit_;
}
const ::proto::StatsRequest&
RaftRequest::_Internal::stats(const RaftRequest* msg) {
  return *msg->type_.stats_;
}
const ::proto::ChangeServerStateRequest&
RaftRequest::_Internal::change_server_state(const RaftRequest* msg) {
  return *msg->type_.change_server_state_;
}
void RaftRequest::set_allocated_ping(::proto::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    type_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.ping)
}
void RaftRequest::set_allocated_signal(::proto::Signal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    set_has_signal();
    type_.signal_ = signal;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.signal)
}
void RaftRequest::set_allocated_lookup_master(::proto::LookupMasterRequest* lookup_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (lookup_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lookup_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_master, submessage_arena);
    }
    set_has_lookup_master();
    type_.lookup_master_ = lookup_master;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.lookup_master)
}
void RaftRequest::set_allocated_forward_epoch(::proto::ForwardEpochRequest* forward_epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (forward_epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forward_epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_epoch, submessage_arena);
    }
    set_has_forward_epoch();
    type_.forward_epoch_ = forward_epoch;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.forward_epoch)
}
void RaftRequest::set_allocated_epoch_replication_ack(::proto::EpochReplicationAck* epoch_replication_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (epoch_replication_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      epoch_replication_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_replication_ack, submessage_arena);
    }
    set_has_epoch_replication_ack();
    type_.epoch_replication_ack_ = epoch_replication_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.epoch_replication_ack)
}
void RaftRequest::set_allocated_raft_propose(::proto::RaftPropose* raft_propose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (raft_propose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raft_propose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_propose, submessage_arena);
    }
    set_has_raft_propose();
    type_.raft_propose_ = raft_propose;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.raft_propose)
}
void RaftRequest::set_allocated_raft_accept(::proto::RaftAcceptRequest* raft_accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (raft_accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raft_accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_accept, submessage_arena);
    }
    set_has_raft_accept();
    type_.raft_accept_ = raft_accept;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.raft_accept)
}
void RaftRequest::set_allocated_raft_commit(::proto::RaftCommitRequest* raft_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (raft_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raft_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_commit, submessage_arena);
    }
    set_has_raft_commit();
    type_.raft_commit_ = raft_commit;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.raft_commit)
}
void RaftRequest::set_allocated_stats(::proto::StatsRequest* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    set_has_stats();
    type_.stats_ = stats;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.stats)
}
void RaftRequest::set_allocated_change_server_state(::proto::ChangeServerStateRequest* change_server_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (change_server_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_server_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_server_state, submessage_arena);
    }
    set_has_change_server_state();
    type_.change_server_state_ = change_server_state;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftRequest.change_server_state)
}
RaftRequest::RaftRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RaftRequest)
}
RaftRequest::RaftRequest(const RaftRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kPing: {
      _internal_mutable_ping()->::proto::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kSignal: {
      _internal_mutable_signal()->::proto::Signal::MergeFrom(from._internal_signal());
      break;
    }
    case kLookupMaster: {
      _internal_mutable_lookup_master()->::proto::LookupMasterRequest::MergeFrom(from._internal_lookup_master());
      break;
    }
    case kForwardEpoch: {
      _internal_mutable_forward_epoch()->::proto::ForwardEpochRequest::MergeFrom(from._internal_forward_epoch());
      break;
    }
    case kEpochReplicationAck: {
      _internal_mutable_epoch_replication_ack()->::proto::EpochReplicationAck::MergeFrom(from._internal_epoch_replication_ack());
      break;
    }
    case kRaftPropose: {
      _internal_mutable_raft_propose()->::proto::RaftPropose::MergeFrom(from._internal_raft_propose());
      break;
    }
    case kRaftAccept: {
      _internal_mutable_raft_accept()->::proto::RaftAcceptRequest::MergeFrom(from._internal_raft_accept());
      break;
    }
    case kRaftCommit: {
      _internal_mutable_raft_commit()->::proto::RaftCommitRequest::MergeFrom(from._internal_raft_commit());
      break;
    }
    case kStats: {
      _internal_mutable_stats()->::proto::StatsRequest::MergeFrom(from._internal_stats());
      break;
    }
    case kChangeServerState: {
      _internal_mutable_change_server_state()->::proto::ChangeServerStateRequest::MergeFrom(from._internal_change_server_state());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.RaftRequest)
}

void RaftRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RaftRequest_server_2eproto.base);
  clear_has_type();
}

RaftRequest::~RaftRequest() {
  // @@protoc_insertion_point(destructor:proto.RaftRequest)
  SharedDtor();
}

void RaftRequest::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void RaftRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftRequest& RaftRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftRequest_server_2eproto.base);
  return *internal_default_instance();
}


void RaftRequest::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.RaftRequest)
  switch (type_case()) {
    case kPing: {
      delete type_.ping_;
      break;
    }
    case kSignal: {
      delete type_.signal_;
      break;
    }
    case kLookupMaster: {
      delete type_.lookup_master_;
      break;
    }
    case kForwardEpoch: {
      delete type_.forward_epoch_;
      break;
    }
    case kEpochReplicationAck: {
      delete type_.epoch_replication_ack_;
      break;
    }
    case kRaftPropose: {
      delete type_.raft_propose_;
      break;
    }
    case kRaftAccept: {
      delete type_.raft_accept_;
      break;
    }
    case kRaftCommit: {
      delete type_.raft_commit_;
      break;
    }
    case kStats: {
      delete type_.stats_;
      break;
    }
    case kChangeServerState: {
      delete type_.change_server_state_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RaftRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

const char* RaftRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.Ping ping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.Signal signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.LookupMasterRequest lookup_master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.ForwardEpochRequest forward_epoch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_epoch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.EpochReplicationAck epoch_replication_ack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_replication_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.RaftPropose raft_propose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_propose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.RaftAcceptRequest raft_accept = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_accept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.RaftCommitRequest raft_commit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.StatsRequest stats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.ChangeServerStateRequest change_server_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_server_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Ping ping = 1;
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ping(this), target, stream);
  }

  // .proto.Signal signal = 2;
  if (_internal_has_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal(this), target, stream);
  }

  // .proto.LookupMasterRequest lookup_master = 3;
  if (_internal_has_lookup_master()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lookup_master(this), target, stream);
  }

  // .proto.ForwardEpochRequest forward_epoch = 4;
  if (_internal_has_forward_epoch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::forward_epoch(this), target, stream);
  }

  // .proto.EpochReplicationAck epoch_replication_ack = 5;
  if (_internal_has_epoch_replication_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::epoch_replication_ack(this), target, stream);
  }

  // .proto.RaftPropose raft_propose = 6;
  if (_internal_has_raft_propose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::raft_propose(this), target, stream);
  }

  // .proto.RaftAcceptRequest raft_accept = 7;
  if (_internal_has_raft_accept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::raft_accept(this), target, stream);
  }

  // .proto.RaftCommitRequest raft_commit = 8;
  if (_internal_has_raft_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::raft_commit(this), target, stream);
  }

  // .proto.StatsRequest stats = 9;
  if (_internal_has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stats(this), target, stream);
  }

  // .proto.ChangeServerStateRequest change_server_state = 10;
  if (_internal_has_change_server_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::change_server_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftRequest)
  return target;
}

size_t RaftRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .proto.Ping ping = 1;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.ping_);
      break;
    }
    // .proto.Signal signal = 2;
    case kSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.signal_);
      break;
    }
    // .proto.LookupMasterRequest lookup_master = 3;
    case kLookupMaster: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.lookup_master_);
      break;
    }
    // .proto.ForwardEpochRequest forward_epoch = 4;
    case kForwardEpoch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.forward_epoch_);
      break;
    }
    // .proto.EpochReplicationAck epoch_replication_ack = 5;
    case kEpochReplicationAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.epoch_replication_ack_);
      break;
    }
    // .proto.RaftPropose raft_propose = 6;
    case kRaftPropose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_propose_);
      break;
    }
    // .proto.RaftAcceptRequest raft_accept = 7;
    case kRaftAccept: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_accept_);
      break;
    }
    // .proto.RaftCommitRequest raft_commit = 8;
    case kRaftCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_commit_);
      break;
    }
    // .proto.StatsRequest stats = 9;
    case kStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.stats_);
      break;
    }
    // .proto.ChangeServerStateRequest change_server_state = 10;
    case kChangeServerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.change_server_state_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RaftRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RaftRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RaftRequest)
    MergeFrom(*source);
  }
}

void RaftRequest::MergeFrom(const RaftRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kPing: {
      _internal_mutable_ping()->::proto::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kSignal: {
      _internal_mutable_signal()->::proto::Signal::MergeFrom(from._internal_signal());
      break;
    }
    case kLookupMaster: {
      _internal_mutable_lookup_master()->::proto::LookupMasterRequest::MergeFrom(from._internal_lookup_master());
      break;
    }
    case kForwardEpoch: {
      _internal_mutable_forward_epoch()->::proto::ForwardEpochRequest::MergeFrom(from._internal_forward_epoch());
      break;
    }
    case kEpochReplicationAck: {
      _internal_mutable_epoch_replication_ack()->::proto::EpochReplicationAck::MergeFrom(from._internal_epoch_replication_ack());
      break;
    }
    case kRaftPropose: {
      _internal_mutable_raft_propose()->::proto::RaftPropose::MergeFrom(from._internal_raft_propose());
      break;
    }
    case kRaftAccept: {
      _internal_mutable_raft_accept()->::proto::RaftAcceptRequest::MergeFrom(from._internal_raft_accept());
      break;
    }
    case kRaftCommit: {
      _internal_mutable_raft_commit()->::proto::RaftCommitRequest::MergeFrom(from._internal_raft_commit());
      break;
    }
    case kStats: {
      _internal_mutable_stats()->::proto::StatsRequest::MergeFrom(from._internal_stats());
      break;
    }
    case kChangeServerState: {
      _internal_mutable_change_server_state()->::proto::ChangeServerStateRequest::MergeFrom(from._internal_change_server_state());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void RaftRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RaftRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftRequest::CopyFrom(const RaftRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftRequest::IsInitialized() const {
  return true;
}

void RaftRequest::InternalSwap(RaftRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ping::InitAsDefaultInstance() {
}
class Ping::_Internal {
 public:
};

Ping::Ping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:proto.Ping)
}

void Ping::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:proto.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
}

void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ping& Ping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ping_server_2eproto.base);
  return *internal_default_instance();
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear();
}

const char* Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void Ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
}
class Signal::_Internal {
 public:
};

Signal::Signal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_ = from.from_;
  // @@protoc_insertion_point(copy_constructor:proto.Signal)
}

void Signal::SharedCtor() {
  from_ = 0;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:proto.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal& Signal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signal_server_2eproto.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_ = 0;
  _internal_metadata_.Clear();
}

const char* Signal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Signal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Signal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
}

void Signal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LookupMasterRequest::InitAsDefaultInstance() {
}
class LookupMasterRequest::_Internal {
 public:
};

LookupMasterRequest::LookupMasterRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LookupMasterRequest)
}
LookupMasterRequest::LookupMasterRequest(const LookupMasterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      txn_ids_(from.txn_ids_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.LookupMasterRequest)
}

void LookupMasterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupMasterRequest_server_2eproto.base);
}

LookupMasterRequest::~LookupMasterRequest() {
  // @@protoc_insertion_point(destructor:proto.LookupMasterRequest)
  SharedDtor();
}

void LookupMasterRequest::SharedDtor() {
}

void LookupMasterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupMasterRequest& LookupMasterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupMasterRequest_server_2eproto.base);
  return *internal_default_instance();
}


void LookupMasterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LookupMasterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_ids_.Clear();
  keys_.Clear();
  _internal_metadata_.Clear();
}

const char* LookupMasterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 txn_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_txn_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_txn_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupMasterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LookupMasterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 txn_ids = 1;
  {
    int byte_size = _txn_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_txn_ids(), byte_size, target);
    }
  }

  // repeated bytes keys = 2;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LookupMasterRequest)
  return target;
}

size_t LookupMasterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LookupMasterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 txn_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->txn_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _txn_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keys_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupMasterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LookupMasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupMasterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LookupMasterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LookupMasterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LookupMasterRequest)
    MergeFrom(*source);
  }
}

void LookupMasterRequest::MergeFrom(const LookupMasterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LookupMasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txn_ids_.MergeFrom(from.txn_ids_);
  keys_.MergeFrom(from.keys_);
}

void LookupMasterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LookupMasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupMasterRequest::CopyFrom(const LookupMasterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LookupMasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupMasterRequest::IsInitialized() const {
  return true;
}

void LookupMasterRequest::InternalSwap(LookupMasterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txn_ids_.InternalSwap(&other->txn_ids_);
  keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupMasterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardEpochRequest::InitAsDefaultInstance() {
}
class ForwardEpochRequest::_Internal {
 public:
};

ForwardEpochRequest::ForwardEpochRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ForwardEpochRequest)
}
ForwardEpochRequest::ForwardEpochRequest(const ForwardEpochRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ForwardEpochRequest)
}

void ForwardEpochRequest::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
}

ForwardEpochRequest::~ForwardEpochRequest() {
  // @@protoc_insertion_point(destructor:proto.ForwardEpochRequest)
  SharedDtor();
}

void ForwardEpochRequest::SharedDtor() {
}

void ForwardEpochRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardEpochRequest& ForwardEpochRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardEpochRequest_server_2eproto.base);
  return *internal_default_instance();
}


void ForwardEpochRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ForwardEpochRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  _internal_metadata_.Clear();
}

const char* ForwardEpochRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardEpochRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ForwardEpochRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ForwardEpochRequest)
  return target;
}

size_t ForwardEpochRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ForwardEpochRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardEpochRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ForwardEpochRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardEpochRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardEpochRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ForwardEpochRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ForwardEpochRequest)
    MergeFrom(*source);
  }
}

void ForwardEpochRequest::MergeFrom(const ForwardEpochRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ForwardEpochRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
}

void ForwardEpochRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ForwardEpochRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardEpochRequest::CopyFrom(const ForwardEpochRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ForwardEpochRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardEpochRequest::IsInitialized() const {
  return true;
}

void ForwardEpochRequest::InternalSwap(ForwardEpochRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(epoch_id_, other->epoch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardEpochRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EpochReplicationAck::InitAsDefaultInstance() {
}
class EpochReplicationAck::_Internal {
 public:
};

EpochReplicationAck::EpochReplicationAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EpochReplicationAck)
}
EpochReplicationAck::EpochReplicationAck(const EpochReplicationAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  epoch_id_ = from.epoch_id_;
  // @@protoc_insertion_point(copy_constructor:proto.EpochReplicationAck)
}

void EpochReplicationAck::SharedCtor() {
  epoch_id_ = PROTOBUF_ULONGLONG(0);
}

EpochReplicationAck::~EpochReplicationAck() {
  // @@protoc_insertion_point(destructor:proto.EpochReplicationAck)
  SharedDtor();
}

void EpochReplicationAck::SharedDtor() {
}

void EpochReplicationAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochReplicationAck& EpochReplicationAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochReplicationAck_server_2eproto.base);
  return *internal_default_instance();
}


void EpochReplicationAck::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EpochReplicationAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epoch_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* EpochReplicationAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 epoch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochReplicationAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EpochReplicationAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch_id = 1;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EpochReplicationAck)
  return target;
}

size_t EpochReplicationAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EpochReplicationAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 epoch_id = 1;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochReplicationAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EpochReplicationAck)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochReplicationAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EpochReplicationAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EpochReplicationAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EpochReplicationAck)
    MergeFrom(*source);
  }
}

void EpochReplicationAck::MergeFrom(const EpochReplicationAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EpochReplicationAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
}

void EpochReplicationAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EpochReplicationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochReplicationAck::CopyFrom(const EpochReplicationAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EpochReplicationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochReplicationAck::IsInitialized() const {
  return true;
}

void EpochReplicationAck::InternalSwap(EpochReplicationAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(epoch_id_, other->epoch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochReplicationAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftPropose::InitAsDefaultInstance() {
}
class RaftPropose::_Internal {
 public:
};

RaftPropose::RaftPropose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RaftPropose)
}
RaftPropose::RaftPropose(const RaftPropose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:proto.RaftPropose)
}

void RaftPropose::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

RaftPropose::~RaftPropose() {
  // @@protoc_insertion_point(destructor:proto.RaftPropose)
  SharedDtor();
}

void RaftPropose::SharedDtor() {
}

void RaftPropose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftPropose& RaftPropose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftPropose_server_2eproto.base);
  return *internal_default_instance();
}


void RaftPropose::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftPropose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RaftPropose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftPropose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftPropose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftPropose)
  return target;
}

size_t RaftPropose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftPropose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftPropose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RaftPropose)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftPropose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftPropose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RaftPropose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RaftPropose)
    MergeFrom(*source);
  }
}

void RaftPropose::MergeFrom(const RaftPropose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftPropose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void RaftPropose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RaftPropose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftPropose::CopyFrom(const RaftPropose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftPropose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftPropose::IsInitialized() const {
  return true;
}

void RaftPropose::InternalSwap(RaftPropose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftPropose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftAcceptRequest::InitAsDefaultInstance() {
}
class RaftAcceptRequest::_Internal {
 public:
};

RaftAcceptRequest::RaftAcceptRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RaftAcceptRequest)
}
RaftAcceptRequest::RaftAcceptRequest(const RaftAcceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  // @@protoc_insertion_point(copy_constructor:proto.RaftAcceptRequest)
}

void RaftAcceptRequest::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
}

RaftAcceptRequest::~RaftAcceptRequest() {
  // @@protoc_insertion_point(destructor:proto.RaftAcceptRequest)
  SharedDtor();
}

void RaftAcceptRequest::SharedDtor() {
}

void RaftAcceptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftAcceptRequest& RaftAcceptRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftAcceptRequest_server_2eproto.base);
  return *internal_default_instance();
}


void RaftAcceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftAcceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  _internal_metadata_.Clear();
}

const char* RaftAcceptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftAcceptRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftAcceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftAcceptRequest)
  return target;
}

size_t RaftAcceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftAcceptRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftAcceptRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RaftAcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftAcceptRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftAcceptRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RaftAcceptRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RaftAcceptRequest)
    MergeFrom(*source);
  }
}

void RaftAcceptRequest::MergeFrom(const RaftAcceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftAcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
}

void RaftAcceptRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RaftAcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftAcceptRequest::CopyFrom(const RaftAcceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftAcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftAcceptRequest::IsInitialized() const {
  return true;
}

void RaftAcceptRequest::InternalSwap(RaftAcceptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(epoch_id_, other->epoch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftAcceptRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftCommitRequest::InitAsDefaultInstance() {
}
class RaftCommitRequest::_Internal {
 public:
};

RaftCommitRequest::RaftCommitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RaftCommitRequest)
}
RaftCommitRequest::RaftCommitRequest(const RaftCommitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  // @@protoc_insertion_point(copy_constructor:proto.RaftCommitRequest)
}

void RaftCommitRequest::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
}

RaftCommitRequest::~RaftCommitRequest() {
  // @@protoc_insertion_point(destructor:proto.RaftCommitRequest)
  SharedDtor();
}

void RaftCommitRequest::SharedDtor() {
}

void RaftCommitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftCommitRequest& RaftCommitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftCommitRequest_server_2eproto.base);
  return *internal_default_instance();
}


void RaftCommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftCommitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  _internal_metadata_.Clear();
}

const char* RaftCommitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftCommitRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftCommitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftCommitRequest)
  return target;
}

size_t RaftCommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftCommitRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftCommitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RaftCommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftCommitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftCommitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RaftCommitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RaftCommitRequest)
    MergeFrom(*source);
  }
}

void RaftCommitRequest::MergeFrom(const RaftCommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftCommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
}

void RaftCommitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RaftCommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCommitRequest::CopyFrom(const RaftCommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftCommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCommitRequest::IsInitialized() const {
  return true;
}

void RaftCommitRequest::InternalSwap(RaftCommitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(epoch_id_, other->epoch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftCommitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatsRequest::InitAsDefaultInstance() {
}
class StatsRequest::_Internal {
 public:
};

StatsRequest::StatsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StatsRequest)
}
StatsRequest::StatsRequest(const StatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&from_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.StatsRequest)
}

void StatsRequest::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&from_)) + sizeof(level_));
}

StatsRequest::~StatsRequest() {
  // @@protoc_insertion_point(destructor:proto.StatsRequest)
  SharedDtor();
}

void StatsRequest::SharedDtor() {
}

void StatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsRequest& StatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatsRequest_server_2eproto.base);
  return *internal_default_instance();
}


void StatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&from_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* StatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StatsRequest)
  return target;
}

size_t StatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // uint32 level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.StatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.StatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.StatsRequest)
    MergeFrom(*source);
  }
}

void StatsRequest::MergeFrom(const StatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void StatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.StatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsRequest::CopyFrom(const StatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsRequest::IsInitialized() const {
  return true;
}

void StatsRequest::InternalSwap(StatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeServerStateRequest::InitAsDefaultInstance() {
}
class ChangeServerStateRequest::_Internal {
 public:
};

ChangeServerStateRequest::ChangeServerStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChangeServerStateRequest)
}
ChangeServerStateRequest::ChangeServerStateRequest(const ChangeServerStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&pull_server_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(pull_server_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ChangeServerStateRequest)
}

void ChangeServerStateRequest::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pull_server_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(pull_server_id_));
}

ChangeServerStateRequest::~ChangeServerStateRequest() {
  // @@protoc_insertion_point(destructor:proto.ChangeServerStateRequest)
  SharedDtor();
}

void ChangeServerStateRequest::SharedDtor() {
}

void ChangeServerStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeServerStateRequest& ChangeServerStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeServerStateRequest_server_2eproto.base);
  return *internal_default_instance();
}


void ChangeServerStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeServerStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pull_server_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(pull_server_id_));
  _internal_metadata_.Clear();
}

const char* ChangeServerStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pull_server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pull_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeServerStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeServerStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint32 target = 3;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target(), target);
  }

  // uint32 state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_state(), target);
  }

  // uint32 pull_server_id = 5;
  if (this->pull_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pull_server_id(), target);
  }

  // uint64 epoch_id = 6;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeServerStateRequest)
  return target;
}

size_t ChangeServerStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeServerStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // uint32 target = 3;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target());
  }

  // uint32 state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  // uint64 epoch_id = 6;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  // uint32 pull_server_id = 5;
  if (this->pull_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pull_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeServerStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChangeServerStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeServerStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeServerStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChangeServerStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChangeServerStateRequest)
    MergeFrom(*source);
  }
}

void ChangeServerStateRequest::MergeFrom(const ChangeServerStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeServerStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from.pull_server_id() != 0) {
    _internal_set_pull_server_id(from._internal_pull_server_id());
  }
}

void ChangeServerStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChangeServerStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeServerStateRequest::CopyFrom(const ChangeServerStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeServerStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeServerStateRequest::IsInitialized() const {
  return true;
}

void ChangeServerStateRequest::InternalSwap(ChangeServerStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(target_, other->target_);
  swap(state_, other->state_);
  swap(epoch_id_, other->epoch_id_);
  swap(pull_server_id_, other->pull_server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeServerStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftResponse::InitAsDefaultInstance() {
  ::proto::_RaftResponse_default_instance_.pong_ = const_cast< ::proto::Pong*>(
      ::proto::Pong::internal_default_instance());
  ::proto::_RaftResponse_default_instance_.lookup_master_ = const_cast< ::proto::LookupMasterResponse*>(
      ::proto::LookupMasterResponse::internal_default_instance());
  ::proto::_RaftResponse_default_instance_.raft_accept_ = const_cast< ::proto::RaftAcceptResponse*>(
      ::proto::RaftAcceptResponse::internal_default_instance());
  ::proto::_RaftResponse_default_instance_.raft_commit_ = const_cast< ::proto::RaftCommitResponse*>(
      ::proto::RaftCommitResponse::internal_default_instance());
  ::proto::_RaftResponse_default_instance_.stats_ = const_cast< ::proto::StatsResponse*>(
      ::proto::StatsResponse::internal_default_instance());
  ::proto::_RaftResponse_default_instance_.change_server_state_ = const_cast< ::proto::ChangeServerStateResponse*>(
      ::proto::ChangeServerStateResponse::internal_default_instance());
}
class RaftResponse::_Internal {
 public:
  static const ::proto::Pong& pong(const RaftResponse* msg);
  static const ::proto::LookupMasterResponse& lookup_master(const RaftResponse* msg);
  static const ::proto::RaftAcceptResponse& raft_accept(const RaftResponse* msg);
  static const ::proto::RaftCommitResponse& raft_commit(const RaftResponse* msg);
  static const ::proto::StatsResponse& stats(const RaftResponse* msg);
  static const ::proto::ChangeServerStateResponse& change_server_state(const RaftResponse* msg);
};

const ::proto::Pong&
RaftResponse::_Internal::pong(const RaftResponse* msg) {
  return *msg->type_.pong_;
}
const ::proto::LookupMasterResponse&
RaftResponse::_Internal::lookup_master(const RaftResponse* msg) {
  return *msg->type_.lookup_master_;
}
const ::proto::RaftAcceptResponse&
RaftResponse::_Internal::raft_accept(const RaftResponse* msg) {
  return *msg->type_.raft_accept_;
}
const ::proto::RaftCommitResponse&
RaftResponse::_Internal::raft_commit(const RaftResponse* msg) {
  return *msg->type_.raft_commit_;
}
const ::proto::StatsResponse&
RaftResponse::_Internal::stats(const RaftResponse* msg) {
  return *msg->type_.stats_;
}
const ::proto::ChangeServerStateResponse&
RaftResponse::_Internal::change_server_state(const RaftResponse* msg) {
  return *msg->type_.change_server_state_;
}
void RaftResponse::set_allocated_pong(::proto::Pong* pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong, submessage_arena);
    }
    set_has_pong();
    type_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.pong)
}
void RaftResponse::set_allocated_lookup_master(::proto::LookupMasterResponse* lookup_master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (lookup_master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lookup_master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_master, submessage_arena);
    }
    set_has_lookup_master();
    type_.lookup_master_ = lookup_master;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.lookup_master)
}
void RaftResponse::set_allocated_raft_accept(::proto::RaftAcceptResponse* raft_accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (raft_accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raft_accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_accept, submessage_arena);
    }
    set_has_raft_accept();
    type_.raft_accept_ = raft_accept;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.raft_accept)
}
void RaftResponse::set_allocated_raft_commit(::proto::RaftCommitResponse* raft_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (raft_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raft_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_commit, submessage_arena);
    }
    set_has_raft_commit();
    type_.raft_commit_ = raft_commit;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.raft_commit)
}
void RaftResponse::set_allocated_stats(::proto::StatsResponse* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    set_has_stats();
    type_.stats_ = stats;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.stats)
}
void RaftResponse::set_allocated_change_server_state(::proto::ChangeServerStateResponse* change_server_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (change_server_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_server_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_server_state, submessage_arena);
    }
    set_has_change_server_state();
    type_.change_server_state_ = change_server_state;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RaftResponse.change_server_state)
}
RaftResponse::RaftResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RaftResponse)
}
RaftResponse::RaftResponse(const RaftResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kPong: {
      _internal_mutable_pong()->::proto::Pong::MergeFrom(from._internal_pong());
      break;
    }
    case kLookupMaster: {
      _internal_mutable_lookup_master()->::proto::LookupMasterResponse::MergeFrom(from._internal_lookup_master());
      break;
    }
    case kRaftAccept: {
      _internal_mutable_raft_accept()->::proto::RaftAcceptResponse::MergeFrom(from._internal_raft_accept());
      break;
    }
    case kRaftCommit: {
      _internal_mutable_raft_commit()->::proto::RaftCommitResponse::MergeFrom(from._internal_raft_commit());
      break;
    }
    case kStats: {
      _internal_mutable_stats()->::proto::StatsResponse::MergeFrom(from._internal_stats());
      break;
    }
    case kChangeServerState: {
      _internal_mutable_change_server_state()->::proto::ChangeServerStateResponse::MergeFrom(from._internal_change_server_state());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.RaftResponse)
}

void RaftResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RaftResponse_server_2eproto.base);
  clear_has_type();
}

RaftResponse::~RaftResponse() {
  // @@protoc_insertion_point(destructor:proto.RaftResponse)
  SharedDtor();
}

void RaftResponse::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void RaftResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftResponse& RaftResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftResponse_server_2eproto.base);
  return *internal_default_instance();
}


void RaftResponse::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.RaftResponse)
  switch (type_case()) {
    case kPong: {
      delete type_.pong_;
      break;
    }
    case kLookupMaster: {
      delete type_.lookup_master_;
      break;
    }
    case kRaftAccept: {
      delete type_.raft_accept_;
      break;
    }
    case kRaftCommit: {
      delete type_.raft_commit_;
      break;
    }
    case kStats: {
      delete type_.stats_;
      break;
    }
    case kChangeServerState: {
      delete type_.change_server_state_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RaftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

const char* RaftResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.Pong pong = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.LookupMasterResponse lookup_master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.RaftAcceptResponse raft_accept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_accept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.RaftCommitResponse raft_commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.StatsResponse stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.ChangeServerStateResponse change_server_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_server_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Pong pong = 1;
  if (_internal_has_pong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pong(this), target, stream);
  }

  // .proto.LookupMasterResponse lookup_master = 2;
  if (_internal_has_lookup_master()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lookup_master(this), target, stream);
  }

  // .proto.RaftAcceptResponse raft_accept = 3;
  if (_internal_has_raft_accept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::raft_accept(this), target, stream);
  }

  // .proto.RaftCommitResponse raft_commit = 4;
  if (_internal_has_raft_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::raft_commit(this), target, stream);
  }

  // .proto.StatsResponse stats = 5;
  if (_internal_has_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stats(this), target, stream);
  }

  // .proto.ChangeServerStateResponse change_server_state = 6;
  if (_internal_has_change_server_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::change_server_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftResponse)
  return target;
}

size_t RaftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .proto.Pong pong = 1;
    case kPong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.pong_);
      break;
    }
    // .proto.LookupMasterResponse lookup_master = 2;
    case kLookupMaster: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.lookup_master_);
      break;
    }
    // .proto.RaftAcceptResponse raft_accept = 3;
    case kRaftAccept: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_accept_);
      break;
    }
    // .proto.RaftCommitResponse raft_commit = 4;
    case kRaftCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_commit_);
      break;
    }
    // .proto.StatsResponse stats = 5;
    case kStats: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.stats_);
      break;
    }
    // .proto.ChangeServerStateResponse change_server_state = 6;
    case kChangeServerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.change_server_state_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RaftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RaftResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RaftResponse)
    MergeFrom(*source);
  }
}

void RaftResponse::MergeFrom(const RaftResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kPong: {
      _internal_mutable_pong()->::proto::Pong::MergeFrom(from._internal_pong());
      break;
    }
    case kLookupMaster: {
      _internal_mutable_lookup_master()->::proto::LookupMasterResponse::MergeFrom(from._internal_lookup_master());
      break;
    }
    case kRaftAccept: {
      _internal_mutable_raft_accept()->::proto::RaftAcceptResponse::MergeFrom(from._internal_raft_accept());
      break;
    }
    case kRaftCommit: {
      _internal_mutable_raft_commit()->::proto::RaftCommitResponse::MergeFrom(from._internal_raft_commit());
      break;
    }
    case kStats: {
      _internal_mutable_stats()->::proto::StatsResponse::MergeFrom(from._internal_stats());
      break;
    }
    case kChangeServerState: {
      _internal_mutable_change_server_state()->::proto::ChangeServerStateResponse::MergeFrom(from._internal_change_server_state());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void RaftResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RaftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftResponse::CopyFrom(const RaftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftResponse::IsInitialized() const {
  return true;
}

void RaftResponse::InternalSwap(RaftResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pong::InitAsDefaultInstance() {
}
class Pong::_Internal {
 public:
};

Pong::Pong()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Pong)
}
Pong::Pong(const Pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_id_) -
    reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  // @@protoc_insertion_point(copy_constructor:proto.Pong)
}

void Pong::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:proto.Pong)
  SharedDtor();
}

void Pong::SharedDtor() {
}

void Pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pong& Pong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pong_server_2eproto.base);
  return *internal_default_instance();
}


void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&from_)) + sizeof(epoch_id_));
  _internal_metadata_.Clear();
}

const char* Pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 epoch_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // int32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // int64 epoch_id = 4;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Pong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from());
  }

  // int32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to());
  }

  // int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 epoch_id = 4;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_epoch_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  const Pong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Pong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Pong)
    MergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
}

void Pong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  return true;
}

void Pong::InternalSwap(Pong* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(time_, other->time_);
  swap(epoch_id_, other->epoch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MasterMetadata::InitAsDefaultInstance() {
}
class MasterMetadata::_Internal {
 public:
};

MasterMetadata::MasterMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MasterMetadata)
}
MasterMetadata::MasterMetadata(const MasterMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&master_, &from.master_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_count_) -
    reinterpret_cast<char*>(&master_)) + sizeof(epoch_count_));
  // @@protoc_insertion_point(copy_constructor:proto.MasterMetadata)
}

void MasterMetadata::SharedCtor() {
  ::memset(&master_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_count_) -
      reinterpret_cast<char*>(&master_)) + sizeof(epoch_count_));
}

MasterMetadata::~MasterMetadata() {
  // @@protoc_insertion_point(destructor:proto.MasterMetadata)
  SharedDtor();
}

void MasterMetadata::SharedDtor() {
}

void MasterMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterMetadata& MasterMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterMetadata_server_2eproto.base);
  return *internal_default_instance();
}


void MasterMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MasterMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&master_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_count_) -
      reinterpret_cast<char*>(&master_)) + sizeof(epoch_count_));
  _internal_metadata_.Clear();
}

const char* MasterMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 master = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 epoch_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          epoch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MasterMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 master = 1;
  if (this->master() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_master(), target);
  }

  // uint32 epoch_count = 2;
  if (this->epoch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_epoch_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MasterMetadata)
  return target;
}

size_t MasterMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MasterMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 master = 1;
  if (this->master() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_master());
  }

  // uint32 epoch_count = 2;
  if (this->epoch_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MasterMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MasterMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MasterMetadata)
    MergeFrom(*source);
  }
}

void MasterMetadata::MergeFrom(const MasterMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MasterMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.master() != 0) {
    _internal_set_master(from._internal_master());
  }
  if (from.epoch_count() != 0) {
    _internal_set_epoch_count(from._internal_epoch_count());
  }
}

void MasterMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MasterMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterMetadata::CopyFrom(const MasterMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MasterMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterMetadata::IsInitialized() const {
  return true;
}

void MasterMetadata::InternalSwap(MasterMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(master_, other->master_);
  swap(epoch_count_, other->epoch_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyMasterMetadata::InitAsDefaultInstance() {
  ::proto::_KeyMasterMetadata_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::proto::MasterMetadata*>(
      ::proto::MasterMetadata::internal_default_instance());
}
class KeyMasterMetadata::_Internal {
 public:
  static const ::proto::MasterMetadata& metadata(const KeyMasterMetadata* msg);
};

const ::proto::MasterMetadata&
KeyMasterMetadata::_Internal::metadata(const KeyMasterMetadata* msg) {
  return *msg->metadata_;
}
KeyMasterMetadata::KeyMasterMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.KeyMasterMetadata)
}
KeyMasterMetadata::KeyMasterMetadata(const KeyMasterMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::proto::MasterMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.KeyMasterMetadata)
}

void KeyMasterMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyMasterMetadata_server_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
}

KeyMasterMetadata::~KeyMasterMetadata() {
  // @@protoc_insertion_point(destructor:proto.KeyMasterMetadata)
  SharedDtor();
}

void KeyMasterMetadata::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void KeyMasterMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyMasterMetadata& KeyMasterMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyMasterMetadata_server_2eproto.base);
  return *internal_default_instance();
}


void KeyMasterMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.KeyMasterMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

const char* KeyMasterMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.MasterMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyMasterMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.KeyMasterMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .proto.MasterMetadata metadata = 2;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.KeyMasterMetadata)
  return target;
}

size_t KeyMasterMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.KeyMasterMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .proto.MasterMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyMasterMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.KeyMasterMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyMasterMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyMasterMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.KeyMasterMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.KeyMasterMetadata)
    MergeFrom(*source);
  }
}

void KeyMasterMetadata::MergeFrom(const KeyMasterMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.KeyMasterMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::proto::MasterMetadata::MergeFrom(from._internal_metadata());
  }
}

void KeyMasterMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.KeyMasterMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyMasterMetadata::CopyFrom(const KeyMasterMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.KeyMasterMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyMasterMetadata::IsInitialized() const {
  return true;
}

void KeyMasterMetadata::InternalSwap(KeyMasterMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyMasterMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LookupMasterResponse::InitAsDefaultInstance() {
}
class LookupMasterResponse::_Internal {
 public:
};

LookupMasterResponse::LookupMasterResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LookupMasterResponse)
}
LookupMasterResponse::LookupMasterResponse(const LookupMasterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      epoch_id_(from.epoch_id_),
      lookup_results_(from.lookup_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.LookupMasterResponse)
}

void LookupMasterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupMasterResponse_server_2eproto.base);
}

LookupMasterResponse::~LookupMasterResponse() {
  // @@protoc_insertion_point(destructor:proto.LookupMasterResponse)
  SharedDtor();
}

void LookupMasterResponse::SharedDtor() {
}

void LookupMasterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupMasterResponse& LookupMasterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupMasterResponse_server_2eproto.base);
  return *internal_default_instance();
}


void LookupMasterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LookupMasterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epoch_id_.Clear();
  lookup_results_.Clear();
  _internal_metadata_.Clear();
}

const char* LookupMasterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 epoch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_epoch_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_epoch_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.KeyMasterMetadata lookup_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lookup_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupMasterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LookupMasterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 epoch_id = 1;
  {
    int byte_size = _epoch_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_epoch_id(), byte_size, target);
    }
  }

  // repeated .proto.KeyMasterMetadata lookup_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lookup_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lookup_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LookupMasterResponse)
  return target;
}

size_t LookupMasterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LookupMasterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 epoch_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->epoch_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _epoch_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto.KeyMasterMetadata lookup_results = 2;
  total_size += 1UL * this->_internal_lookup_results_size();
  for (const auto& msg : this->lookup_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupMasterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LookupMasterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupMasterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LookupMasterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LookupMasterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LookupMasterResponse)
    MergeFrom(*source);
  }
}

void LookupMasterResponse::MergeFrom(const LookupMasterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LookupMasterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  epoch_id_.MergeFrom(from.epoch_id_);
  lookup_results_.MergeFrom(from.lookup_results_);
}

void LookupMasterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LookupMasterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupMasterResponse::CopyFrom(const LookupMasterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LookupMasterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupMasterResponse::IsInitialized() const {
  return true;
}

void LookupMasterResponse::InternalSwap(LookupMasterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  epoch_id_.InternalSwap(&other->epoch_id_);
  lookup_results_.InternalSwap(&other->lookup_results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupMasterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftAcceptResponse::InitAsDefaultInstance() {
}
class RaftAcceptResponse::_Internal {
 public:
};

RaftAcceptResponse::RaftAcceptResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RaftAcceptResponse)
}
RaftAcceptResponse::RaftAcceptResponse(const RaftAcceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&from_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.RaftAcceptResponse)
}

void RaftAcceptResponse::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&from_)) + sizeof(result_));
}

RaftAcceptResponse::~RaftAcceptResponse() {
  // @@protoc_insertion_point(destructor:proto.RaftAcceptResponse)
  SharedDtor();
}

void RaftAcceptResponse::SharedDtor() {
}

void RaftAcceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftAcceptResponse& RaftAcceptResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftAcceptResponse_server_2eproto.base);
  return *internal_default_instance();
}


void RaftAcceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftAcceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&from_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* RaftAcceptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftAcceptResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftAcceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  // uint32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftAcceptResponse)
  return target;
}

size_t RaftAcceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftAcceptResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  // uint32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftAcceptResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RaftAcceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftAcceptResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftAcceptResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RaftAcceptResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RaftAcceptResponse)
    MergeFrom(*source);
  }
}

void RaftAcceptResponse::MergeFrom(const RaftAcceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftAcceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void RaftAcceptResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RaftAcceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftAcceptResponse::CopyFrom(const RaftAcceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftAcceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftAcceptResponse::IsInitialized() const {
  return true;
}

void RaftAcceptResponse::InternalSwap(RaftAcceptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(epoch_id_, other->epoch_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftAcceptResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftCommitResponse::InitAsDefaultInstance() {
}
class RaftCommitResponse::_Internal {
 public:
};

RaftCommitResponse::RaftCommitResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RaftCommitResponse)
}
RaftCommitResponse::RaftCommitResponse(const RaftCommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&from_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.RaftCommitResponse)
}

void RaftCommitResponse::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&from_)) + sizeof(result_));
}

RaftCommitResponse::~RaftCommitResponse() {
  // @@protoc_insertion_point(destructor:proto.RaftCommitResponse)
  SharedDtor();
}

void RaftCommitResponse::SharedDtor() {
}

void RaftCommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftCommitResponse& RaftCommitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftCommitResponse_server_2eproto.base);
  return *internal_default_instance();
}


void RaftCommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RaftCommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&from_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* RaftCommitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftCommitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RaftCommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  // uint32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RaftCommitResponse)
  return target;
}

size_t RaftCommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RaftCommitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  // uint32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftCommitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RaftCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftCommitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftCommitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RaftCommitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RaftCommitResponse)
    MergeFrom(*source);
  }
}

void RaftCommitResponse::MergeFrom(const RaftCommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RaftCommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void RaftCommitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RaftCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCommitResponse::CopyFrom(const RaftCommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RaftCommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCommitResponse::IsInitialized() const {
  return true;
}

void RaftCommitResponse::InternalSwap(RaftCommitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(epoch_id_, other->epoch_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftCommitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatsResponse::InitAsDefaultInstance() {
}
class StatsResponse::_Internal {
 public:
};

StatsResponse::StatsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StatsResponse)
}
StatsResponse::StatsResponse(const StatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&to_, &from.to_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&to_)) + sizeof(from_));
  // @@protoc_insertion_point(copy_constructor:proto.StatsResponse)
}

void StatsResponse::SharedCtor() {
  ::memset(&to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&to_)) + sizeof(from_));
}

StatsResponse::~StatsResponse() {
  // @@protoc_insertion_point(destructor:proto.StatsResponse)
  SharedDtor();
}

void StatsResponse::SharedDtor() {
}

void StatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsResponse& StatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatsResponse_server_2eproto.base);
  return *internal_default_instance();
}


void StatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&to_)) + sizeof(from_));
  _internal_metadata_.Clear();
}

const char* StatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint64 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to(), target);
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_epoch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StatsResponse)
  return target;
}

size_t StatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to());
  }

  // uint64 epoch_id = 3;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.StatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.StatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.StatsResponse)
    MergeFrom(*source);
  }
}

void StatsResponse::MergeFrom(const StatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
}

void StatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.StatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsResponse::CopyFrom(const StatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsResponse::IsInitialized() const {
  return true;
}

void StatsResponse::InternalSwap(StatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(to_, other->to_);
  swap(epoch_id_, other->epoch_id_);
  swap(from_, other->from_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeServerStateResponse::InitAsDefaultInstance() {
}
class ChangeServerStateResponse::_Internal {
 public:
};

ChangeServerStateResponse::ChangeServerStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChangeServerStateResponse)
}
ChangeServerStateResponse::ChangeServerStateResponse(const ChangeServerStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&from_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.ChangeServerStateResponse)
}

void ChangeServerStateResponse::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&from_)) + sizeof(state_));
}

ChangeServerStateResponse::~ChangeServerStateResponse() {
  // @@protoc_insertion_point(destructor:proto.ChangeServerStateResponse)
  SharedDtor();
}

void ChangeServerStateResponse::SharedDtor() {
}

void ChangeServerStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeServerStateResponse& ChangeServerStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeServerStateResponse_server_2eproto.base);
  return *internal_default_instance();
}


void ChangeServerStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChangeServerStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&from_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* ChangeServerStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeServerStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChangeServerStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // uint32 target = 3;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target(), target);
  }

  // uint64 epoch_id = 4;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_epoch_id(), target);
  }

  // uint32 state = 5;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChangeServerStateResponse)
  return target;
}

size_t ChangeServerStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChangeServerStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // uint64 epoch_id = 4;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  // uint32 target = 3;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target());
  }

  // uint32 state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeServerStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChangeServerStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeServerStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeServerStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChangeServerStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChangeServerStateResponse)
    MergeFrom(*source);
  }
}

void ChangeServerStateResponse::MergeFrom(const ChangeServerStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChangeServerStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ChangeServerStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChangeServerStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeServerStateResponse::CopyFrom(const ChangeServerStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChangeServerStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeServerStateResponse::IsInitialized() const {
  return true;
}

void ChangeServerStateResponse::InternalSwap(ChangeServerStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(epoch_id_, other->epoch_id_);
  swap(target_, other->target_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeServerStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ReplyTransactionToClient* Arena::CreateMaybeMessage< ::proto::ReplyTransactionToClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::ReplyTransactionToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftRequest* Arena::CreateMaybeMessage< ::proto::RaftRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::RaftRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Ping* Arena::CreateMaybeMessage< ::proto::Ping >(Arena* arena) {
  return Arena::CreateInternal< ::proto::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Signal* Arena::CreateMaybeMessage< ::proto::Signal >(Arena* arena) {
  return Arena::CreateInternal< ::proto::Signal >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LookupMasterRequest* Arena::CreateMaybeMessage< ::proto::LookupMasterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::LookupMasterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ForwardEpochRequest* Arena::CreateMaybeMessage< ::proto::ForwardEpochRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::ForwardEpochRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::EpochReplicationAck* Arena::CreateMaybeMessage< ::proto::EpochReplicationAck >(Arena* arena) {
  return Arena::CreateInternal< ::proto::EpochReplicationAck >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftPropose* Arena::CreateMaybeMessage< ::proto::RaftPropose >(Arena* arena) {
  return Arena::CreateInternal< ::proto::RaftPropose >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftAcceptRequest* Arena::CreateMaybeMessage< ::proto::RaftAcceptRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::RaftAcceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftCommitRequest* Arena::CreateMaybeMessage< ::proto::RaftCommitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::RaftCommitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StatsRequest* Arena::CreateMaybeMessage< ::proto::StatsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::StatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ChangeServerStateRequest* Arena::CreateMaybeMessage< ::proto::ChangeServerStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::ChangeServerStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftResponse* Arena::CreateMaybeMessage< ::proto::RaftResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::RaftResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Pong* Arena::CreateMaybeMessage< ::proto::Pong >(Arena* arena) {
  return Arena::CreateInternal< ::proto::Pong >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MasterMetadata* Arena::CreateMaybeMessage< ::proto::MasterMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::proto::MasterMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::KeyMasterMetadata* Arena::CreateMaybeMessage< ::proto::KeyMasterMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::proto::KeyMasterMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LookupMasterResponse* Arena::CreateMaybeMessage< ::proto::LookupMasterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::LookupMasterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftAcceptResponse* Arena::CreateMaybeMessage< ::proto::RaftAcceptResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::RaftAcceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RaftCommitResponse* Arena::CreateMaybeMessage< ::proto::RaftCommitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::RaftCommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StatsResponse* Arena::CreateMaybeMessage< ::proto::StatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::StatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ChangeServerStateResponse* Arena::CreateMaybeMessage< ::proto::ChangeServerStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::ChangeServerStateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
