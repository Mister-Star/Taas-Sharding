// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientReadRequest_client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientReadResponse_client_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_RaftRequest_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RaftResponse_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyTransactionToClient_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_storage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StoragePullRequest_storage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_storage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoragePullResponse_storage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_storage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoragePushResponse_storage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_transaction_2eproto;
namespace proto {
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
  const ::proto::Transaction* txn_;
  const ::proto::ReplyTransactionToClient* reply_txn_result_to_client_;
  const ::proto::ClientReadRequest* client_read_request_;
  const ::proto::ClientReadResponse* client_read_response_;
  const ::proto::StoragePullRequest* storage_pull_request_;
  const ::proto::StoragePullResponse* storage_pull_response_;
  const ::proto::StoragePushResponse* storage_push_response_;
  const ::proto::RaftRequest* raft_request_;
  const ::proto::RaftResponse* raft_response_;
} _Message_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_Message_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_Message_default_instance_;
    new (ptr) ::proto::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Message_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Message_message_2eproto}, {
      &scc_info_Transaction_transaction_2eproto.base,
      &scc_info_ReplyTransactionToClient_server_2eproto.base,
      &scc_info_ClientReadRequest_client_2eproto.base,
      &scc_info_ClientReadResponse_client_2eproto.base,
      &scc_info_StoragePullRequest_storage_2eproto.base,
      &scc_info_StoragePullResponse_storage_2eproto.base,
      &scc_info_StoragePushResponse_storage_2eproto.base,
      &scc_info_RaftRequest_server_2eproto.base,
      &scc_info_RaftResponse_server_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::proto::MessageDefaultTypeInternal, txn_),
  offsetof(::proto::MessageDefaultTypeInternal, reply_txn_result_to_client_),
  offsetof(::proto::MessageDefaultTypeInternal, client_read_request_),
  offsetof(::proto::MessageDefaultTypeInternal, client_read_response_),
  offsetof(::proto::MessageDefaultTypeInternal, storage_pull_request_),
  offsetof(::proto::MessageDefaultTypeInternal, storage_pull_response_),
  offsetof(::proto::MessageDefaultTypeInternal, storage_push_response_),
  offsetof(::proto::MessageDefaultTypeInternal, raft_request_),
  offsetof(::proto::MessageDefaultTypeInternal, raft_response_),
  PROTOBUF_FIELD_OFFSET(::proto::Message, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Message_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\005proto\032\021transaction.prot"
  "o\032\014server.proto\032\014client.proto\032\rstorage.p"
  "roto\032\nnode.proto\"\376\003\n\007Message\022!\n\003txn\030\001 \001("
  "\0132\022.proto.TransactionH\000\022E\n\032reply_txn_res"
  "ult_to_client\030\002 \001(\0132\037.proto.ReplyTransac"
  "tionToClientH\000\0227\n\023client_read_request\030\003 "
  "\001(\0132\030.proto.ClientReadRequestH\000\0229\n\024clien"
  "t_read_response\030\004 \001(\0132\031.proto.ClientRead"
  "ResponseH\000\0229\n\024storage_pull_request\030\005 \001(\013"
  "2\031.proto.StoragePullRequestH\000\022;\n\025storage"
  "_pull_response\030\006 \001(\0132\032.proto.StoragePull"
  "ResponseH\000\022;\n\025storage_push_response\030\007 \001("
  "\0132\032.proto.StoragePushResponseH\000\022*\n\014raft_"
  "request\030\010 \001(\0132\022.proto.RaftRequestH\000\022,\n\rr"
  "aft_response\030\t \001(\0132\023.proto.RaftResponseH"
  "\000B\006\n\004typeB\016Z\014./taas_protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[5] = {
  &::descriptor_table_client_2eproto,
  &::descriptor_table_node_2eproto,
  &::descriptor_table_server_2eproto,
  &::descriptor_table_storage_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[1] = {
  &scc_info_Message_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
static bool descriptor_table_message_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  &descriptor_table_message_2eproto_initialized, descriptor_table_protodef_message_2eproto, "message.proto", 633,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 1, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto), true);
namespace proto {

// ===================================================================

void Message::InitAsDefaultInstance() {
  ::proto::_Message_default_instance_.txn_ = const_cast< ::proto::Transaction*>(
      ::proto::Transaction::internal_default_instance());
  ::proto::_Message_default_instance_.reply_txn_result_to_client_ = const_cast< ::proto::ReplyTransactionToClient*>(
      ::proto::ReplyTransactionToClient::internal_default_instance());
  ::proto::_Message_default_instance_.client_read_request_ = const_cast< ::proto::ClientReadRequest*>(
      ::proto::ClientReadRequest::internal_default_instance());
  ::proto::_Message_default_instance_.client_read_response_ = const_cast< ::proto::ClientReadResponse*>(
      ::proto::ClientReadResponse::internal_default_instance());
  ::proto::_Message_default_instance_.storage_pull_request_ = const_cast< ::proto::StoragePullRequest*>(
      ::proto::StoragePullRequest::internal_default_instance());
  ::proto::_Message_default_instance_.storage_pull_response_ = const_cast< ::proto::StoragePullResponse*>(
      ::proto::StoragePullResponse::internal_default_instance());
  ::proto::_Message_default_instance_.storage_push_response_ = const_cast< ::proto::StoragePushResponse*>(
      ::proto::StoragePushResponse::internal_default_instance());
  ::proto::_Message_default_instance_.raft_request_ = const_cast< ::proto::RaftRequest*>(
      ::proto::RaftRequest::internal_default_instance());
  ::proto::_Message_default_instance_.raft_response_ = const_cast< ::proto::RaftResponse*>(
      ::proto::RaftResponse::internal_default_instance());
}
class Message::_Internal {
 public:
  static const ::proto::Transaction& txn(const Message* msg);
  static const ::proto::ReplyTransactionToClient& reply_txn_result_to_client(const Message* msg);
  static const ::proto::ClientReadRequest& client_read_request(const Message* msg);
  static const ::proto::ClientReadResponse& client_read_response(const Message* msg);
  static const ::proto::StoragePullRequest& storage_pull_request(const Message* msg);
  static const ::proto::StoragePullResponse& storage_pull_response(const Message* msg);
  static const ::proto::StoragePushResponse& storage_push_response(const Message* msg);
  static const ::proto::RaftRequest& raft_request(const Message* msg);
  static const ::proto::RaftResponse& raft_response(const Message* msg);
};

const ::proto::Transaction&
Message::_Internal::txn(const Message* msg) {
  return *msg->type_.txn_;
}
const ::proto::ReplyTransactionToClient&
Message::_Internal::reply_txn_result_to_client(const Message* msg) {
  return *msg->type_.reply_txn_result_to_client_;
}
const ::proto::ClientReadRequest&
Message::_Internal::client_read_request(const Message* msg) {
  return *msg->type_.client_read_request_;
}
const ::proto::ClientReadResponse&
Message::_Internal::client_read_response(const Message* msg) {
  return *msg->type_.client_read_response_;
}
const ::proto::StoragePullRequest&
Message::_Internal::storage_pull_request(const Message* msg) {
  return *msg->type_.storage_pull_request_;
}
const ::proto::StoragePullResponse&
Message::_Internal::storage_pull_response(const Message* msg) {
  return *msg->type_.storage_pull_response_;
}
const ::proto::StoragePushResponse&
Message::_Internal::storage_push_response(const Message* msg) {
  return *msg->type_.storage_push_response_;
}
const ::proto::RaftRequest&
Message::_Internal::raft_request(const Message* msg) {
  return *msg->type_.raft_request_;
}
const ::proto::RaftResponse&
Message::_Internal::raft_response(const Message* msg) {
  return *msg->type_.raft_response_;
}
void Message::set_allocated_txn(::proto::Transaction* txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txn, submessage_arena);
    }
    set_has_txn();
    type_.txn_ = txn;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.txn)
}
void Message::clear_txn() {
  if (_internal_has_txn()) {
    delete type_.txn_;
    clear_has_type();
  }
}
void Message::set_allocated_reply_txn_result_to_client(::proto::ReplyTransactionToClient* reply_txn_result_to_client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (reply_txn_result_to_client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reply_txn_result_to_client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_txn_result_to_client, submessage_arena);
    }
    set_has_reply_txn_result_to_client();
    type_.reply_txn_result_to_client_ = reply_txn_result_to_client;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.reply_txn_result_to_client)
}
void Message::clear_reply_txn_result_to_client() {
  if (_internal_has_reply_txn_result_to_client()) {
    delete type_.reply_txn_result_to_client_;
    clear_has_type();
  }
}
void Message::set_allocated_client_read_request(::proto::ClientReadRequest* client_read_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (client_read_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_read_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_read_request, submessage_arena);
    }
    set_has_client_read_request();
    type_.client_read_request_ = client_read_request;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.client_read_request)
}
void Message::clear_client_read_request() {
  if (_internal_has_client_read_request()) {
    delete type_.client_read_request_;
    clear_has_type();
  }
}
void Message::set_allocated_client_read_response(::proto::ClientReadResponse* client_read_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (client_read_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_read_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_read_response, submessage_arena);
    }
    set_has_client_read_response();
    type_.client_read_response_ = client_read_response;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.client_read_response)
}
void Message::clear_client_read_response() {
  if (_internal_has_client_read_response()) {
    delete type_.client_read_response_;
    clear_has_type();
  }
}
void Message::set_allocated_storage_pull_request(::proto::StoragePullRequest* storage_pull_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (storage_pull_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_pull_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_pull_request, submessage_arena);
    }
    set_has_storage_pull_request();
    type_.storage_pull_request_ = storage_pull_request;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.storage_pull_request)
}
void Message::clear_storage_pull_request() {
  if (_internal_has_storage_pull_request()) {
    delete type_.storage_pull_request_;
    clear_has_type();
  }
}
void Message::set_allocated_storage_pull_response(::proto::StoragePullResponse* storage_pull_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (storage_pull_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_pull_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_pull_response, submessage_arena);
    }
    set_has_storage_pull_response();
    type_.storage_pull_response_ = storage_pull_response;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.storage_pull_response)
}
void Message::clear_storage_pull_response() {
  if (_internal_has_storage_pull_response()) {
    delete type_.storage_pull_response_;
    clear_has_type();
  }
}
void Message::set_allocated_storage_push_response(::proto::StoragePushResponse* storage_push_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (storage_push_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_push_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_push_response, submessage_arena);
    }
    set_has_storage_push_response();
    type_.storage_push_response_ = storage_push_response;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.storage_push_response)
}
void Message::clear_storage_push_response() {
  if (_internal_has_storage_push_response()) {
    delete type_.storage_push_response_;
    clear_has_type();
  }
}
void Message::set_allocated_raft_request(::proto::RaftRequest* raft_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (raft_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raft_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_request, submessage_arena);
    }
    set_has_raft_request();
    type_.raft_request_ = raft_request;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.raft_request)
}
void Message::clear_raft_request() {
  if (_internal_has_raft_request()) {
    delete type_.raft_request_;
    clear_has_type();
  }
}
void Message::set_allocated_raft_response(::proto::RaftResponse* raft_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (raft_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raft_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_response, submessage_arena);
    }
    set_has_raft_response();
    type_.raft_response_ = raft_response;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Message.raft_response)
}
void Message::clear_raft_response() {
  if (_internal_has_raft_response()) {
    delete type_.raft_response_;
    clear_has_type();
  }
}
Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kTxn: {
      _internal_mutable_txn()->::proto::Transaction::MergeFrom(from._internal_txn());
      break;
    }
    case kReplyTxnResultToClient: {
      _internal_mutable_reply_txn_result_to_client()->::proto::ReplyTransactionToClient::MergeFrom(from._internal_reply_txn_result_to_client());
      break;
    }
    case kClientReadRequest: {
      _internal_mutable_client_read_request()->::proto::ClientReadRequest::MergeFrom(from._internal_client_read_request());
      break;
    }
    case kClientReadResponse: {
      _internal_mutable_client_read_response()->::proto::ClientReadResponse::MergeFrom(from._internal_client_read_response());
      break;
    }
    case kStoragePullRequest: {
      _internal_mutable_storage_pull_request()->::proto::StoragePullRequest::MergeFrom(from._internal_storage_pull_request());
      break;
    }
    case kStoragePullResponse: {
      _internal_mutable_storage_pull_response()->::proto::StoragePullResponse::MergeFrom(from._internal_storage_pull_response());
      break;
    }
    case kStoragePushResponse: {
      _internal_mutable_storage_push_response()->::proto::StoragePushResponse::MergeFrom(from._internal_storage_push_response());
      break;
    }
    case kRaftRequest: {
      _internal_mutable_raft_request()->::proto::RaftRequest::MergeFrom(from._internal_raft_request());
      break;
    }
    case kRaftResponse: {
      _internal_mutable_raft_response()->::proto::RaftResponse::MergeFrom(from._internal_raft_response());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_message_2eproto.base);
  clear_has_type();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:proto.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_message_2eproto.base);
  return *internal_default_instance();
}


void Message::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.Message)
  switch (type_case()) {
    case kTxn: {
      delete type_.txn_;
      break;
    }
    case kReplyTxnResultToClient: {
      delete type_.reply_txn_result_to_client_;
      break;
    }
    case kClientReadRequest: {
      delete type_.client_read_request_;
      break;
    }
    case kClientReadResponse: {
      delete type_.client_read_response_;
      break;
    }
    case kStoragePullRequest: {
      delete type_.storage_pull_request_;
      break;
    }
    case kStoragePullResponse: {
      delete type_.storage_pull_response_;
      break;
    }
    case kStoragePushResponse: {
      delete type_.storage_push_response_;
      break;
    }
    case kRaftRequest: {
      delete type_.raft_request_;
      break;
    }
    case kRaftResponse: {
      delete type_.raft_response_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.Transaction txn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.ReplyTransactionToClient reply_txn_result_to_client = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_txn_result_to_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.ClientReadRequest client_read_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_read_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.ClientReadResponse client_read_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_read_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.StoragePullRequest storage_pull_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_pull_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.StoragePullResponse storage_pull_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_pull_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.StoragePushResponse storage_push_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_push_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.RaftRequest raft_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.RaftResponse raft_response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Transaction txn = 1;
  if (_internal_has_txn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::txn(this), target, stream);
  }

  // .proto.ReplyTransactionToClient reply_txn_result_to_client = 2;
  if (_internal_has_reply_txn_result_to_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reply_txn_result_to_client(this), target, stream);
  }

  // .proto.ClientReadRequest client_read_request = 3;
  if (_internal_has_client_read_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_read_request(this), target, stream);
  }

  // .proto.ClientReadResponse client_read_response = 4;
  if (_internal_has_client_read_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_read_response(this), target, stream);
  }

  // .proto.StoragePullRequest storage_pull_request = 5;
  if (_internal_has_storage_pull_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::storage_pull_request(this), target, stream);
  }

  // .proto.StoragePullResponse storage_pull_response = 6;
  if (_internal_has_storage_pull_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::storage_pull_response(this), target, stream);
  }

  // .proto.StoragePushResponse storage_push_response = 7;
  if (_internal_has_storage_push_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::storage_push_response(this), target, stream);
  }

  // .proto.RaftRequest raft_request = 8;
  if (_internal_has_raft_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::raft_request(this), target, stream);
  }

  // .proto.RaftResponse raft_response = 9;
  if (_internal_has_raft_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::raft_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .proto.Transaction txn = 1;
    case kTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.txn_);
      break;
    }
    // .proto.ReplyTransactionToClient reply_txn_result_to_client = 2;
    case kReplyTxnResultToClient: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.reply_txn_result_to_client_);
      break;
    }
    // .proto.ClientReadRequest client_read_request = 3;
    case kClientReadRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.client_read_request_);
      break;
    }
    // .proto.ClientReadResponse client_read_response = 4;
    case kClientReadResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.client_read_response_);
      break;
    }
    // .proto.StoragePullRequest storage_pull_request = 5;
    case kStoragePullRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.storage_pull_request_);
      break;
    }
    // .proto.StoragePullResponse storage_pull_response = 6;
    case kStoragePullResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.storage_pull_response_);
      break;
    }
    // .proto.StoragePushResponse storage_push_response = 7;
    case kStoragePushResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.storage_push_response_);
      break;
    }
    // .proto.RaftRequest raft_request = 8;
    case kRaftRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_request_);
      break;
    }
    // .proto.RaftResponse raft_response = 9;
    case kRaftResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.raft_response_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kTxn: {
      _internal_mutable_txn()->::proto::Transaction::MergeFrom(from._internal_txn());
      break;
    }
    case kReplyTxnResultToClient: {
      _internal_mutable_reply_txn_result_to_client()->::proto::ReplyTransactionToClient::MergeFrom(from._internal_reply_txn_result_to_client());
      break;
    }
    case kClientReadRequest: {
      _internal_mutable_client_read_request()->::proto::ClientReadRequest::MergeFrom(from._internal_client_read_request());
      break;
    }
    case kClientReadResponse: {
      _internal_mutable_client_read_response()->::proto::ClientReadResponse::MergeFrom(from._internal_client_read_response());
      break;
    }
    case kStoragePullRequest: {
      _internal_mutable_storage_pull_request()->::proto::StoragePullRequest::MergeFrom(from._internal_storage_pull_request());
      break;
    }
    case kStoragePullResponse: {
      _internal_mutable_storage_pull_response()->::proto::StoragePullResponse::MergeFrom(from._internal_storage_pull_response());
      break;
    }
    case kStoragePushResponse: {
      _internal_mutable_storage_push_response()->::proto::StoragePushResponse::MergeFrom(from._internal_storage_push_response());
      break;
    }
    case kRaftRequest: {
      _internal_mutable_raft_request()->::proto::RaftRequest::MergeFrom(from._internal_raft_request());
      break;
    }
    case kRaftResponse: {
      _internal_mutable_raft_response()->::proto::RaftResponse::MergeFrom(from._internal_raft_response());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Message* Arena::CreateMaybeMessage< ::proto::Message >(Arena* arena) {
  return Arena::CreateInternal< ::proto::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
