// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#include "storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_transaction_2eproto;
namespace proto {
class StoragePullRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoragePullRequest> _instance;
} _StoragePullRequest_default_instance_;
class StoragePullResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoragePullResponse> _instance;
} _StoragePullResponse_default_instance_;
class StoragePushResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoragePushResponse> _instance;
} _StoragePushResponse_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_StoragePullRequest_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_StoragePullRequest_default_instance_;
    new (ptr) ::proto::StoragePullRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::StoragePullRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StoragePullRequest_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StoragePullRequest_storage_2eproto}, {
      &scc_info_Node_node_2eproto.base,}};

static void InitDefaultsscc_info_StoragePullResponse_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_StoragePullResponse_default_instance_;
    new (ptr) ::proto::StoragePullResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::StoragePullResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoragePullResponse_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StoragePullResponse_storage_2eproto}, {
      &scc_info_Transaction_transaction_2eproto.base,
      &scc_info_Node_node_2eproto.base,}};

static void InitDefaultsscc_info_StoragePushResponse_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_StoragePushResponse_default_instance_;
    new (ptr) ::proto::StoragePushResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::StoragePushResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoragePushResponse_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StoragePushResponse_storage_2eproto}, {
      &scc_info_Transaction_transaction_2eproto.base,
      &scc_info_Node_node_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_storage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_storage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_storage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_storage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullRequest, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullRequest, send_node_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullRequest, recv_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, txn_num_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, txns_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, send_node_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePullResponse, recv_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, epoch_id_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, txn_num_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, txns_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, send_node_),
  PROTOBUF_FIELD_OFFSET(::proto::StoragePushResponse, recv_node_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::StoragePullRequest)},
  { 8, -1, sizeof(::proto::StoragePullResponse)},
  { 19, -1, sizeof(::proto::StoragePushResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_StoragePullRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_StoragePullResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_StoragePushResponse_default_instance_),
};

const char descriptor_table_protodef_storage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rstorage.proto\022\005proto\032\021transaction.prot"
  "o\032\nnode.proto\"f\n\022StoragePullRequest\022\020\n\010e"
  "poch_id\030\001 \001(\004\022\036\n\tsend_node\030\002 \001(\0132\013.proto"
  ".Node\022\036\n\trecv_node\030\003 \001(\0132\013.proto.Node\"\271\001"
  "\n\023StoragePullResponse\022\035\n\006result\030\001 \001(\0162\r."
  "proto.Result\022\020\n\010epoch_id\030\002 \001(\004\022\017\n\007txn_nu"
  "m\030\003 \001(\004\022 \n\004txns\030\004 \003(\0132\022.proto.Transactio"
  "n\022\036\n\tsend_node\030\005 \001(\0132\013.proto.Node\022\036\n\trec"
  "v_node\030\006 \001(\0132\013.proto.Node\"\271\001\n\023StoragePus"
  "hResponse\022\035\n\006result\030\001 \001(\0162\r.proto.Result"
  "\022\020\n\010epoch_id\030\002 \001(\004\022\017\n\007txn_num\030\003 \001(\004\022 \n\004t"
  "xns\030\004 \003(\0132\022.proto.Transaction\022\036\n\tsend_no"
  "de\030\005 \001(\0132\013.proto.Node\022\036\n\trecv_node\030\006 \001(\013"
  "2\013.proto.NodeB\016Z\014./taas_protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_storage_2eproto_deps[2] = {
  &::descriptor_table_node_2eproto,
  &::descriptor_table_transaction_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_storage_2eproto_sccs[3] = {
  &scc_info_StoragePullRequest_storage_2eproto.base,
  &scc_info_StoragePullResponse_storage_2eproto.base,
  &scc_info_StoragePushResponse_storage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_storage_2eproto_once;
static bool descriptor_table_storage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_2eproto = {
  &descriptor_table_storage_2eproto_initialized, descriptor_table_protodef_storage_2eproto, "storage.proto", 557,
  &descriptor_table_storage_2eproto_once, descriptor_table_storage_2eproto_sccs, descriptor_table_storage_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_storage_2eproto::offsets,
  file_level_metadata_storage_2eproto, 3, file_level_enum_descriptors_storage_2eproto, file_level_service_descriptors_storage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_storage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_storage_2eproto), true);
namespace proto {

// ===================================================================

void StoragePullRequest::InitAsDefaultInstance() {
  ::proto::_StoragePullRequest_default_instance_._instance.get_mutable()->send_node_ = const_cast< ::proto::Node*>(
      ::proto::Node::internal_default_instance());
  ::proto::_StoragePullRequest_default_instance_._instance.get_mutable()->recv_node_ = const_cast< ::proto::Node*>(
      ::proto::Node::internal_default_instance());
}
class StoragePullRequest::_Internal {
 public:
  static const ::proto::Node& send_node(const StoragePullRequest* msg);
  static const ::proto::Node& recv_node(const StoragePullRequest* msg);
};

const ::proto::Node&
StoragePullRequest::_Internal::send_node(const StoragePullRequest* msg) {
  return *msg->send_node_;
}
const ::proto::Node&
StoragePullRequest::_Internal::recv_node(const StoragePullRequest* msg) {
  return *msg->recv_node_;
}
void StoragePullRequest::clear_send_node() {
  if (GetArenaNoVirtual() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
}
void StoragePullRequest::clear_recv_node() {
  if (GetArenaNoVirtual() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
}
StoragePullRequest::StoragePullRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StoragePullRequest)
}
StoragePullRequest::StoragePullRequest(const StoragePullRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_send_node()) {
    send_node_ = new ::proto::Node(*from.send_node_);
  } else {
    send_node_ = nullptr;
  }
  if (from._internal_has_recv_node()) {
    recv_node_ = new ::proto::Node(*from.recv_node_);
  } else {
    recv_node_ = nullptr;
  }
  epoch_id_ = from.epoch_id_;
  // @@protoc_insertion_point(copy_constructor:proto.StoragePullRequest)
}

void StoragePullRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoragePullRequest_storage_2eproto.base);
  ::memset(&send_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_id_) -
      reinterpret_cast<char*>(&send_node_)) + sizeof(epoch_id_));
}

StoragePullRequest::~StoragePullRequest() {
  // @@protoc_insertion_point(destructor:proto.StoragePullRequest)
  SharedDtor();
}

void StoragePullRequest::SharedDtor() {
  if (this != internal_default_instance()) delete send_node_;
  if (this != internal_default_instance()) delete recv_node_;
}

void StoragePullRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoragePullRequest& StoragePullRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoragePullRequest_storage_2eproto.base);
  return *internal_default_instance();
}


void StoragePullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StoragePullRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
  epoch_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* StoragePullRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 epoch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.Node send_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.Node recv_node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_recv_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoragePullRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StoragePullRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch_id = 1;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch_id(), target);
  }

  // .proto.Node send_node = 2;
  if (this->has_send_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::send_node(this), target, stream);
  }

  // .proto.Node recv_node = 3;
  if (this->has_recv_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::recv_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StoragePullRequest)
  return target;
}

size_t StoragePullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StoragePullRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Node send_node = 2;
  if (this->has_send_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_node_);
  }

  // .proto.Node recv_node = 3;
  if (this->has_recv_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recv_node_);
  }

  // uint64 epoch_id = 1;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoragePullRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.StoragePullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StoragePullRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoragePullRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.StoragePullRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.StoragePullRequest)
    MergeFrom(*source);
  }
}

void StoragePullRequest::MergeFrom(const StoragePullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StoragePullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_send_node()) {
    _internal_mutable_send_node()->::proto::Node::MergeFrom(from._internal_send_node());
  }
  if (from.has_recv_node()) {
    _internal_mutable_recv_node()->::proto::Node::MergeFrom(from._internal_recv_node());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
}

void StoragePullRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.StoragePullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoragePullRequest::CopyFrom(const StoragePullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StoragePullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragePullRequest::IsInitialized() const {
  return true;
}

void StoragePullRequest::InternalSwap(StoragePullRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(send_node_, other->send_node_);
  swap(recv_node_, other->recv_node_);
  swap(epoch_id_, other->epoch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoragePullRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoragePullResponse::InitAsDefaultInstance() {
  ::proto::_StoragePullResponse_default_instance_._instance.get_mutable()->send_node_ = const_cast< ::proto::Node*>(
      ::proto::Node::internal_default_instance());
  ::proto::_StoragePullResponse_default_instance_._instance.get_mutable()->recv_node_ = const_cast< ::proto::Node*>(
      ::proto::Node::internal_default_instance());
}
class StoragePullResponse::_Internal {
 public:
  static const ::proto::Node& send_node(const StoragePullResponse* msg);
  static const ::proto::Node& recv_node(const StoragePullResponse* msg);
};

const ::proto::Node&
StoragePullResponse::_Internal::send_node(const StoragePullResponse* msg) {
  return *msg->send_node_;
}
const ::proto::Node&
StoragePullResponse::_Internal::recv_node(const StoragePullResponse* msg) {
  return *msg->recv_node_;
}
void StoragePullResponse::clear_txns() {
  txns_.Clear();
}
void StoragePullResponse::clear_send_node() {
  if (GetArenaNoVirtual() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
}
void StoragePullResponse::clear_recv_node() {
  if (GetArenaNoVirtual() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
}
StoragePullResponse::StoragePullResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StoragePullResponse)
}
StoragePullResponse::StoragePullResponse(const StoragePullResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      txns_(from.txns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_send_node()) {
    send_node_ = new ::proto::Node(*from.send_node_);
  } else {
    send_node_ = nullptr;
  }
  if (from._internal_has_recv_node()) {
    recv_node_ = new ::proto::Node(*from.recv_node_);
  } else {
    recv_node_ = nullptr;
  }
  ::memcpy(&epoch_id_, &from.epoch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&epoch_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.StoragePullResponse)
}

void StoragePullResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoragePullResponse_storage_2eproto.base);
  ::memset(&send_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&send_node_)) + sizeof(result_));
}

StoragePullResponse::~StoragePullResponse() {
  // @@protoc_insertion_point(destructor:proto.StoragePullResponse)
  SharedDtor();
}

void StoragePullResponse::SharedDtor() {
  if (this != internal_default_instance()) delete send_node_;
  if (this != internal_default_instance()) delete recv_node_;
}

void StoragePullResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoragePullResponse& StoragePullResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoragePullResponse_storage_2eproto.base);
  return *internal_default_instance();
}


void StoragePullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StoragePullResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txns_.Clear();
  if (GetArenaNoVirtual() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
  ::memset(&epoch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&epoch_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* StoragePullResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::proto::Result>(val));
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 txn_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          txn_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.Transaction txns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .proto.Node send_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.Node recv_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recv_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoragePullResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StoragePullResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // uint64 epoch_id = 2;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch_id(), target);
  }

  // uint64 txn_num = 3;
  if (this->txn_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_txn_num(), target);
  }

  // repeated .proto.Transaction txns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_txns(i), target, stream);
  }

  // .proto.Node send_node = 5;
  if (this->has_send_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::send_node(this), target, stream);
  }

  // .proto.Node recv_node = 6;
  if (this->has_recv_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::recv_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StoragePullResponse)
  return target;
}

size_t StoragePullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StoragePullResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Transaction txns = 4;
  total_size += 1UL * this->_internal_txns_size();
  for (const auto& msg : this->txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.Node send_node = 5;
  if (this->has_send_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_node_);
  }

  // .proto.Node recv_node = 6;
  if (this->has_recv_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recv_node_);
  }

  // uint64 epoch_id = 2;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  // uint64 txn_num = 3;
  if (this->txn_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txn_num());
  }

  // .proto.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoragePullResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.StoragePullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StoragePullResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoragePullResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.StoragePullResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.StoragePullResponse)
    MergeFrom(*source);
  }
}

void StoragePullResponse::MergeFrom(const StoragePullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StoragePullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txns_.MergeFrom(from.txns_);
  if (from.has_send_node()) {
    _internal_mutable_send_node()->::proto::Node::MergeFrom(from._internal_send_node());
  }
  if (from.has_recv_node()) {
    _internal_mutable_recv_node()->::proto::Node::MergeFrom(from._internal_recv_node());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from.txn_num() != 0) {
    _internal_set_txn_num(from._internal_txn_num());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void StoragePullResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.StoragePullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoragePullResponse::CopyFrom(const StoragePullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StoragePullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragePullResponse::IsInitialized() const {
  return true;
}

void StoragePullResponse::InternalSwap(StoragePullResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txns_.InternalSwap(&other->txns_);
  swap(send_node_, other->send_node_);
  swap(recv_node_, other->recv_node_);
  swap(epoch_id_, other->epoch_id_);
  swap(txn_num_, other->txn_num_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoragePullResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoragePushResponse::InitAsDefaultInstance() {
  ::proto::_StoragePushResponse_default_instance_._instance.get_mutable()->send_node_ = const_cast< ::proto::Node*>(
      ::proto::Node::internal_default_instance());
  ::proto::_StoragePushResponse_default_instance_._instance.get_mutable()->recv_node_ = const_cast< ::proto::Node*>(
      ::proto::Node::internal_default_instance());
}
class StoragePushResponse::_Internal {
 public:
  static const ::proto::Node& send_node(const StoragePushResponse* msg);
  static const ::proto::Node& recv_node(const StoragePushResponse* msg);
};

const ::proto::Node&
StoragePushResponse::_Internal::send_node(const StoragePushResponse* msg) {
  return *msg->send_node_;
}
const ::proto::Node&
StoragePushResponse::_Internal::recv_node(const StoragePushResponse* msg) {
  return *msg->recv_node_;
}
void StoragePushResponse::clear_txns() {
  txns_.Clear();
}
void StoragePushResponse::clear_send_node() {
  if (GetArenaNoVirtual() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
}
void StoragePushResponse::clear_recv_node() {
  if (GetArenaNoVirtual() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
}
StoragePushResponse::StoragePushResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StoragePushResponse)
}
StoragePushResponse::StoragePushResponse(const StoragePushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      txns_(from.txns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_send_node()) {
    send_node_ = new ::proto::Node(*from.send_node_);
  } else {
    send_node_ = nullptr;
  }
  if (from._internal_has_recv_node()) {
    recv_node_ = new ::proto::Node(*from.recv_node_);
  } else {
    recv_node_ = nullptr;
  }
  ::memcpy(&epoch_id_, &from.epoch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&epoch_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.StoragePushResponse)
}

void StoragePushResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoragePushResponse_storage_2eproto.base);
  ::memset(&send_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&send_node_)) + sizeof(result_));
}

StoragePushResponse::~StoragePushResponse() {
  // @@protoc_insertion_point(destructor:proto.StoragePushResponse)
  SharedDtor();
}

void StoragePushResponse::SharedDtor() {
  if (this != internal_default_instance()) delete send_node_;
  if (this != internal_default_instance()) delete recv_node_;
}

void StoragePushResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoragePushResponse& StoragePushResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoragePushResponse_storage_2eproto.base);
  return *internal_default_instance();
}


void StoragePushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StoragePushResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txns_.Clear();
  if (GetArenaNoVirtual() == nullptr && send_node_ != nullptr) {
    delete send_node_;
  }
  send_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recv_node_ != nullptr) {
    delete recv_node_;
  }
  recv_node_ = nullptr;
  ::memset(&epoch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&epoch_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* StoragePushResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::proto::Result>(val));
        } else goto handle_unusual;
        continue;
      // uint64 epoch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          epoch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 txn_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          txn_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.Transaction txns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .proto.Node send_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.Node recv_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_recv_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoragePushResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.StoragePushResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // uint64 epoch_id = 2;
  if (this->epoch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch_id(), target);
  }

  // uint64 txn_num = 3;
  if (this->txn_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_txn_num(), target);
  }

  // repeated .proto.Transaction txns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_txns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_txns(i), target, stream);
  }

  // .proto.Node send_node = 5;
  if (this->has_send_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::send_node(this), target, stream);
  }

  // .proto.Node recv_node = 6;
  if (this->has_recv_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::recv_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StoragePushResponse)
  return target;
}

size_t StoragePushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StoragePushResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Transaction txns = 4;
  total_size += 1UL * this->_internal_txns_size();
  for (const auto& msg : this->txns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.Node send_node = 5;
  if (this->has_send_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_node_);
  }

  // .proto.Node recv_node = 6;
  if (this->has_recv_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recv_node_);
  }

  // uint64 epoch_id = 2;
  if (this->epoch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_epoch_id());
  }

  // uint64 txn_num = 3;
  if (this->txn_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txn_num());
  }

  // .proto.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoragePushResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.StoragePushResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StoragePushResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoragePushResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.StoragePushResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.StoragePushResponse)
    MergeFrom(*source);
  }
}

void StoragePushResponse::MergeFrom(const StoragePushResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StoragePushResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  txns_.MergeFrom(from.txns_);
  if (from.has_send_node()) {
    _internal_mutable_send_node()->::proto::Node::MergeFrom(from._internal_send_node());
  }
  if (from.has_recv_node()) {
    _internal_mutable_recv_node()->::proto::Node::MergeFrom(from._internal_recv_node());
  }
  if (from.epoch_id() != 0) {
    _internal_set_epoch_id(from._internal_epoch_id());
  }
  if (from.txn_num() != 0) {
    _internal_set_txn_num(from._internal_txn_num());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void StoragePushResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.StoragePushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoragePushResponse::CopyFrom(const StoragePushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StoragePushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoragePushResponse::IsInitialized() const {
  return true;
}

void StoragePushResponse::InternalSwap(StoragePushResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txns_.InternalSwap(&other->txns_);
  swap(send_node_, other->send_node_);
  swap(recv_node_, other->recv_node_);
  swap(epoch_id_, other->epoch_id_);
  swap(txn_num_, other->txn_num_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoragePushResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::StoragePullRequest* Arena::CreateMaybeMessage< ::proto::StoragePullRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::StoragePullRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StoragePullResponse* Arena::CreateMaybeMessage< ::proto::StoragePullResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::StoragePullResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::StoragePushResponse* Arena::CreateMaybeMessage< ::proto::StoragePushResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::StoragePushResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
