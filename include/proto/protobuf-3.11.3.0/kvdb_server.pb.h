// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvdb_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvdb_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvdb_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvdb_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvdb_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvdb_5fserver_2eproto;
namespace proto {
class KvDBData;
class KvDBDataDefaultTypeInternal;
extern KvDBDataDefaultTypeInternal _KvDBData_default_instance_;
class KvDBRequest;
class KvDBRequestDefaultTypeInternal;
extern KvDBRequestDefaultTypeInternal _KvDBRequest_default_instance_;
class KvDBResponse;
class KvDBResponseDefaultTypeInternal;
extern KvDBResponseDefaultTypeInternal _KvDBResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::KvDBData* Arena::CreateMaybeMessage<::proto::KvDBData>(Arena*);
template<> ::proto::KvDBRequest* Arena::CreateMaybeMessage<::proto::KvDBRequest>(Arena*);
template<> ::proto::KvDBResponse* Arena::CreateMaybeMessage<::proto::KvDBResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class KvDBData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.KvDBData) */ {
 public:
  KvDBData();
  virtual ~KvDBData();

  KvDBData(const KvDBData& from);
  KvDBData(KvDBData&& from) noexcept
    : KvDBData() {
    *this = ::std::move(from);
  }

  inline KvDBData& operator=(const KvDBData& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvDBData& operator=(KvDBData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvDBData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvDBData* internal_default_instance() {
    return reinterpret_cast<const KvDBData*>(
               &_KvDBData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KvDBData& a, KvDBData& b) {
    a.Swap(&b);
  }
  inline void Swap(KvDBData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvDBData* New() const final {
    return CreateMaybeMessage<KvDBData>(nullptr);
  }

  KvDBData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvDBData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvDBData& from);
  void MergeFrom(const KvDBData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvDBData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.KvDBData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvdb_5fserver_2eproto);
    return ::descriptor_table_kvdb_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kCsnFieldNumber = 4,
    kOpTypeFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 csn = 4;
  void clear_csn();
  ::PROTOBUF_NAMESPACE_ID::uint64 csn() const;
  void set_csn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_csn() const;
  void _internal_set_csn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .proto.OpType op_type = 1;
  void clear_op_type();
  ::proto::OpType op_type() const;
  void set_op_type(::proto::OpType value);
  private:
  ::proto::OpType _internal_op_type() const;
  void _internal_set_op_type(::proto::OpType value);
  public:

  // @@protoc_insertion_point(class_scope:proto.KvDBData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 csn_;
  int op_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvdb_5fserver_2eproto;
};
// -------------------------------------------------------------------

class KvDBRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.KvDBRequest) */ {
 public:
  KvDBRequest();
  virtual ~KvDBRequest();

  KvDBRequest(const KvDBRequest& from);
  KvDBRequest(KvDBRequest&& from) noexcept
    : KvDBRequest() {
    *this = ::std::move(from);
  }

  inline KvDBRequest& operator=(const KvDBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvDBRequest& operator=(KvDBRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvDBRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvDBRequest* internal_default_instance() {
    return reinterpret_cast<const KvDBRequest*>(
               &_KvDBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KvDBRequest& a, KvDBRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvDBRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvDBRequest* New() const final {
    return CreateMaybeMessage<KvDBRequest>(nullptr);
  }

  KvDBRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvDBRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvDBRequest& from);
  void MergeFrom(const KvDBRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvDBRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.KvDBRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvdb_5fserver_2eproto);
    return ::descriptor_table_kvdb_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .proto.KvDBData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::proto::KvDBData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData >*
      mutable_data();
  private:
  const ::proto::KvDBData& _internal_data(int index) const;
  ::proto::KvDBData* _internal_add_data();
  public:
  const ::proto::KvDBData& data(int index) const;
  ::proto::KvDBData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData >&
      data() const;

  // @@protoc_insertion_point(class_scope:proto.KvDBRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvdb_5fserver_2eproto;
};
// -------------------------------------------------------------------

class KvDBResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.KvDBResponse) */ {
 public:
  KvDBResponse();
  virtual ~KvDBResponse();

  KvDBResponse(const KvDBResponse& from);
  KvDBResponse(KvDBResponse&& from) noexcept
    : KvDBResponse() {
    *this = ::std::move(from);
  }

  inline KvDBResponse& operator=(const KvDBResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvDBResponse& operator=(KvDBResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvDBResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvDBResponse* internal_default_instance() {
    return reinterpret_cast<const KvDBResponse*>(
               &_KvDBResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KvDBResponse& a, KvDBResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvDBResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvDBResponse* New() const final {
    return CreateMaybeMessage<KvDBResponse>(nullptr);
  }

  KvDBResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvDBResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvDBResponse& from);
  void MergeFrom(const KvDBResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvDBResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.KvDBResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvdb_5fserver_2eproto);
    return ::descriptor_table_kvdb_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .proto.KvDBData data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::proto::KvDBData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData >*
      mutable_data();
  private:
  const ::proto::KvDBData& _internal_data(int index) const;
  ::proto::KvDBData* _internal_add_data();
  public:
  const ::proto::KvDBData& data(int index) const;
  ::proto::KvDBData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData >&
      data() const;

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.KvDBResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData > data_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvdb_5fserver_2eproto;
};
// ===================================================================

class KvDBGetService_Stub;

class KvDBGetService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline KvDBGetService() {};
 public:
  virtual ~KvDBGetService();

  typedef KvDBGetService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::proto::KvDBRequest* request,
                       ::proto::KvDBResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KvDBGetService);
};

class KvDBGetService_Stub : public KvDBGetService {
 public:
  KvDBGetService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  KvDBGetService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~KvDBGetService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements KvDBGetService ------------------------------------------

  void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::proto::KvDBRequest* request,
                       ::proto::KvDBResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KvDBGetService_Stub);
};


// -------------------------------------------------------------------

class KvDBPutService_Stub;

class KvDBPutService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline KvDBPutService() {};
 public:
  virtual ~KvDBPutService();

  typedef KvDBPutService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Put(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::proto::KvDBRequest* request,
                       ::proto::KvDBResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KvDBPutService);
};

class KvDBPutService_Stub : public KvDBPutService {
 public:
  KvDBPutService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  KvDBPutService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~KvDBPutService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements KvDBPutService ------------------------------------------

  void Put(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::proto::KvDBRequest* request,
                       ::proto::KvDBResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KvDBPutService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KvDBData

// .proto.OpType op_type = 1;
inline void KvDBData::clear_op_type() {
  op_type_ = 0;
}
inline ::proto::OpType KvDBData::_internal_op_type() const {
  return static_cast< ::proto::OpType >(op_type_);
}
inline ::proto::OpType KvDBData::op_type() const {
  // @@protoc_insertion_point(field_get:proto.KvDBData.op_type)
  return _internal_op_type();
}
inline void KvDBData::_internal_set_op_type(::proto::OpType value) {
  
  op_type_ = value;
}
inline void KvDBData::set_op_type(::proto::OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:proto.KvDBData.op_type)
}

// string key = 2;
inline void KvDBData::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KvDBData::key() const {
  // @@protoc_insertion_point(field_get:proto.KvDBData.key)
  return _internal_key();
}
inline void KvDBData::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:proto.KvDBData.key)
}
inline std::string* KvDBData::mutable_key() {
  // @@protoc_insertion_point(field_mutable:proto.KvDBData.key)
  return _internal_mutable_key();
}
inline const std::string& KvDBData::_internal_key() const {
  return key_.GetNoArena();
}
inline void KvDBData::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KvDBData::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.KvDBData.key)
}
inline void KvDBData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.KvDBData.key)
}
inline void KvDBData::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.KvDBData.key)
}
inline std::string* KvDBData::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvDBData::release_key() {
  // @@protoc_insertion_point(field_release:proto.KvDBData.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvDBData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.KvDBData.key)
}

// string value = 3;
inline void KvDBData::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KvDBData::value() const {
  // @@protoc_insertion_point(field_get:proto.KvDBData.value)
  return _internal_value();
}
inline void KvDBData::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:proto.KvDBData.value)
}
inline std::string* KvDBData::mutable_value() {
  // @@protoc_insertion_point(field_mutable:proto.KvDBData.value)
  return _internal_mutable_value();
}
inline const std::string& KvDBData::_internal_value() const {
  return value_.GetNoArena();
}
inline void KvDBData::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KvDBData::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.KvDBData.value)
}
inline void KvDBData::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.KvDBData.value)
}
inline void KvDBData::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.KvDBData.value)
}
inline std::string* KvDBData::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvDBData::release_value() {
  // @@protoc_insertion_point(field_release:proto.KvDBData.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvDBData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.KvDBData.value)
}

// uint64 csn = 4;
inline void KvDBData::clear_csn() {
  csn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KvDBData::_internal_csn() const {
  return csn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KvDBData::csn() const {
  // @@protoc_insertion_point(field_get:proto.KvDBData.csn)
  return _internal_csn();
}
inline void KvDBData::_internal_set_csn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  csn_ = value;
}
inline void KvDBData::set_csn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_csn(value);
  // @@protoc_insertion_point(field_set:proto.KvDBData.csn)
}

// -------------------------------------------------------------------

// KvDBRequest

// repeated .proto.KvDBData data = 1;
inline int KvDBRequest::_internal_data_size() const {
  return data_.size();
}
inline int KvDBRequest::data_size() const {
  return _internal_data_size();
}
inline void KvDBRequest::clear_data() {
  data_.Clear();
}
inline ::proto::KvDBData* KvDBRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.KvDBRequest.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData >*
KvDBRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.KvDBRequest.data)
  return &data_;
}
inline const ::proto::KvDBData& KvDBRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::proto::KvDBData& KvDBRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:proto.KvDBRequest.data)
  return _internal_data(index);
}
inline ::proto::KvDBData* KvDBRequest::_internal_add_data() {
  return data_.Add();
}
inline ::proto::KvDBData* KvDBRequest::add_data() {
  // @@protoc_insertion_point(field_add:proto.KvDBRequest.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData >&
KvDBRequest::data() const {
  // @@protoc_insertion_point(field_list:proto.KvDBRequest.data)
  return data_;
}

// -------------------------------------------------------------------

// KvDBResponse

// bool result = 1;
inline void KvDBResponse::clear_result() {
  result_ = false;
}
inline bool KvDBResponse::_internal_result() const {
  return result_;
}
inline bool KvDBResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.KvDBResponse.result)
  return _internal_result();
}
inline void KvDBResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void KvDBResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:proto.KvDBResponse.result)
}

// repeated .proto.KvDBData data = 2;
inline int KvDBResponse::_internal_data_size() const {
  return data_.size();
}
inline int KvDBResponse::data_size() const {
  return _internal_data_size();
}
inline void KvDBResponse::clear_data() {
  data_.Clear();
}
inline ::proto::KvDBData* KvDBResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.KvDBResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData >*
KvDBResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.KvDBResponse.data)
  return &data_;
}
inline const ::proto::KvDBData& KvDBResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::proto::KvDBData& KvDBResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:proto.KvDBResponse.data)
  return _internal_data(index);
}
inline ::proto::KvDBData* KvDBResponse::_internal_add_data() {
  return data_.Add();
}
inline ::proto::KvDBData* KvDBResponse::add_data() {
  // @@protoc_insertion_point(field_add:proto.KvDBResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::KvDBData >&
KvDBResponse::data() const {
  // @@protoc_insertion_point(field_list:proto.KvDBResponse.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvdb_5fserver_2eproto
