syntax = "proto3";

package proto;
option go_package ="./taas_proto";

import "node.proto";


enum Result {
  Fail = 0;
  Success = 1;
}

enum TxnType {
  ClientTxn = 0;
  ShardedClientTxn = 1;
  EpochShardEndFlag = 2;
  RemoteServerTxn = 3;
  EpochRemoteServerEndFlag = 4;
  BackUpTxn = 5;
  EpochBackUpEndFlag = 6;
  CommittedTxn = 7;
  EpochCommittedTxnEndFlag = 8;

  AbortSet = 20;
  InsertSet = 21;
  EpochShardACK = 30;
  EpochRemoteServerACK = 31;
  BackUpACK = 32;
  AbortSetACK = 33;
  InsertSetACK = 34;
  EpochLogPushDownComplete = 35;
  NullMark = 40;

  // 添加2PL状态
  Lock_ok = 51;
  Lock_abort = 52;
  // 添加2PC状态
  Prepare_req = 53;
  Prepare_ok = 54;
  Prepare_abort = 55;

  Commit_req = 56;
  Commit_ok = 57;
  Commit_abort = 58;
  // abort统一处理
  Abort_txn = 59;
}

enum TxnState {
  Empty = 0;
  Abort = 1;
  Commit = 2;
}

enum OpType {
  Read = 0;
  Insert = 1;
  Update = 2;
  Delete = 3;
}

message Column {
  uint32 id = 1; // column id
  bytes value = 2; // column value/data
}

message Row{
  OpType op_type = 1;
  string table_name = 2;
  bytes key = 3;
  bytes data = 4;
  repeated Column column = 5; // if needed
  uint64 csn = 6;
}

message Transaction{
  repeated Row row = 1;
  uint64 start_epoch = 2;
  uint64 commit_epoch = 3;
  uint64 csn = 4; //Taas

  TxnType txn_type = 5;
  TxnState txn_state = 6;

  uint64 message_server_id= 10;

  uint64 shard_id = 11;
  uint64 shard_server_id = 12;

  string txn_server_ip = 13; // used to identify which remote server sends this txn to current server
  uint32 txn_server_id = 14; // used to identify which remote server sends this txn to current server

  string client_ip = 15; // used to identify which client sends this txn to current server
  uint64 client_txn_id = 16; // used to identify which txn it is in client

  uint64 storage_total_num = 21; //multi-model transaction
  string storage_type = 22; //multi-model transaction

}