// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/node.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftransaction_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftransaction_2eproto;
namespace proto {
class Column;
struct ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class Row;
struct RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Column* Arena::CreateMaybeMessage<::proto::Column>(Arena*);
template<> ::proto::Row* Arena::CreateMaybeMessage<::proto::Row>(Arena*);
template<> ::proto::Transaction* Arena::CreateMaybeMessage<::proto::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum Result : int {
  Fail = 0,
  Success = 1,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Result_IsValid(int value);
constexpr Result Result_MIN = Fail;
constexpr Result Result_MAX = Success;
constexpr int Result_ARRAYSIZE = Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor();
template<typename T>
inline const std::string& Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_descriptor(), enum_t_value);
}
inline bool Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result>(
    Result_descriptor(), name, value);
}
enum TxnType : int {
  ClientTxn = 0,
  RemoteServerTxn = 1,
  EpochEndFlag = 2,
  CommittedTxn = 3,
  TxnType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TxnType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TxnType_IsValid(int value);
constexpr TxnType TxnType_MIN = ClientTxn;
constexpr TxnType TxnType_MAX = CommittedTxn;
constexpr int TxnType_ARRAYSIZE = TxnType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxnType_descriptor();
template<typename T>
inline const std::string& TxnType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TxnType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TxnType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TxnType_descriptor(), enum_t_value);
}
inline bool TxnType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TxnType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TxnType>(
    TxnType_descriptor(), name, value);
}
enum TxnState : int {
  Empty = 0,
  Abort = 1,
  Commit = 2,
  TxnState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TxnState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TxnState_IsValid(int value);
constexpr TxnState TxnState_MIN = Empty;
constexpr TxnState TxnState_MAX = Commit;
constexpr int TxnState_ARRAYSIZE = TxnState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxnState_descriptor();
template<typename T>
inline const std::string& TxnState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TxnState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TxnState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TxnState_descriptor(), enum_t_value);
}
inline bool TxnState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TxnState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TxnState>(
    TxnState_descriptor(), name, value);
}
enum OpType : int {
  Read = 0,
  Insert = 1,
  Update = 2,
  Delete = 3,
  OpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OpType_IsValid(int value);
constexpr OpType OpType_MIN = Read;
constexpr OpType OpType_MAX = Delete;
constexpr int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor();
template<typename T>
inline const std::string& OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpType_descriptor(), enum_t_value);
}
inline bool OpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
// ===================================================================

class Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  ~Column() override;
  explicit PROTOBUF_CONSTEXPR Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Column(const Column& from);
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Column& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Column";
  }
  protected:
  explicit Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  ~Row() override;
  explicit PROTOBUF_CONSTEXPR Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Row& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 5,
    kTableNameFieldNumber = 2,
    kKeyFieldNumber = 3,
    kDataFieldNumber = 4,
    kOpTypeFieldNumber = 1,
  };
  // repeated .proto.Column column = 5;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  ::proto::Column* mutable_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Column >*
      mutable_column();
  private:
  const ::proto::Column& _internal_column(int index) const;
  ::proto::Column* _internal_add_column();
  public:
  const ::proto::Column& column(int index) const;
  ::proto::Column* add_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Column >&
      column() const;

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .proto.OpType op_type = 1;
  void clear_op_type();
  ::proto::OpType op_type() const;
  void set_op_type(::proto::OpType value);
  private:
  ::proto::OpType _internal_op_type() const;
  void _internal_set_op_type(::proto::OpType value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Column > column_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int op_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit PROTOBUF_CONSTEXPR Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kServerIpFieldNumber = 5,
    kClientIpFieldNumber = 7,
    kStartEpochFieldNumber = 2,
    kCommitEpochFieldNumber = 3,
    kCsnFieldNumber = 4,
    kServerIdFieldNumber = 6,
    kTxnTypeFieldNumber = 9,
    kClientTxnIdFieldNumber = 8,
    kTxnStateFieldNumber = 10,
  };
  // repeated .proto.Row row = 1;
  int row_size() const;
  private:
  int _internal_row_size() const;
  public:
  void clear_row();
  ::proto::Row* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Row >*
      mutable_row();
  private:
  const ::proto::Row& _internal_row(int index) const;
  ::proto::Row* _internal_add_row();
  public:
  const ::proto::Row& row(int index) const;
  ::proto::Row* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Row >&
      row() const;

  // string server_ip = 5;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_NODISCARD std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // string client_ip = 7;
  void clear_client_ip();
  const std::string& client_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ip();
  PROTOBUF_NODISCARD std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);
  private:
  const std::string& _internal_client_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ip(const std::string& value);
  std::string* _internal_mutable_client_ip();
  public:

  // uint64 start_epoch = 2;
  void clear_start_epoch();
  uint64_t start_epoch() const;
  void set_start_epoch(uint64_t value);
  private:
  uint64_t _internal_start_epoch() const;
  void _internal_set_start_epoch(uint64_t value);
  public:

  // uint64 commit_epoch = 3;
  void clear_commit_epoch();
  uint64_t commit_epoch() const;
  void set_commit_epoch(uint64_t value);
  private:
  uint64_t _internal_commit_epoch() const;
  void _internal_set_commit_epoch(uint64_t value);
  public:

  // uint64 csn = 4;
  void clear_csn();
  uint64_t csn() const;
  void set_csn(uint64_t value);
  private:
  uint64_t _internal_csn() const;
  void _internal_set_csn(uint64_t value);
  public:

  // uint32 server_id = 6;
  void clear_server_id();
  uint32_t server_id() const;
  void set_server_id(uint32_t value);
  private:
  uint32_t _internal_server_id() const;
  void _internal_set_server_id(uint32_t value);
  public:

  // .proto.TxnType txn_type = 9;
  void clear_txn_type();
  ::proto::TxnType txn_type() const;
  void set_txn_type(::proto::TxnType value);
  private:
  ::proto::TxnType _internal_txn_type() const;
  void _internal_set_txn_type(::proto::TxnType value);
  public:

  // uint64 client_txn_id = 8;
  void clear_client_txn_id();
  uint64_t client_txn_id() const;
  void set_client_txn_id(uint64_t value);
  private:
  uint64_t _internal_client_txn_id() const;
  void _internal_set_client_txn_id(uint64_t value);
  public:

  // .proto.TxnState txn_state = 10;
  void clear_txn_state();
  ::proto::TxnState txn_state() const;
  void set_txn_state(::proto::TxnState value);
  private:
  ::proto::TxnState _internal_txn_state() const;
  void _internal_set_txn_state(::proto::TxnState value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Row > row_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  uint64_t start_epoch_;
  uint64_t commit_epoch_;
  uint64_t csn_;
  uint32_t server_id_;
  int txn_type_;
  uint64_t client_txn_id_;
  int txn_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Column

// uint32 id = 1;
inline void Column::clear_id() {
  id_ = 0u;
}
inline uint32_t Column::_internal_id() const {
  return id_;
}
inline uint32_t Column::id() const {
  // @@protoc_insertion_point(field_get:proto.Column.id)
  return _internal_id();
}
inline void Column::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Column::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.Column.id)
}

// bytes value = 2;
inline void Column::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Column::value() const {
  // @@protoc_insertion_point(field_get:proto.Column.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Column.value)
}
inline std::string* Column::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:proto.Column.value)
  return _s;
}
inline const std::string& Column::_internal_value() const {
  return value_.Get();
}
inline void Column::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* Column::release_value() {
  // @@protoc_insertion_point(field_release:proto.Column.value)
  return value_.Release();
}
inline void Column::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Column.value)
}

// -------------------------------------------------------------------

// Row

// .proto.OpType op_type = 1;
inline void Row::clear_op_type() {
  op_type_ = 0;
}
inline ::proto::OpType Row::_internal_op_type() const {
  return static_cast< ::proto::OpType >(op_type_);
}
inline ::proto::OpType Row::op_type() const {
  // @@protoc_insertion_point(field_get:proto.Row.op_type)
  return _internal_op_type();
}
inline void Row::_internal_set_op_type(::proto::OpType value) {
  
  op_type_ = value;
}
inline void Row::set_op_type(::proto::OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:proto.Row.op_type)
}

// string table_name = 2;
inline void Row::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& Row::table_name() const {
  // @@protoc_insertion_point(field_get:proto.Row.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Row::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Row.table_name)
}
inline std::string* Row::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:proto.Row.table_name)
  return _s;
}
inline const std::string& Row::_internal_table_name() const {
  return table_name_.Get();
}
inline void Row::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Row::_internal_mutable_table_name() {
  
  return table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Row::release_table_name() {
  // @@protoc_insertion_point(field_release:proto.Row.table_name)
  return table_name_.Release();
}
inline void Row::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault()) {
    table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Row.table_name)
}

// bytes key = 3;
inline void Row::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Row::key() const {
  // @@protoc_insertion_point(field_get:proto.Row.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Row::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Row.key)
}
inline std::string* Row::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proto.Row.key)
  return _s;
}
inline const std::string& Row::_internal_key() const {
  return key_.Get();
}
inline void Row::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* Row::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* Row::release_key() {
  // @@protoc_insertion_point(field_release:proto.Row.key)
  return key_.Release();
}
inline void Row::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Row.key)
}

// bytes data = 4;
inline void Row::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Row::data() const {
  // @@protoc_insertion_point(field_get:proto.Row.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Row::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Row.data)
}
inline std::string* Row::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto.Row.data)
  return _s;
}
inline const std::string& Row::_internal_data() const {
  return data_.Get();
}
inline void Row::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* Row::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* Row::release_data() {
  // @@protoc_insertion_point(field_release:proto.Row.data)
  return data_.Release();
}
inline void Row::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Row.data)
}

// repeated .proto.Column column = 5;
inline int Row::_internal_column_size() const {
  return column_.size();
}
inline int Row::column_size() const {
  return _internal_column_size();
}
inline void Row::clear_column() {
  column_.Clear();
}
inline ::proto::Column* Row::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Row.column)
  return column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Column >*
Row::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:proto.Row.column)
  return &column_;
}
inline const ::proto::Column& Row::_internal_column(int index) const {
  return column_.Get(index);
}
inline const ::proto::Column& Row::column(int index) const {
  // @@protoc_insertion_point(field_get:proto.Row.column)
  return _internal_column(index);
}
inline ::proto::Column* Row::_internal_add_column() {
  return column_.Add();
}
inline ::proto::Column* Row::add_column() {
  ::proto::Column* _add = _internal_add_column();
  // @@protoc_insertion_point(field_add:proto.Row.column)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Column >&
Row::column() const {
  // @@protoc_insertion_point(field_list:proto.Row.column)
  return column_;
}

// -------------------------------------------------------------------

// Transaction

// repeated .proto.Row row = 1;
inline int Transaction::_internal_row_size() const {
  return row_.size();
}
inline int Transaction::row_size() const {
  return _internal_row_size();
}
inline void Transaction::clear_row() {
  row_.Clear();
}
inline ::proto::Row* Transaction::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Transaction.row)
  return row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Row >*
Transaction::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:proto.Transaction.row)
  return &row_;
}
inline const ::proto::Row& Transaction::_internal_row(int index) const {
  return row_.Get(index);
}
inline const ::proto::Row& Transaction::row(int index) const {
  // @@protoc_insertion_point(field_get:proto.Transaction.row)
  return _internal_row(index);
}
inline ::proto::Row* Transaction::_internal_add_row() {
  return row_.Add();
}
inline ::proto::Row* Transaction::add_row() {
  ::proto::Row* _add = _internal_add_row();
  // @@protoc_insertion_point(field_add:proto.Transaction.row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Row >&
Transaction::row() const {
  // @@protoc_insertion_point(field_list:proto.Transaction.row)
  return row_;
}

// uint64 start_epoch = 2;
inline void Transaction::clear_start_epoch() {
  start_epoch_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_start_epoch() const {
  return start_epoch_;
}
inline uint64_t Transaction::start_epoch() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.start_epoch)
  return _internal_start_epoch();
}
inline void Transaction::_internal_set_start_epoch(uint64_t value) {
  
  start_epoch_ = value;
}
inline void Transaction::set_start_epoch(uint64_t value) {
  _internal_set_start_epoch(value);
  // @@protoc_insertion_point(field_set:proto.Transaction.start_epoch)
}

// uint64 commit_epoch = 3;
inline void Transaction::clear_commit_epoch() {
  commit_epoch_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_commit_epoch() const {
  return commit_epoch_;
}
inline uint64_t Transaction::commit_epoch() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.commit_epoch)
  return _internal_commit_epoch();
}
inline void Transaction::_internal_set_commit_epoch(uint64_t value) {
  
  commit_epoch_ = value;
}
inline void Transaction::set_commit_epoch(uint64_t value) {
  _internal_set_commit_epoch(value);
  // @@protoc_insertion_point(field_set:proto.Transaction.commit_epoch)
}

// uint64 csn = 4;
inline void Transaction::clear_csn() {
  csn_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_csn() const {
  return csn_;
}
inline uint64_t Transaction::csn() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.csn)
  return _internal_csn();
}
inline void Transaction::_internal_set_csn(uint64_t value) {
  
  csn_ = value;
}
inline void Transaction::set_csn(uint64_t value) {
  _internal_set_csn(value);
  // @@protoc_insertion_point(field_set:proto.Transaction.csn)
}

// string server_ip = 5;
inline void Transaction::clear_server_ip() {
  server_ip_.ClearToEmpty();
}
inline const std::string& Transaction::server_ip() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 server_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Transaction.server_ip)
}
inline std::string* Transaction::mutable_server_ip() {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:proto.Transaction.server_ip)
  return _s;
}
inline const std::string& Transaction::_internal_server_ip() const {
  return server_ip_.Get();
}
inline void Transaction::_internal_set_server_ip(const std::string& value) {
  
  server_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_server_ip() {
  
  return server_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Transaction::release_server_ip() {
  // @@protoc_insertion_point(field_release:proto.Transaction.server_ip)
  return server_ip_.Release();
}
inline void Transaction::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocated(server_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_ip_.IsDefault()) {
    server_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Transaction.server_ip)
}

// uint32 server_id = 6;
inline void Transaction::clear_server_id() {
  server_id_ = 0u;
}
inline uint32_t Transaction::_internal_server_id() const {
  return server_id_;
}
inline uint32_t Transaction::server_id() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.server_id)
  return _internal_server_id();
}
inline void Transaction::_internal_set_server_id(uint32_t value) {
  
  server_id_ = value;
}
inline void Transaction::set_server_id(uint32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:proto.Transaction.server_id)
}

// string client_ip = 7;
inline void Transaction::clear_client_ip() {
  client_ip_.ClearToEmpty();
}
inline const std::string& Transaction::client_ip() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.client_ip)
  return _internal_client_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_client_ip(ArgT0&& arg0, ArgT... args) {
 
 client_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Transaction.client_ip)
}
inline std::string* Transaction::mutable_client_ip() {
  std::string* _s = _internal_mutable_client_ip();
  // @@protoc_insertion_point(field_mutable:proto.Transaction.client_ip)
  return _s;
}
inline const std::string& Transaction::_internal_client_ip() const {
  return client_ip_.Get();
}
inline void Transaction::_internal_set_client_ip(const std::string& value) {
  
  client_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_client_ip() {
  
  return client_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Transaction::release_client_ip() {
  // @@protoc_insertion_point(field_release:proto.Transaction.client_ip)
  return client_ip_.Release();
}
inline void Transaction::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    
  } else {
    
  }
  client_ip_.SetAllocated(client_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_ip_.IsDefault()) {
    client_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Transaction.client_ip)
}

// uint64 client_txn_id = 8;
inline void Transaction::clear_client_txn_id() {
  client_txn_id_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_client_txn_id() const {
  return client_txn_id_;
}
inline uint64_t Transaction::client_txn_id() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.client_txn_id)
  return _internal_client_txn_id();
}
inline void Transaction::_internal_set_client_txn_id(uint64_t value) {
  
  client_txn_id_ = value;
}
inline void Transaction::set_client_txn_id(uint64_t value) {
  _internal_set_client_txn_id(value);
  // @@protoc_insertion_point(field_set:proto.Transaction.client_txn_id)
}

// .proto.TxnType txn_type = 9;
inline void Transaction::clear_txn_type() {
  txn_type_ = 0;
}
inline ::proto::TxnType Transaction::_internal_txn_type() const {
  return static_cast< ::proto::TxnType >(txn_type_);
}
inline ::proto::TxnType Transaction::txn_type() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.txn_type)
  return _internal_txn_type();
}
inline void Transaction::_internal_set_txn_type(::proto::TxnType value) {
  
  txn_type_ = value;
}
inline void Transaction::set_txn_type(::proto::TxnType value) {
  _internal_set_txn_type(value);
  // @@protoc_insertion_point(field_set:proto.Transaction.txn_type)
}

// .proto.TxnState txn_state = 10;
inline void Transaction::clear_txn_state() {
  txn_state_ = 0;
}
inline ::proto::TxnState Transaction::_internal_txn_state() const {
  return static_cast< ::proto::TxnState >(txn_state_);
}
inline ::proto::TxnState Transaction::txn_state() const {
  // @@protoc_insertion_point(field_get:proto.Transaction.txn_state)
  return _internal_txn_state();
}
inline void Transaction::_internal_set_txn_state(::proto::TxnState value) {
  
  txn_state_ = value;
}
inline void Transaction::set_txn_state(::proto::TxnState value) {
  _internal_set_txn_state(value);
  // @@protoc_insertion_point(field_set:proto.Transaction.txn_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Result>() {
  return ::proto::Result_descriptor();
}
template <> struct is_proto_enum< ::proto::TxnType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TxnType>() {
  return ::proto::TxnType_descriptor();
}
template <> struct is_proto_enum< ::proto::TxnState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TxnState>() {
  return ::proto::TxnState_descriptor();
}
template <> struct is_proto_enum< ::proto::OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::OpType>() {
  return ::proto::OpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftransaction_2eproto
