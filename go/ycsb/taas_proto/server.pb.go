// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/server.protofiles

package taas_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReplyTransactionToClient struct {
	ClientTxnId uint64   `protobuf:"varint,1,opt,name=client_txn_id,json=clientTxnId" json:"client_txn_id,omitempty"`
	TxnState    TxnState `protobuf:"varint,2,opt,name=txn_state,json=txnState,enum=pb.TxnState" json:"txn_state,omitempty"`
	SendNode    *Node    `protobuf:"bytes,3,opt,name=send_node,json=sendNode" json:"send_node,omitempty"`
	RecvNode    *Node    `protobuf:"bytes,4,opt,name=recv_node,json=recvNode" json:"recv_node,omitempty"`
}

func (m *ReplyTransactionToClient) Reset()                    { *m = ReplyTransactionToClient{} }
func (m *ReplyTransactionToClient) String() string            { return proto.CompactTextString(m) }
func (*ReplyTransactionToClient) ProtoMessage()               {}
func (*ReplyTransactionToClient) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ReplyTransactionToClient) GetClientTxnId() uint64 {
	if m != nil {
		return m.ClientTxnId
	}
	return 0
}

func (m *ReplyTransactionToClient) GetTxnState() TxnState {
	if m != nil {
		return m.TxnState
	}
	return TxnState_Empty
}

func (m *ReplyTransactionToClient) GetSendNode() *Node {
	if m != nil {
		return m.SendNode
	}
	return nil
}

func (m *ReplyTransactionToClient) GetRecvNode() *Node {
	if m != nil {
		return m.RecvNode
	}
	return nil
}

type RaftRequest struct {
	// Types that are valid to be assigned to Type:
	//	*RaftRequest_Ping
	//	*RaftRequest_Signal
	//	*RaftRequest_LookupMaster
	//	*RaftRequest_ForwardEpoch
	//	*RaftRequest_EpochReplicationAck
	//	*RaftRequest_RaftPropose
	//	*RaftRequest_RaftAccept
	//	*RaftRequest_RaftCommit
	//	*RaftRequest_Stats
	//	*RaftRequest_ChangeServerState
	Type isRaftRequest_Type `protobuf_oneof:"type"`
}

func (m *RaftRequest) Reset()                    { *m = RaftRequest{} }
func (m *RaftRequest) String() string            { return proto.CompactTextString(m) }
func (*RaftRequest) ProtoMessage()               {}
func (*RaftRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type isRaftRequest_Type interface{ isRaftRequest_Type() }

type RaftRequest_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=ping,oneof"`
}
type RaftRequest_Signal struct {
	Signal *Signal `protobuf:"bytes,2,opt,name=signal,oneof"`
}
type RaftRequest_LookupMaster struct {
	LookupMaster *LookupMasterRequest `protobuf:"bytes,3,opt,name=lookup_master,json=lookupMaster,oneof"`
}
type RaftRequest_ForwardEpoch struct {
	ForwardEpoch *ForwardEpochRequest `protobuf:"bytes,4,opt,name=forward_epoch,json=forwardEpoch,oneof"`
}
type RaftRequest_EpochReplicationAck struct {
	EpochReplicationAck *EpochReplicationAck `protobuf:"bytes,5,opt,name=epoch_replication_ack,json=epochReplicationAck,oneof"`
}
type RaftRequest_RaftPropose struct {
	RaftPropose *RaftPropose `protobuf:"bytes,6,opt,name=raft_propose,json=raftPropose,oneof"`
}
type RaftRequest_RaftAccept struct {
	RaftAccept *RaftAcceptRequest `protobuf:"bytes,7,opt,name=raft_accept,json=raftAccept,oneof"`
}
type RaftRequest_RaftCommit struct {
	RaftCommit *RaftCommitRequest `protobuf:"bytes,8,opt,name=raft_commit,json=raftCommit,oneof"`
}
type RaftRequest_Stats struct {
	Stats *StatsRequest `protobuf:"bytes,9,opt,name=stats,oneof"`
}
type RaftRequest_ChangeServerState struct {
	ChangeServerState *ChangeServerStateRequest `protobuf:"bytes,10,opt,name=change_server_state,json=changeServerState,oneof"`
}

func (*RaftRequest_Ping) isRaftRequest_Type()                {}
func (*RaftRequest_Signal) isRaftRequest_Type()              {}
func (*RaftRequest_LookupMaster) isRaftRequest_Type()        {}
func (*RaftRequest_ForwardEpoch) isRaftRequest_Type()        {}
func (*RaftRequest_EpochReplicationAck) isRaftRequest_Type() {}
func (*RaftRequest_RaftPropose) isRaftRequest_Type()         {}
func (*RaftRequest_RaftAccept) isRaftRequest_Type()          {}
func (*RaftRequest_RaftCommit) isRaftRequest_Type()          {}
func (*RaftRequest_Stats) isRaftRequest_Type()               {}
func (*RaftRequest_ChangeServerState) isRaftRequest_Type()   {}

func (m *RaftRequest) GetType() isRaftRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *RaftRequest) GetPing() *Ping {
	if x, ok := m.GetType().(*RaftRequest_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *RaftRequest) GetSignal() *Signal {
	if x, ok := m.GetType().(*RaftRequest_Signal); ok {
		return x.Signal
	}
	return nil
}

func (m *RaftRequest) GetLookupMaster() *LookupMasterRequest {
	if x, ok := m.GetType().(*RaftRequest_LookupMaster); ok {
		return x.LookupMaster
	}
	return nil
}

func (m *RaftRequest) GetForwardEpoch() *ForwardEpochRequest {
	if x, ok := m.GetType().(*RaftRequest_ForwardEpoch); ok {
		return x.ForwardEpoch
	}
	return nil
}

func (m *RaftRequest) GetEpochReplicationAck() *EpochReplicationAck {
	if x, ok := m.GetType().(*RaftRequest_EpochReplicationAck); ok {
		return x.EpochReplicationAck
	}
	return nil
}

func (m *RaftRequest) GetRaftPropose() *RaftPropose {
	if x, ok := m.GetType().(*RaftRequest_RaftPropose); ok {
		return x.RaftPropose
	}
	return nil
}

func (m *RaftRequest) GetRaftAccept() *RaftAcceptRequest {
	if x, ok := m.GetType().(*RaftRequest_RaftAccept); ok {
		return x.RaftAccept
	}
	return nil
}

func (m *RaftRequest) GetRaftCommit() *RaftCommitRequest {
	if x, ok := m.GetType().(*RaftRequest_RaftCommit); ok {
		return x.RaftCommit
	}
	return nil
}

func (m *RaftRequest) GetStats() *StatsRequest {
	if x, ok := m.GetType().(*RaftRequest_Stats); ok {
		return x.Stats
	}
	return nil
}

func (m *RaftRequest) GetChangeServerState() *ChangeServerStateRequest {
	if x, ok := m.GetType().(*RaftRequest_ChangeServerState); ok {
		return x.ChangeServerState
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the protofiles package.
func (*RaftRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RaftRequest_OneofMarshaler, _RaftRequest_OneofUnmarshaler, _RaftRequest_OneofSizer, []interface{}{
		(*RaftRequest_Ping)(nil),
		(*RaftRequest_Signal)(nil),
		(*RaftRequest_LookupMaster)(nil),
		(*RaftRequest_ForwardEpoch)(nil),
		(*RaftRequest_EpochReplicationAck)(nil),
		(*RaftRequest_RaftPropose)(nil),
		(*RaftRequest_RaftAccept)(nil),
		(*RaftRequest_RaftCommit)(nil),
		(*RaftRequest_Stats)(nil),
		(*RaftRequest_ChangeServerState)(nil),
	}
}

func _RaftRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RaftRequest)
	// type
	switch x := m.Type.(type) {
	case *RaftRequest_Ping:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *RaftRequest_Signal:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Signal); err != nil {
			return err
		}
	case *RaftRequest_LookupMaster:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LookupMaster); err != nil {
			return err
		}
	case *RaftRequest_ForwardEpoch:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForwardEpoch); err != nil {
			return err
		}
	case *RaftRequest_EpochReplicationAck:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpochReplicationAck); err != nil {
			return err
		}
	case *RaftRequest_RaftPropose:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RaftPropose); err != nil {
			return err
		}
	case *RaftRequest_RaftAccept:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RaftAccept); err != nil {
			return err
		}
	case *RaftRequest_RaftCommit:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RaftCommit); err != nil {
			return err
		}
	case *RaftRequest_Stats:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Stats); err != nil {
			return err
		}
	case *RaftRequest_ChangeServerState:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangeServerState); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RaftRequest.Type has unexpected type %T", x)
	}
	return nil
}

func _RaftRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RaftRequest)
	switch tag {
	case 1: // type.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_Ping{msg}
		return true, err
	case 2: // type.signal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Signal)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_Signal{msg}
		return true, err
	case 3: // type.lookup_master
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LookupMasterRequest)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_LookupMaster{msg}
		return true, err
	case 4: // type.forward_epoch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ForwardEpochRequest)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_ForwardEpoch{msg}
		return true, err
	case 5: // type.epoch_replication_ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EpochReplicationAck)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_EpochReplicationAck{msg}
		return true, err
	case 6: // type.raft_propose
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RaftPropose)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_RaftPropose{msg}
		return true, err
	case 7: // type.raft_accept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RaftAcceptRequest)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_RaftAccept{msg}
		return true, err
	case 8: // type.raft_commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RaftCommitRequest)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_RaftCommit{msg}
		return true, err
	case 9: // type.stats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatsRequest)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_Stats{msg}
		return true, err
	case 10: // type.change_server_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChangeServerStateRequest)
		err := b.DecodeMessage(msg)
		m.Type = &RaftRequest_ChangeServerState{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RaftRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RaftRequest)
	// type
	switch x := m.Type.(type) {
	case *RaftRequest_Ping:
		s := proto.Size(x.Ping)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_Signal:
		s := proto.Size(x.Signal)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_LookupMaster:
		s := proto.Size(x.LookupMaster)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_ForwardEpoch:
		s := proto.Size(x.ForwardEpoch)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_EpochReplicationAck:
		s := proto.Size(x.EpochReplicationAck)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_RaftPropose:
		s := proto.Size(x.RaftPropose)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_RaftAccept:
		s := proto.Size(x.RaftAccept)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_RaftCommit:
		s := proto.Size(x.RaftCommit)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_Stats:
		s := proto.Size(x.Stats)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftRequest_ChangeServerState:
		s := proto.Size(x.ChangeServerState)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("protofiles: unexpected type %T in oneof", x))
	}
	return n
}

type Ping struct {
	From int32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To   int32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *Ping) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Ping) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

// *
// Generic signal message
type Signal struct {
	From int32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
}

func (m *Signal) Reset()                    { *m = Signal{} }
func (m *Signal) String() string            { return proto.CompactTextString(m) }
func (*Signal) ProtoMessage()               {}
func (*Signal) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *Signal) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

type LookupMasterRequest struct {
	TxnIds []uint64 `protobuf:"varint,1,rep,packed,name=txn_ids,json=txnIds" json:"txn_ids,omitempty"`
	Keys   [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *LookupMasterRequest) Reset()                    { *m = LookupMasterRequest{} }
func (m *LookupMasterRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupMasterRequest) ProtoMessage()               {}
func (*LookupMasterRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *LookupMasterRequest) GetTxnIds() []uint64 {
	if m != nil {
		return m.TxnIds
	}
	return nil
}

func (m *LookupMasterRequest) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ForwardEpochRequest struct {
	From    int32  `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To      int32  `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	EpochId uint64 `protobuf:"varint,3,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
}

func (m *ForwardEpochRequest) Reset()                    { *m = ForwardEpochRequest{} }
func (m *ForwardEpochRequest) String() string            { return proto.CompactTextString(m) }
func (*ForwardEpochRequest) ProtoMessage()               {}
func (*ForwardEpochRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *ForwardEpochRequest) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *ForwardEpochRequest) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *ForwardEpochRequest) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type EpochReplicationAck struct {
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
}

func (m *EpochReplicationAck) Reset()                    { *m = EpochReplicationAck{} }
func (m *EpochReplicationAck) String() string            { return proto.CompactTextString(m) }
func (*EpochReplicationAck) ProtoMessage()               {}
func (*EpochReplicationAck) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *EpochReplicationAck) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type RaftPropose struct {
	Value uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *RaftPropose) Reset()                    { *m = RaftPropose{} }
func (m *RaftPropose) String() string            { return proto.CompactTextString(m) }
func (*RaftPropose) ProtoMessage()               {}
func (*RaftPropose) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *RaftPropose) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RaftAcceptRequest struct {
	From    uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To      uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	EpochId uint64 `protobuf:"varint,3,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
}

func (m *RaftAcceptRequest) Reset()                    { *m = RaftAcceptRequest{} }
func (m *RaftAcceptRequest) String() string            { return proto.CompactTextString(m) }
func (*RaftAcceptRequest) ProtoMessage()               {}
func (*RaftAcceptRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *RaftAcceptRequest) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *RaftAcceptRequest) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *RaftAcceptRequest) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type RaftCommitRequest struct {
	From    uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To      uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	EpochId uint64 `protobuf:"varint,3,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
}

func (m *RaftCommitRequest) Reset()                    { *m = RaftCommitRequest{} }
func (m *RaftCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*RaftCommitRequest) ProtoMessage()               {}
func (*RaftCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *RaftCommitRequest) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *RaftCommitRequest) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *RaftCommitRequest) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type StatsRequest struct {
	From  uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To    uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	Level uint32 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
}

func (m *StatsRequest) Reset()                    { *m = StatsRequest{} }
func (m *StatsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()               {}
func (*StatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *StatsRequest) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *StatsRequest) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *StatsRequest) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type ChangeServerStateRequest struct {
	From         uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To           uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	Target       uint32 `protobuf:"varint,3,opt,name=target" json:"target,omitempty"`
	State        uint32 `protobuf:"varint,4,opt,name=state" json:"state,omitempty"`
	PullServerId uint32 `protobuf:"varint,5,opt,name=pull_server_id,json=pullServerId" json:"pull_server_id,omitempty"`
	EpochId      uint64 `protobuf:"varint,6,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
}

func (m *ChangeServerStateRequest) Reset()                    { *m = ChangeServerStateRequest{} }
func (m *ChangeServerStateRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeServerStateRequest) ProtoMessage()               {}
func (*ChangeServerStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *ChangeServerStateRequest) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *ChangeServerStateRequest) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *ChangeServerStateRequest) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *ChangeServerStateRequest) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ChangeServerStateRequest) GetPullServerId() uint32 {
	if m != nil {
		return m.PullServerId
	}
	return 0
}

func (m *ChangeServerStateRequest) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

// *
// A response is always preceeded by a Request
type RaftResponse struct {
	// Types that are valid to be assigned to Type:
	//	*RaftResponse_Pong
	//	*RaftResponse_LookupMaster
	//	*RaftResponse_RaftAccept
	//	*RaftResponse_RaftCommit
	//	*RaftResponse_Stats
	//	*RaftResponse_ChangeServerState
	Type isRaftResponse_Type `protobuf_oneof:"type"`
}

func (m *RaftResponse) Reset()                    { *m = RaftResponse{} }
func (m *RaftResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftResponse) ProtoMessage()               {}
func (*RaftResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

type isRaftResponse_Type interface{ isRaftResponse_Type() }

type RaftResponse_Pong struct {
	Pong *Pong `protobuf:"bytes,1,opt,name=pong,oneof"`
}
type RaftResponse_LookupMaster struct {
	LookupMaster *LookupMasterResponse `protobuf:"bytes,2,opt,name=lookup_master,json=lookupMaster,oneof"`
}
type RaftResponse_RaftAccept struct {
	RaftAccept *RaftAcceptResponse `protobuf:"bytes,3,opt,name=raft_accept,json=raftAccept,oneof"`
}
type RaftResponse_RaftCommit struct {
	RaftCommit *RaftCommitResponse `protobuf:"bytes,4,opt,name=raft_commit,json=raftCommit,oneof"`
}
type RaftResponse_Stats struct {
	Stats *StatsResponse `protobuf:"bytes,5,opt,name=stats,oneof"`
}
type RaftResponse_ChangeServerState struct {
	ChangeServerState *ChangeServerStateResponse `protobuf:"bytes,6,opt,name=change_server_state,json=changeServerState,oneof"`
}

func (*RaftResponse_Pong) isRaftResponse_Type()              {}
func (*RaftResponse_LookupMaster) isRaftResponse_Type()      {}
func (*RaftResponse_RaftAccept) isRaftResponse_Type()        {}
func (*RaftResponse_RaftCommit) isRaftResponse_Type()        {}
func (*RaftResponse_Stats) isRaftResponse_Type()             {}
func (*RaftResponse_ChangeServerState) isRaftResponse_Type() {}

func (m *RaftResponse) GetType() isRaftResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *RaftResponse) GetPong() *Pong {
	if x, ok := m.GetType().(*RaftResponse_Pong); ok {
		return x.Pong
	}
	return nil
}

func (m *RaftResponse) GetLookupMaster() *LookupMasterResponse {
	if x, ok := m.GetType().(*RaftResponse_LookupMaster); ok {
		return x.LookupMaster
	}
	return nil
}

func (m *RaftResponse) GetRaftAccept() *RaftAcceptResponse {
	if x, ok := m.GetType().(*RaftResponse_RaftAccept); ok {
		return x.RaftAccept
	}
	return nil
}

func (m *RaftResponse) GetRaftCommit() *RaftCommitResponse {
	if x, ok := m.GetType().(*RaftResponse_RaftCommit); ok {
		return x.RaftCommit
	}
	return nil
}

func (m *RaftResponse) GetStats() *StatsResponse {
	if x, ok := m.GetType().(*RaftResponse_Stats); ok {
		return x.Stats
	}
	return nil
}

func (m *RaftResponse) GetChangeServerState() *ChangeServerStateResponse {
	if x, ok := m.GetType().(*RaftResponse_ChangeServerState); ok {
		return x.ChangeServerState
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the protofiles package.
func (*RaftResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RaftResponse_OneofMarshaler, _RaftResponse_OneofUnmarshaler, _RaftResponse_OneofSizer, []interface{}{
		(*RaftResponse_Pong)(nil),
		(*RaftResponse_LookupMaster)(nil),
		(*RaftResponse_RaftAccept)(nil),
		(*RaftResponse_RaftCommit)(nil),
		(*RaftResponse_Stats)(nil),
		(*RaftResponse_ChangeServerState)(nil),
	}
}

func _RaftResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RaftResponse)
	// type
	switch x := m.Type.(type) {
	case *RaftResponse_Pong:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pong); err != nil {
			return err
		}
	case *RaftResponse_LookupMaster:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LookupMaster); err != nil {
			return err
		}
	case *RaftResponse_RaftAccept:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RaftAccept); err != nil {
			return err
		}
	case *RaftResponse_RaftCommit:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RaftCommit); err != nil {
			return err
		}
	case *RaftResponse_Stats:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Stats); err != nil {
			return err
		}
	case *RaftResponse_ChangeServerState:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangeServerState); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RaftResponse.Type has unexpected type %T", x)
	}
	return nil
}

func _RaftResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RaftResponse)
	switch tag {
	case 1: // type.pong
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pong)
		err := b.DecodeMessage(msg)
		m.Type = &RaftResponse_Pong{msg}
		return true, err
	case 2: // type.lookup_master
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LookupMasterResponse)
		err := b.DecodeMessage(msg)
		m.Type = &RaftResponse_LookupMaster{msg}
		return true, err
	case 3: // type.raft_accept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RaftAcceptResponse)
		err := b.DecodeMessage(msg)
		m.Type = &RaftResponse_RaftAccept{msg}
		return true, err
	case 4: // type.raft_commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RaftCommitResponse)
		err := b.DecodeMessage(msg)
		m.Type = &RaftResponse_RaftCommit{msg}
		return true, err
	case 5: // type.stats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatsResponse)
		err := b.DecodeMessage(msg)
		m.Type = &RaftResponse_Stats{msg}
		return true, err
	case 6: // type.change_server_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChangeServerStateResponse)
		err := b.DecodeMessage(msg)
		m.Type = &RaftResponse_ChangeServerState{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RaftResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RaftResponse)
	// type
	switch x := m.Type.(type) {
	case *RaftResponse_Pong:
		s := proto.Size(x.Pong)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftResponse_LookupMaster:
		s := proto.Size(x.LookupMaster)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftResponse_RaftAccept:
		s := proto.Size(x.RaftAccept)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftResponse_RaftCommit:
		s := proto.Size(x.RaftCommit)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftResponse_Stats:
		s := proto.Size(x.Stats)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RaftResponse_ChangeServerState:
		s := proto.Size(x.ChangeServerState)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("protofiles: unexpected type %T in oneof", x))
	}
	return n
}

// *
// For debugging and testing purposes
type Pong struct {
	From    int32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To      int32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	Time    int64 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	EpochId int64 `protobuf:"varint,4,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *Pong) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Pong) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Pong) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Pong) GetEpochId() int64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type MasterMetadata struct {
	Master     uint32 `protobuf:"varint,1,opt,name=master" json:"master,omitempty"`
	EpochCount uint32 `protobuf:"varint,2,opt,name=epoch_count,json=epochCount" json:"epoch_count,omitempty"`
}

func (m *MasterMetadata) Reset()                    { *m = MasterMetadata{} }
func (m *MasterMetadata) String() string            { return proto.CompactTextString(m) }
func (*MasterMetadata) ProtoMessage()               {}
func (*MasterMetadata) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *MasterMetadata) GetMaster() uint32 {
	if m != nil {
		return m.Master
	}
	return 0
}

func (m *MasterMetadata) GetEpochCount() uint32 {
	if m != nil {
		return m.EpochCount
	}
	return 0
}

type KeyMasterMetadata struct {
	Key      []byte          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Metadata *MasterMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *KeyMasterMetadata) Reset()                    { *m = KeyMasterMetadata{} }
func (m *KeyMasterMetadata) String() string            { return proto.CompactTextString(m) }
func (*KeyMasterMetadata) ProtoMessage()               {}
func (*KeyMasterMetadata) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *KeyMasterMetadata) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyMasterMetadata) GetMetadata() *MasterMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type LookupMasterResponse struct {
	EpochId       []uint64             `protobuf:"varint,1,rep,packed,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
	LookupResults []*KeyMasterMetadata `protobuf:"bytes,2,rep,name=lookup_results,json=lookupResults" json:"lookup_results,omitempty"`
}

func (m *LookupMasterResponse) Reset()                    { *m = LookupMasterResponse{} }
func (m *LookupMasterResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupMasterResponse) ProtoMessage()               {}
func (*LookupMasterResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *LookupMasterResponse) GetEpochId() []uint64 {
	if m != nil {
		return m.EpochId
	}
	return nil
}

func (m *LookupMasterResponse) GetLookupResults() []*KeyMasterMetadata {
	if m != nil {
		return m.LookupResults
	}
	return nil
}

type RaftAcceptResponse struct {
	From    uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To      uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	EpochId uint64 `protobuf:"varint,3,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
	Result  uint32 `protobuf:"varint,4,opt,name=result" json:"result,omitempty"`
}

func (m *RaftAcceptResponse) Reset()                    { *m = RaftAcceptResponse{} }
func (m *RaftAcceptResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftAcceptResponse) ProtoMessage()               {}
func (*RaftAcceptResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *RaftAcceptResponse) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *RaftAcceptResponse) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *RaftAcceptResponse) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *RaftAcceptResponse) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type RaftCommitResponse struct {
	From    uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To      uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	EpochId uint64 `protobuf:"varint,3,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
	Result  uint32 `protobuf:"varint,4,opt,name=result" json:"result,omitempty"`
}

func (m *RaftCommitResponse) Reset()                    { *m = RaftCommitResponse{} }
func (m *RaftCommitResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftCommitResponse) ProtoMessage()               {}
func (*RaftCommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

func (m *RaftCommitResponse) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *RaftCommitResponse) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *RaftCommitResponse) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *RaftCommitResponse) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type StatsResponse struct {
	From    uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To      uint64 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	EpochId uint64 `protobuf:"varint,3,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
}

func (m *StatsResponse) Reset()                    { *m = StatsResponse{} }
func (m *StatsResponse) String() string            { return proto.CompactTextString(m) }
func (*StatsResponse) ProtoMessage()               {}
func (*StatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func (m *StatsResponse) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *StatsResponse) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *StatsResponse) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type ChangeServerStateResponse struct {
	From    uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To      uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
	Target  uint32 `protobuf:"varint,3,opt,name=target" json:"target,omitempty"`
	EpochId uint64 `protobuf:"varint,4,opt,name=epoch_id,json=epochId" json:"epoch_id,omitempty"`
	State   uint32 `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
}

func (m *ChangeServerStateResponse) Reset()                    { *m = ChangeServerStateResponse{} }
func (m *ChangeServerStateResponse) String() string            { return proto.CompactTextString(m) }
func (*ChangeServerStateResponse) ProtoMessage()               {}
func (*ChangeServerStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *ChangeServerStateResponse) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *ChangeServerStateResponse) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *ChangeServerStateResponse) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *ChangeServerStateResponse) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *ChangeServerStateResponse) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func init() {
	proto.RegisterType((*ReplyTransactionToClient)(nil), "pb.ReplyTransactionToClient")
	proto.RegisterType((*RaftRequest)(nil), "pb.RaftRequest")
	proto.RegisterType((*Ping)(nil), "pb.Ping")
	proto.RegisterType((*Signal)(nil), "pb.Signal")
	proto.RegisterType((*LookupMasterRequest)(nil), "pb.LookupMasterRequest")
	proto.RegisterType((*ForwardEpochRequest)(nil), "pb.ForwardEpochRequest")
	proto.RegisterType((*EpochReplicationAck)(nil), "pb.EpochReplicationAck")
	proto.RegisterType((*RaftPropose)(nil), "pb.RaftPropose")
	proto.RegisterType((*RaftAcceptRequest)(nil), "pb.RaftAcceptRequest")
	proto.RegisterType((*RaftCommitRequest)(nil), "pb.RaftCommitRequest")
	proto.RegisterType((*StatsRequest)(nil), "pb.StatsRequest")
	proto.RegisterType((*ChangeServerStateRequest)(nil), "pb.ChangeServerStateRequest")
	proto.RegisterType((*RaftResponse)(nil), "pb.RaftResponse")
	proto.RegisterType((*Pong)(nil), "pb.Pong")
	proto.RegisterType((*MasterMetadata)(nil), "pb.MasterMetadata")
	proto.RegisterType((*KeyMasterMetadata)(nil), "pb.KeyMasterMetadata")
	proto.RegisterType((*LookupMasterResponse)(nil), "pb.LookupMasterResponse")
	proto.RegisterType((*RaftAcceptResponse)(nil), "pb.RaftAcceptResponse")
	proto.RegisterType((*RaftCommitResponse)(nil), "pb.RaftCommitResponse")
	proto.RegisterType((*StatsResponse)(nil), "pb.StatsResponse")
	proto.RegisterType((*ChangeServerStateResponse)(nil), "pb.ChangeServerStateResponse")
}

func init() { proto.RegisterFile("pb/server.protofiles", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0x13, 0x27, 0x4d, 0x4f, 0x7e, 0x76, 0x3b, 0xe9, 0xee, 0x7a, 0x57, 0x0b, 0x44, 0x66,
	0x91, 0xb2, 0x5c, 0xb4, 0xa8, 0x70, 0xc1, 0x4a, 0x08, 0xb4, 0x5b, 0x81, 0x52, 0x41, 0xcb, 0x6a,
	0x1a, 0x2e, 0xb8, 0xb2, 0x1c, 0x7b, 0x92, 0xb5, 0xe2, 0x78, 0x06, 0x7b, 0x52, 0x9a, 0x37, 0xe0,
	0x65, 0xb8, 0xe6, 0x2d, 0x78, 0x0f, 0xde, 0x02, 0xcd, 0x99, 0x89, 0x63, 0x3b, 0x29, 0xad, 0x54,
	0x71, 0x37, 0xe7, 0x3b, 0xe7, 0x3b, 0x73, 0x3c, 0xf3, 0xcd, 0x97, 0xc0, 0x23, 0x31, 0x39, 0xc9,
	0x58, 0x7a, 0xcd, 0xd2, 0x63, 0x91, 0x72, 0xc9, 0x49, 0x4d, 0x4c, 0x5e, 0x1c, 0x89, 0xc9, 0x89,
	0x4c, 0xfd, 0x24, 0xf3, 0x03, 0x19, 0xf1, 0x44, 0x67, 0x5e, 0x74, 0xc5, 0xe4, 0x24, 0xe1, 0x21,
	0xd3, 0xa1, 0xfb, 0x97, 0x05, 0x0e, 0x65, 0x22, 0x5e, 0x8d, 0x37, 0x95, 0x63, 0x7e, 0x16, 0x47,
	0x2c, 0x91, 0xc4, 0x85, 0x6e, 0x80, 0x2b, 0x4f, 0xde, 0x24, 0x5e, 0x14, 0x3a, 0xd6, 0xc0, 0x1a,
	0xda, 0xb4, 0xad, 0xc1, 0xf1, 0x4d, 0x72, 0x1e, 0x92, 0xd7, 0x70, 0xa0, 0x92, 0x99, 0xf4, 0x25,
	0x73, 0x6a, 0x03, 0x6b, 0xd8, 0x3b, 0xed, 0x1c, 0x8b, 0xc9, 0xf1, 0xf8, 0x26, 0xb9, 0x52, 0x18,
	0x6d, 0x49, 0xb3, 0x22, 0x9f, 0xc1, 0x41, 0xc6, 0x92, 0xd0, 0x53, 0xdb, 0x3b, 0xf5, 0x81, 0x35,
	0x6c, 0x9f, 0xb6, 0x54, 0xe9, 0x25, 0x0f, 0x19, 0x6d, 0xa9, 0x94, 0x5a, 0xa9, 0xb2, 0x94, 0x05,
	0xd7, 0xba, 0xcc, 0xae, 0x96, 0xa9, 0x94, 0x5a, 0xb9, 0x7f, 0xdb, 0xd0, 0xa6, 0xfe, 0x54, 0x52,
	0xf6, 0xdb, 0x92, 0x65, 0x92, 0x7c, 0x0c, 0xb6, 0x88, 0x92, 0x19, 0xce, 0x68, 0x18, 0xef, 0xa3,
	0x64, 0x36, 0xda, 0xa3, 0x88, 0x93, 0x57, 0xd0, 0xcc, 0xa2, 0x59, 0xe2, 0xc7, 0x38, 0x65, 0xfb,
	0x14, 0x54, 0xc5, 0x15, 0x22, 0xa3, 0x3d, 0x6a, 0x72, 0xe4, 0x5b, 0xe8, 0xc6, 0x9c, 0xcf, 0x97,
	0xc2, 0x5b, 0xf8, 0x99, 0x64, 0xa9, 0x99, 0xf3, 0x99, 0x2a, 0xfe, 0x09, 0x13, 0x17, 0x88, 0x9b,
	0x5d, 0x47, 0x7b, 0xb4, 0x13, 0x17, 0x60, 0xc5, 0x9f, 0xf2, 0xf4, 0x77, 0x3f, 0x0d, 0x3d, 0x26,
	0x78, 0xf0, 0xc1, 0x7c, 0x00, 0xf2, 0x7f, 0xd0, 0x89, 0xef, 0x15, 0x5e, 0xe0, 0x4f, 0x0b, 0x30,
	0xb9, 0x80, 0x27, 0xc8, 0xf3, 0x52, 0x26, 0xe2, 0x28, 0xf0, 0xd5, 0x7d, 0x78, 0x7e, 0x30, 0x77,
	0x1a, 0x9b, 0x3e, 0xa6, 0x41, 0x9e, 0x7f, 0x1b, 0xcc, 0x47, 0x7b, 0xb4, 0xcf, 0xb6, 0x61, 0xf2,
	0x15, 0x74, 0x52, 0x7f, 0x2a, 0x3d, 0x91, 0x72, 0xc1, 0x33, 0xe6, 0x34, 0xb1, 0xcb, 0x23, 0xd5,
	0x45, 0x9d, 0xdd, 0x7b, 0x0d, 0x8f, 0xf6, 0x68, 0x3b, 0xdd, 0x84, 0xe4, 0x6b, 0xc0, 0xd0, 0xf3,
	0x83, 0x80, 0x09, 0xe9, 0xec, 0x23, 0xe9, 0xc9, 0x9a, 0xf4, 0x16, 0xd1, 0xcd, 0x07, 0x40, 0x9a,
	0x83, 0x39, 0x33, 0xe0, 0x8b, 0x45, 0x24, 0x9d, 0x56, 0x99, 0x79, 0x86, 0x68, 0x85, 0xa9, 0x41,
	0x32, 0x84, 0x86, 0xd2, 0x50, 0xe6, 0x1c, 0x20, 0xe7, 0x31, 0xde, 0x8e, 0x02, 0x36, 0xe5, 0xba,
	0x80, 0x5c, 0x42, 0x3f, 0xf8, 0xe0, 0x27, 0x33, 0xe6, 0x69, 0xc9, 0x1b, 0xed, 0x01, 0xf2, 0x5e,
	0x2a, 0xde, 0x19, 0xa6, 0xaf, 0x30, 0xab, 0x45, 0x98, 0xf7, 0x38, 0x0c, 0xaa, 0xb9, 0x77, 0x4d,
	0xb0, 0xe5, 0x4a, 0x30, 0xf7, 0x73, 0xb0, 0x95, 0x60, 0x08, 0x01, 0x7b, 0x9a, 0xf2, 0x05, 0x0a,
	0xa9, 0x41, 0x71, 0x4d, 0x7a, 0x50, 0x93, 0x1c, 0x85, 0xd3, 0xa0, 0x35, 0xc9, 0xdd, 0x97, 0xd0,
	0xd4, 0xd2, 0xd9, 0x55, 0xed, 0xbe, 0x83, 0xfe, 0x0e, 0xad, 0x90, 0x67, 0xb0, 0xaf, 0xdf, 0x51,
	0xe6, 0x58, 0x83, 0xfa, 0xd0, 0xa6, 0x4d, 0xa9, 0x9e, 0x50, 0xa6, 0x7a, 0xcc, 0xd9, 0x2a, 0x73,
	0x6a, 0x83, 0xfa, 0xb0, 0x43, 0x71, 0xed, 0x8e, 0xa1, 0xbf, 0x43, 0x2f, 0xf7, 0x19, 0x8e, 0x3c,
	0x87, 0x96, 0xd6, 0x50, 0x14, 0xa2, 0x7c, 0x6d, 0xba, 0x8f, 0xf1, 0x79, 0xe8, 0x7e, 0x01, 0xfd,
	0x1d, 0xea, 0x29, 0x31, 0xac, 0x32, 0xe3, 0x53, 0xfd, 0xca, 0xd6, 0xd2, 0x38, 0x82, 0xc6, 0xb5,
	0x1f, 0x2f, 0x99, 0x29, 0xd3, 0x81, 0x4b, 0xe1, 0x70, 0x4b, 0x19, 0xa5, 0x51, 0xbb, 0x5b, 0xa3,
	0x76, 0xef, 0x1a, 0xd5, 0xf4, 0x2c, 0x69, 0xe6, 0xa1, 0x3d, 0x47, 0xd0, 0x29, 0x6a, 0xea, 0x5e,
	0xed, 0x8e, 0xa0, 0x11, 0xb3, 0x6b, 0x16, 0x63, 0xaf, 0x2e, 0xd5, 0x81, 0xfb, 0xa7, 0x05, 0xce,
	0x6d, 0x32, 0xbb, 0x57, 0xdb, 0xa7, 0xd0, 0x94, 0x7e, 0x3a, 0x63, 0xd2, 0xf4, 0x35, 0x91, 0xda,
	0x4e, 0xeb, 0xd9, 0xd6, 0xdb, 0x61, 0x40, 0x5e, 0x41, 0x4f, 0x2c, 0xe3, 0x78, 0xad, 0xf8, 0x28,
	0x44, 0x3f, 0xe8, 0xd2, 0x8e, 0x42, 0xf5, 0x04, 0xe7, 0x61, 0xe9, 0xcb, 0x9b, 0xe5, 0x2f, 0xff,
	0xa7, 0x06, 0x1d, 0xed, 0x96, 0x99, 0xe0, 0x49, 0xc6, 0xd0, 0x2e, 0x79, 0xc5, 0x2e, 0xb9, 0xb1,
	0x4b, 0x9e, 0xcc, 0xc8, 0x77, 0x55, 0x23, 0xd4, 0xae, 0xe9, 0x6c, 0x1b, 0xa1, 0x6e, 0xb8, 0xe5,
	0x84, 0x6f, 0xca, 0x26, 0xa2, 0x7d, 0xf4, 0x69, 0xd5, 0x44, 0x72, 0x72, 0xd1, 0x45, 0xde, 0x94,
	0x5d, 0xc4, 0x2e, 0x53, 0xd7, 0x8a, 0x28, 0x53, 0x8d, 0x8d, 0xbc, 0x5e, 0xdb, 0x88, 0xf6, 0xcb,
	0xc3, 0x82, 0x8d, 0xe4, 0xf5, 0xc6, 0x47, 0x7e, 0xde, 0xed, 0x23, 0xda, 0x22, 0x3f, 0xba, 0xc5,
	0x47, 0xf2, 0x26, 0xff, 0x61, 0x24, 0xbf, 0x82, 0xad, 0x8e, 0xf2, 0x5e, 0x6f, 0x95, 0x80, 0x2d,
	0xa3, 0x85, 0xfe, 0x39, 0xac, 0x53, 0x5c, 0x97, 0xae, 0xd1, 0x46, 0x3c, 0xbf, 0xc6, 0x73, 0xe8,
	0xe9, 0xe3, 0xbd, 0x60, 0xd2, 0x0f, 0x7d, 0xe9, 0x2b, 0x1d, 0x99, 0x0b, 0xd2, 0x6a, 0x33, 0x11,
	0xf9, 0x04, 0xda, 0xba, 0x49, 0xc0, 0x97, 0x89, 0x34, 0xc2, 0x03, 0x84, 0xce, 0x14, 0xe2, 0xfe,
	0x02, 0x87, 0x3f, 0xb2, 0x55, 0xa5, 0xdb, 0x63, 0xa8, 0xcf, 0xd9, 0x0a, 0x5b, 0x75, 0xa8, 0x5a,
	0x92, 0x63, 0x68, 0x2d, 0x4c, 0xd6, 0x48, 0x80, 0xa8, 0xa3, 0x29, 0xf3, 0x68, 0x5e, 0xe3, 0x72,
	0x38, 0xda, 0x25, 0x8f, 0x8a, 0xc5, 0xd4, 0x0b, 0xda, 0x24, 0xdf, 0x40, 0xcf, 0x48, 0x2d, 0x65,
	0xd9, 0x32, 0x96, 0xda, 0x08, 0xcd, 0xef, 0xc6, 0xd6, 0x8c, 0xd4, 0xe8, 0x92, 0xea, 0x5a, 0x77,
	0x0e, 0x64, 0x5b, 0x50, 0x0f, 0x34, 0x0a, 0x75, 0xaa, 0x7a, 0x16, 0xf3, 0x0c, 0x4d, 0xb4, 0xde,
	0xac, 0x2c, 0xc1, 0xff, 0x6b, 0xb3, 0x4b, 0xe8, 0x96, 0xa4, 0x7b, 0xc7, 0x3e, 0xf6, 0x5d, 0xee,
	0xf7, 0x87, 0x05, 0xcf, 0x6f, 0x95, 0xf4, 0x83, 0x4c, 0xab, 0xaa, 0xd8, 0xc2, 0xc7, 0xe5, 0x7e,
	0xd6, 0x28, 0xf8, 0xd9, 0xa4, 0x89, 0xff, 0x3e, 0xbf, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0x62, 0x94, 0x98, 0xb9, 0x0a, 0x00, 0x00,
}
